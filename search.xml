<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>持续交付2.0笔记</title>
      <link href="/posts/77/"/>
      <url>/posts/77/</url>
      
        <content type="html"><![CDATA[<ul><li>持续交付2.0<ul><li>软件产品开发中的活动浪费<img src="https://api2.mubu.com/v3/document_image/89717ef5-acba-41e8-a576-6e4ac96f7157-156946.jpg" alt=""></li><li>双环模型<img src="https://api2.mubu.com/v3/document_image/a53e13e6-0a91-4e16-b625-1f6e87aab037-156946.jpg" alt=""></li><li>4个核心原则<ul><li>坚持少做<ul><li>少做，先做简单的事情</li><li>想办法对新创意尽早验证<a id="more"></a></li></ul></li><li>持续分解问题<ul><li>对问题的层层分解，可以让团队更了解业务，更早识别出风险。</li><li>即便是很大的课题或者大范围的变更，也可以将其分解为一系列小变更，快速解决，并得到反馈，从而尽早消除风险</li></ul></li><li>坚持快速反馈<ul><li>只有通过快速反馈，我们才能尽早了解所完成工作的质量和效果</li></ul></li><li>持续改进并衡量<ul><li>无论做了什么样的改进，如果无法以某种方式衡量它的结果，就无法证明真的得到了改进</li><li>在着手解决每个问题之前，我们都要找到适当的衡量方式，并将其与对应的功能需求放在同等重要的位置上，一起完成</li></ul></li></ul></li><li>持续交付七巧板<img src="https://api2.mubu.com/v3/document_image/d9a51231-6bf7-4a87-9197-7232bf5e9fc5-156946.jpg" alt=""></li><li>角色<img src="https://api2.mubu.com/v3/document_image/2c947700-5312-4389-ab7d-1db0fc164ba8-156946.jpg" alt=""></li></ul></li><li>价值探索环<ul><li>工作原则<ul><li>分解并快速试错</li><li>一次只验证一点</li><li>允许失败</li></ul></li><li>共创与精炼的常用方法<ul><li>装饰窗方法<ul><li>为新功能预留一个“入口”，让用户能够看到，但实际上并没有真正实现其功能</li></ul></li><li>最小可行特性法<ul><li>通常在产品从 1到n的过程中使用</li></ul></li><li>特区法<ul><li>在特定用户范围内进行试验，以验证某个新功能的有效性</li></ul></li><li>定向探索法<ul><li>针对具有某种特定行为的特定用户群体，依据该用户的具体行为模式，设计调查提纲，有针对性地探索其行为背后的动机</li></ul></li><li>稻草人法<ul><li>不开发任何真实的功能，只假装这个功能已经完成了，并向用户展示该功能的真实效果，从而得到用户的真实反馈</li><li>与装饰窗方法的区别在于它让用户真实地感受到了功能提供的结果，而事实上并没有开发这个功能</li></ul></li><li>最小可行产品法<ul><li>通常是在产品从0到 1 的过程中使用。</li><li>它是以尽可能少的成本快速开发产品的核心功能，并找到用户，收集真实反馈，验证真实的用户需求，以确定新产品方向和形态的方法，其目标是找到合适的产品形态</li></ul></li></ul></li></ul></li><li>快速验证环<ul><li>构建<ul><li>时间盒管理</li><li>任务分解<ul><li>需求拆分</li><li>开发任务拆分</li></ul></li><li>持续验证</li></ul></li><li>工作原则<ul><li>质量内建<ul><li>从生产过程的第一个环节开始 ，就要注重产出物的质量，并且在每个环节中都要开展质量保障活动，消除因质量问题导致的返工及次品率上升，以此降低最终的质量风险，保障进度</li></ul></li><li>消除等待<ul><li>通过“拉动”让价值流动起来<ul><li>关注点先从“人”移动到“物”</li><li>因下游处理能力不足导致的阻塞<img src="https://api2.mubu.com/v3/document_image/4eaae23c-1cd3-485f-852e-6c8321926db1-156946.jpg" alt=""></li><li>通过下游拉动方式，让价值流动起来<img src="https://api2.mubu.com/v3/document_image/1b54d9c9-0143-43af-943d-397b58dcafc7-156946.jpg" alt=""></li><li>开发工具、提升能力或增加瓶颈入力后，整体吞吐量提升<img src="https://api2.mubu.com/v3/document_image/1199bfa2-06b1-41a3-9cbd-e574098ea23a-156946.jpg" alt=""></li></ul></li><li>任务自助化<ul><li>企业应该在工具平台建设方面改变一下思路，也就是说，通过运用先进的生产技术，使得环境部署、数据统计这一类事务性操作不再依赖“专家型”人才，而是让每个人在其需要时都能够“自助服务”</li></ul></li></ul></li><li>重复事务自动化</li><li>监测一切<ul><li>对生产系统的监测有两个目的， 一是要确认软件的确在正常运行， 一旦发现异常，我们可以及时采取措施，纠正错误，以免影响用户的使用。 二是要及时得到有效业务数据，验证我们在探索环中提出的假设</li></ul></li></ul></li></ul></li><li>持续交付2.0的组织文化<ul><li>安全 、 信任与持续改善<ul><li>失败是安全的</li><li>相互信任</li><li>持续改善</li></ul></li><li>文化塑造四步法<ul><li>行为决定文化<ul><li>公司文化转变四步法<ul><li>第一步：定义我们想要做的事情</li><li>第二步：定义我们期望的做事方式或方法</li><li>第三步：提供相应的培训，使员工具备完成其工作的能力</li><li>第四步：设计一些必要的机制或措施来强化我们所鼓励的那些行为</li></ul></li></ul></li><li>谷歌的工程师质量文化<img src="https://api2.mubu.com/v3/document_image/b44b438f-ece5-4688-8c01-86330b8730a9-156946.jpg" alt=""></li></ul></li><li>行动原则<ul><li>价值导向</li><li>快速验证</li><li>持续学习<ul><li>定期回顾</li><li>复盘机制</li></ul></li></ul></li><li>度量原则<ul><li>度量指标的4类属性<ul><li>引领性指标<ul><li>引领性指标是指那些对达成预定目标有着重要作用的指标。通常，一个好的引领性指标有以下两个基本特点：第一，它具有预见性；第二，团队成员可以影响这些指标。</li></ul></li><li>滞后性指标<ul><li>滞后性指标是指那些为了达成最重要目标的跟踪性指标，如销售收入、利润率、市场份额、客户满意度等研究分析都属于滞后性指标。当你得到这些结果的时候，导致这些结果的事情早已结束，你得到的都是历史性结果数据。</li></ul></li><li>可观测性指标<ul><li>可观测性指标是指可以被客观监测到，但无法通过直接行动来改变的指标。</li></ul></li><li>可行动性指标<ul><li>可行动性指标是指在能力可触达范围内，通过团队努力，可以设法直接改变的指标。</li></ul></li></ul></li><li>软件度量项的相关性示意图<img src="https://api2.mubu.com/v3/document_image/ed9818f4-823d-403a-97fd-efb673e547ed-156946.jpg" alt=""></li><li>度量的目标是改善</li></ul></li><li>改善套路<img src="https://api2.mubu.com/v3/document_image/93479d4d-e978-454d-a115-1c4e76082a2a-156946.jpg" alt=""><ul><li>迭代改进<ul><li>PDCA循环</li></ul></li></ul></li></ul></li><li>持续交付的软件架构系统<ul><li>大系统小做原则<ul><li>持续交付架构要求<ul><li>为测试而设计（ design for test ）</li><li>为部署而设计（ design for deployment ）</li><li>为监控而设计（ design for monitor ）</li><li>为扩展而设计（ design for scale ）</li><li>为失效而设计（ design for failure ）</li></ul></li><li>系统拆分原则<ul><li>每个组件或服务有清晰的业务职责</li><li>高内聚、低耦合</li><li>整个系统易于构建与测试</li><li>使团队成员之间的沟通协作更加顺畅</li></ul></li></ul></li><li>常见架构模式<ul><li>微核架构<img src="https://api2.mubu.com/v3/document_image/7f050587-c5ab-4ab5-8113-ffebf2472584-156946.jpg" alt=""></li><li>微服务架构</li><li>巨石应用</li></ul></li><li>架构改造实施模式<ul><li>拆迁者模式<ul><li>重写所有代码</li></ul></li><li>绞杀者模式<ul><li>保持原来的遗留系统不变，当需要开发新的功能时，重新开发一个服务，实现新的功能。通过不断构建新的服务，逐步使遗留系统失效，并最终替代它</li></ul></li><li>修缮者模式<ul><li>将遗留系统的部分功能与其余部分隔离，以新的架构进行单独改善。在改善的同时，需要保证与其他部分仍能协同工作。这种方式与绞杀者模式类似，但改造只发生在同一个系统内部，而非遗留系统外部</li></ul></li><li>数据库的拆分方法<ul><li>详细了解数据库结构，包括外键约束、共享的可变数据以及事务性边界等</li><li>先拆分数据库，再进行数据迁移</li><li>数据库双写无误后，找到程序架构中的缝隙</li><li>将拆分出来的程序模块和数据库组合在一起，形成微服务</li></ul></li></ul></li></ul></li><li>业务需求协作管理<ul><li>不平等的 INVEST 原则<ul><li>EST &gt; INV</li></ul></li><li>五大拆分技法<ul><li>路径拆分法<img src="https://api2.mubu.com/v3/document_image/4614cbd1-dc48-4139-942a-8063dc12f226-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/95ad5e88-5d38-46cc-810a-da2a63c438d4-156946.jpg" alt=""></li><li>接触点拆分<img src="https://api2.mubu.com/v3/document_image/4b246ef2-3d55-4743-9d80-4e4cdb3cf9a0-156946.jpg" alt=""></li><li>按数据类型或格式拆分<img src="https://api2.mubu.com/v3/document_image/cc446e42-eb68-4b08-83fa-6815ad1e53d5-156946.jpg" alt=""></li><li>按规则拆分<img src="https://api2.mubu.com/v3/document_image/e084a7dd-9e52-4bd3-ba32-0f39df64af73-156946.jpg" alt=""></li><li>接探索路径拆分<img src="https://api2.mubu.com/v3/document_image/51087d51-e360-4df4-ad25-07e5d32c8570-156946.jpg" alt=""></li></ul></li><li>七大组成部分<img src="https://api2.mubu.com/v3/document_image/6872bfc9-3c33-4db1-8f22-96287a6ed5f2-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/a08c1279-acdb-4e96-9e18-786a76bbf05a-156946.jpg" alt=""></li><li>需求分析与管理工具集<ul><li>用户故事地图<img src="https://api2.mubu.com/v3/document_image/95d758dd-0f14-4bb3-b210-90ae8aa89ad5-156946.jpg" alt=""></li><li>用户故事树<img src="https://api2.mubu.com/v3/document_image/db3b74ad-cca8-4e78-b67f-74653f6e4d76-156946.jpg" alt=""></li><li>依赖关系图<img src="https://api2.mubu.com/v3/document_image/510d85b2-f2ba-42f0-b196-d6df0c38921c-156946.jpg" alt=""></li></ul></li><li>可视化故事墙<img src="https://api2.mubu.com/v3/document_image/2d2394a7-78b3-4710-b0e2-5f5d0615a782-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/51d1396b-5df4-431f-8d11-817ffe3e8256-156946.jpg" alt=""></li><li>故事验证<img src="https://api2.mubu.com/v3/document_image/e5684de2-1977-4a95-92a9-de286bdb3809-156946.jpg" alt=""></li></ul></li><li>部署流水线原则与工具设计<ul><li>流水线的设计原则<ul><li>一次构建，多次使用</li><li>与业务逻辑松耦合</li><li>并行化原则</li><li>快速反馈优先</li><li>重要反馈优先</li></ul></li><li>工具链总体架构<img src="https://api2.mubu.com/v3/document_image/a408111a-7ca0-4cb1-9b5e-6b6a19ef3f70-156946.jpg" alt=""></li><li>部署流水线示例<img src="https://api2.mubu.com/v3/document_image/a820ed3e-663b-403c-a9d9-eb812637eb63-156946.jpg" alt=""></li><li>部署流水线执行过程示意图<img src="https://api2.mubu.com/v3/document_image/94486552-394f-4685-9ab7-e86529e96424-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/e7ea4ec9-4671-4f4f-88f2-b941ac8d0ccc-156946.jpg" alt=""></li><li>编译构建管理服务<img src="https://api2.mubu.com/v3/document_image/54fc7bc6-8f8a-4937-96ce-7f7fb32eeeb7-156946.jpg" alt=""></li><li>自动化测试管理服务<img src="https://api2.mubu.com/v3/document_image/3193bf16-ff47-4601-b031-dd20f23a0654-156946.jpg" alt=""></li><li>软件部署管理服务<ul><li>Puppet/Chef/Ansible/SaltStack</li></ul></li><li>基础环境管理服务<img src="https://api2.mubu.com/v3/document_image/0f3cf1e3-9334-4677-a3be-fcb34a52ea8c-156946.jpg" alt=""></li><li>多种多样的部署流水线<ul><li>多组件的部署流水线<img src="https://api2.mubu.com/v3/document_image/c1fc3b75-fb04-4c0a-a64c-f0f37c0bf660-156946.jpg" alt=""></li><li>个人部署流水线<img src="https://api2.mubu.com/v3/document_image/2a471e63-8852-4469-898f-715d7446ee55-156946.jpg" alt=""></li></ul></li></ul></li><li>利于集成的分支策略<ul><li>常见分支开发模式<ul><li>主干开发，主干发布（Trunk-based Development &amp; Release)</li><li>主干开发，分支发布（Trunk-based Development &amp; Branch-based Release)</li><li>分支开发，主干发布（Branch-based Development &amp; Trunk-based Release)</li></ul></li><li>分支模式的演化<ul><li>三驾马车分支模式<img src="https://api2.mubu.com/v3/document_image/72f67597-bde4-458f-9c45-a3478462fb27-156946.jpg" alt=""></li><li>Gitflow 分支模式<img src="https://api2.mubu.com/v3/document_image/b84401a3-fd54-406b-ad47-61a8dd76f974-156946.jpg" alt=""></li><li>GitHubFlow 分支模式<img src="https://api2.mubu.com/v3/document_image/9c45627b-aa3d-4441-8bd2-e1d5affcaadd-156946.jpg" alt=""></li></ul></li><li>分支策略的选择<ul><li>版本发布模式三要素<img src="https://api2.mubu.com/v3/document_image/caa7d62f-9e7e-4722-b3fd-afed0f8f5235-156946.jpg" alt=""></li><li>项目制发布模式</li><li>发布火车模式</li><li>城际快线模式</li><li>分支策略与发布周期的关系<img src="https://api2.mubu.com/v3/document_image/5d07dfe5-61d5-4595-b5a6-96a07615f97b-156946.jpg" alt=""></li></ul></li><li>持续交付2.0 选择分支模式的原则<ul><li>分支越少越好，最好只有一条主干</li><li>分支生存周期越短越好，最好在3天以内</li><li>在业务允许的前提下，发布周期越短越好</li></ul></li></ul></li><li>持续集成<ul><li>六步提交法<img src="https://api2.mubu.com/v3/document_image/2ef8ce1b-1897-4217-8ae1-1c059e2bf4f0-156946.jpg" alt=""></li><li>自查表<ul><li>主干开发，频繁提交</li><li>每次提交应该是一个完整的任务</li><li>让提交构建在 10 分钟以内完成</li><li>提交构建失败后应禁止团队成员提交新代码，也不许其他人检出该代码</li><li>立即在 10 分钟内修复已失败的提交构建，否则回滚代码</li><li>自动化构建验证通过后，对软件质量有比较大的信心</li></ul></li><li>速度与质量的权衡<ul><li>分级构建<img src="https://api2.mubu.com/v3/document_image/7a279225-c12f-4568-8325-c9fce0321733-156946.jpg" alt=""><ul><li>团队将所有自动化验证分成两部分。将那些运行速度较快、反馈质量高的测试用例，放人提交构建中 ， 而将那些运行较慢或者不经常失败的测试用例放在次级构建环节，作为次级构建验证的内容。当提交构建验证成功之后，马上触发次级构建的执行</li></ul></li><li>云平台的威力</li></ul></li><li>在团队中实施持续集成实践<ul><li>持续集成实施五步法<img src="https://api2.mubu.com/v3/document_image/ac9e0a4f-95d2-452b-af9a-eb805831efb3-156946.jpg" alt=""></li><li>构建脚本化 ，搭建持续集成框架</li><li>向构建中添加已有的自动化验证集合</li><li>选择有利于持续集成的分支策略</li><li>建立六步提交法</li><li>持续优化</li><li>工程师改变习惯，并提升技能</li></ul></li><li>分支策略与部署流水线<ul><li>主干开发，主干发布<img src="https://api2.mubu.com/v3/document_image/b317b1a3-3c69-43a7-be47-6c48726a20db-156946.jpg" alt=""></li><li>主干开发，分支发布<img src="https://api2.mubu.com/v3/document_image/e38618f6-b215-4536-a606-ec081b1adba2-156946.jpg" alt=""></li><li>分支开发，主干发布<img src="https://api2.mubu.com/v3/document_image/066653ae-8506-4487-af6d-a585f2bacfa5-156946.jpg" alt=""></li><li>多组件集成<img src="https://api2.mubu.com/v3/document_image/b31d2ade-3f0e-417f-878b-9d6a8ed02ce8-156946.jpg" alt=""></li></ul></li></ul></li><li>自动化测试策略与方法<ul><li>测试四象限<img src="https://api2.mubu.com/v3/document_image/9accba66-d32e-492c-9dd7-c870a9de9db8-156946.jpg" alt=""></li><li>微核架构的测试金字塔<img src="https://api2.mubu.com/v3/document_image/50eaa3ce-f8f1-4e27-8bc4-72629528af0c-156946.jpg" alt=""></li><li>微服务应用的测试金字塔<img src="https://api2.mubu.com/v3/document_image/dd4a0457-56cb-40d9-ad10-3c56f6ff00e9-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/8dacfd01-9396-453a-b874-3b5024119a82-156946.jpg" alt=""></li><li>自动化测试的实践原则<ul><li>自动化测试用例运行次数越多，平均成本越低，收益就越大</li><li>自动化测试用例之间应该尽可能相互独立，互不影响</li><li>在质量有保障的前提下，自动化测试用例的数量越少越好</li><li>遗留代码的自动化测试编写应该从代码热区开始</li><li>自动化测试用例从测试金字塔的中间层开始补充，投入产出比最高</li></ul></li></ul></li><li>软件配置管理<ul><li>将一切纳入配置管理<ul><li>我们要通过软件配置管理获得两种基本能力，它们分别是可追溯性和可重现性，从而提升软件整个生命周期管理的安全性，并提高团队协作效率</li><li>可追溯性是指任何人在获得授权的前提下，能够找到该软件的任何变更历史，即对任何一次软件变更，都可以准确地回答 5W1H ，即谁（ who ）、什么时间（ when ）、做了什么( what ）、为什么（ why ）、如何做的（ how ）</li><li>可重现性是指任何人在获得授权的前提下，能够重现从过去到现在之间任意时间点的软件状态</li><li>软件配置管理的范围<img src="https://api2.mubu.com/v3/document_image/deb9361e-7631-47d8-b00b-49deef68e6c0-156946.jpg" alt=""></li><li>软件配置管理原则<ul><li>一切皆有版本</li><li>共享唯一受信源</li><li>标准化与自动化</li></ul></li></ul></li><li>软件包的版本管理</li><li>包依赖管理</li><li>环境基础设施管理</li><li>软件配置项的管理<ul><li>二进制与配置项的分离<img src="https://api2.mubu.com/v3/document_image/bed85277-ab90-4d5b-945b-30da24decba8-156946.jpg" alt=""></li><li>配置信息的版本管理<ul><li>环境配置项<ul><li>域名、端口等</li></ul></li><li>应用配置项<ul><li>内存大小、数据库连接池大小等</li></ul></li><li>业务配置项<ul><li>功能特性开关</li></ul></li><li>配置的分类<img src="https://api2.mubu.com/v3/document_image/0ab4f1e0-af10-4ee6-85c9-bfd63a4b3ad3-156946.jpg" alt=""></li></ul></li></ul></li><li>不可变基础设施与云应用</li><li>数据的版本管理<ul><li>数据库结构变更<ul><li>存储在源代码管理</li></ul></li><li>数据文件<ul><li>数据文件存在远程文件系统，源代码里存储URI</li></ul></li></ul></li><li>需求与源代码的版本关联</li><li>检查版本管理<ul><li>产品源代码和测试代码是否放入了版本控制系统</li><li>软件应用的配置信息是否放入了版本控制系统</li><li>各类环境的系统配置是否放入了版本控制系统</li><li>自动化的构建和部署脚本是否放入了版本控制系统</li><li>软件包是否进行了版本管理</li></ul></li><li>软件配置管理自检查<ul><li>只要从源代码仓库中检出产品源代码仓库，就可以一键式自动化地构建出完整软件包吗？</li><li>在没有他人的帮助下，任何团队成员都可以一键式自动化搭建出一套应用软件系统，用于体验产品新功能吗？</li></ul></li></ul></li><li>低风险发布<ul><li>高频发布是一种趋势</li><li>降低发布风险的方法<ul><li>蓝绿部署<img src="https://api2.mubu.com/v3/document_image/683a88bd-158e-4cf0-8e5b-2dae2a5fbe90-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/fbbe9d61-73d8-4757-853c-4b0f9d0b7775-156946.jpg" alt=""></li><li>滚动部署<img src="https://api2.mubu.com/v3/document_image/1093d5a0-98ce-4d97-8a8e-50395e46cc91-156946.jpg" alt=""></li><li>金丝雀发布与灰度发布<img src="https://api2.mubu.com/v3/document_image/2aaca913-a5b1-4e7d-8a74-818102a1ad32-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/fa52b456-4502-428f-97f2-623afca1dac0-156946.jpg" alt=""></li><li>暗部署<img src="https://api2.mubu.com/v3/document_image/69264403-26a9-429b-8eb1-19880c28311a-156946.jpg" alt=""></li></ul></li><li>高频发布支撑技术<ul><li>拆分功能。将一个功能进行分解，分解为更小的在一个开发周期 内能够完成的功能集</li><li>先后再前。先实现服务端功能，再实现用户界面。 即首先实现用户不可见的那部分功能，同时要确保不影响原有的功能</li><li>功能开关技术<img src="https://api2.mubu.com/v3/document_image/3b7b4c0b-a39d-4bff-9af1-e7e73c9fc187-156946.jpg" alt=""></li><li>数据迁移技术<ul><li>只增不删</li><li>数据迁移<img src="https://api2.mubu.com/v3/document_image/6691cf0b-d8ef-44ee-9e11-2fcd50c2c865-156946.jpg" alt=""></li></ul></li><li>抽象分支方法<img src="https://api2.mubu.com/v3/document_image/f62af3d3-6acd-43bc-8f2c-d6fa5d874805-156946.jpg" alt=""></li><li>升级替代回滚</li></ul></li><li>推迟发布动机的渐进增强环<img src="https://api2.mubu.com/v3/document_image/66f36fcd-baae-4ddf-85ea-9b551ff40e9a-156946.jpg" alt=""></li></ul></li><li>监测与决策<ul><li>生产监测范围<ul><li>后台服务的监测<ul><li>基础监测</li><li>应用监测</li><li>业务监测</li></ul></li><li>分发软件的监测<ul><li>基础监测是软件所运行的基础环境（如移动设备的机型、操作系统、内存等）的运行情况，以及与服务器的连接情况</li><li>应用监测是软件应用本身的健康状态（如内存使用、程序崩横、无晌应、与后台服务器的通信情况等）</li><li>业务监测是用户的使用数据，如所在页面、停留时间、用户操作等</li></ul></li></ul></li><li>数据监测体系<ul><li>收集与处理<img src="https://api2.mubu.com/v3/document_image/f9f2a902-8943-4f65-bfda-067d3049a733-156946.jpg" alt=""></li><li>数据的标准化<img src="https://api2.mubu.com/v3/document_image/1c590a1b-5efd-49fa-be02-a587835df4f0-156946.jpg" alt=""></li><li>监测数据体系及其能力衡量<ul><li>正确性，即收集到的数据与事实的一致性。</li><li>全面性，即收集到的数据信息是否足以支持团队做出决策。</li><li>及时性，即数据的发生到能够支持决策所需要的处理时间足够短。</li></ul></li></ul></li><li>问题处理体系<ul><li>告警海洋与智能化管理<ul><li>通过关联分析 ， 让监控点离问题发生地更近</li><li>通过动态阁值设定合理的告警</li><li>定期梳理告警设置，清理不必要的告警</li><li>通过人工智 能动态解除告警</li></ul></li><li>问题处理是一个学习过程<img src="https://api2.mubu.com/v3/document_image/a4e32ea1-5bf9-46bc-a2ee-2e76324a341a-156946.jpg" alt=""></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> agile </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于错误预算的报警</title>
      <link href="/posts/76/"/>
      <url>/posts/76/</url>
      
        <content type="html"><![CDATA[<h3 id="错误预算（Error-Budget）"><a href="#错误预算（Error-Budget）" class="headerlink" title="错误预算（Error Budget）"></a>错误预算（Error Budget）</h3><p>基于SLO来计算错误预算，比如可用性要求是99.9%，预估一个周期的总请求数是100万，那错误预算就是 100万 X（1-0.999）= 1000，表示我们在一个统计周期内，最多只能有 1000 个请求可以失败</p><h3 id="燃烧率（Burn-Rate）"><a href="#燃烧率（Burn-Rate）" class="headerlink" title="燃烧率（Burn Rate）"></a>燃烧率（Burn Rate）</h3><p>燃烧率表示错误预算的消耗速度，燃烧率为1时表示在一个统计周期内，刚好消耗完错误预算，如果30天的可用性要求是99.9%，那么持续的0.1%的错误率，正好消耗掉所有错误预算，燃烧率为1。<br><a id="more"></a></p><p><strong>燃烧率与错误率关系表：</strong></p><p><img src="/posts/76/1.png" alt="图片"></p><h3 id="错误预算消耗"><a href="#错误预算消耗" class="headerlink" title="错误预算消耗"></a>错误预算消耗</h3><p>一定时间内，当错误预算消耗过快，我们可以选择报警，比如当1个小时消耗的错误预算超过2%时，6个小时消耗的错误预算超过5%时。通过错误预算消耗的占比，我们可以计算出燃烧率。</p><p>假定30天内的错误预算为X，燃烧率为1表示30*24小时正好消耗完X，那么当1h消耗2%的X的燃烧率就可以如下公式计算：</p><p><strong>燃烧率 = (2% <em> X / 1h) / (X / 30 </em> 24h) = 14.4</strong></p><p>常用的错误预算消耗与燃烧率：</p><p><img src="/posts/76/2.png" alt="图片"></p><h3 id="基于错误预算消耗报警"><a href="#基于错误预算消耗报警" class="headerlink" title="基于错误预算消耗报警"></a>基于错误预算消耗报警</h3><p>当错误预消耗过快，及时报警，并当问题解决时能及时解除报警。多时间周期综合报警规则。报警示例：</p><p><img src="/posts/76/3.png" alt="图片"></p><p>以上报警规则表示，当1h的错误预算消耗超过2%时，并且错误数量大于10个时，并且5m的错误率依然过高，错误预算消耗依然会持续达到2%，就及时报警，当6h内的错误预算超过5%时，也会及时报警。</p><p><code>service:slo_errors_per_request:ratio_rate1h{destination_service=&quot;prod.elasticsearch5-slb.slb.local.gllue.host&quot;} &gt; (14.4*(1-0.9999))</code> 规则是为了在 1h 错误预算消耗超过2%时及时报警，</p><p><code>service:slo_errors:increase1h{destination_service=&quot;prod.elasticsearch5-slb.slb.local.gllue.host&quot;} &gt; 10</code> 规则是为了防止当请求量过少时，少量的出错请求就会导致报警，</p><p><code>service:slo_errors_per_request:ratio_rate5m{destination_service=&quot;prod.elasticsearch5-slb.slb.local.gllue.host&quot;} &gt; (14.4*(1-0.9999))</code> 规则是为了当问题解决时，能及时停止报警，否则可能会出现1h内持续报警，但是问题已经得到解决</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://landing.google.com/sre/workbook/chapters/alerting-on-slos/" target="_blank" rel="noopener">https://landing.google.com/sre/workbook/chapters/alerting-on-slos/</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sre </tag>
            
            <tag> sli </tag>
            
            <tag> slo </tag>
            
            <tag> error budget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务稳定性衡量指标</title>
      <link href="/posts/75/"/>
      <url>/posts/75/</url>
      
        <content type="html"><![CDATA[<h3 id="衡量指标"><a href="#衡量指标" class="headerlink" title="衡量指标"></a>衡量指标</h3><p><strong>可用性</strong>：成功请求数 / 总请求数</p><p><strong>P90响应时间</strong>：服务的请求响应时间90线</p><p><strong>P99响应时间</strong>：服务的请求响应时间99线</p><p>只有以上指标全部满足，本周期内的服务稳定性才算达成<br><a id="more"></a></p><h3 id="指标计算规则"><a href="#指标计算规则" class="headerlink" title="指标计算规则"></a>指标计算规则</h3><h4 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h4><p>对于一般基于 HTTP 协议的服务，采用 HTTP 响应码来作为衡量可用性的指标，响应码由 Istio 统一收集，计算公式如下：</p><p>可用性 = 非5xx响应码请求总数 / 总请求数</p><p>对于其他特殊服务，可能需要服务主动暴露相关指标，然后监控系统收集处理</p><h4 id="P90响应时间"><a href="#P90响应时间" class="headerlink" title="P90响应时间"></a>P90响应时间</h4><p>通过使用 Istio 提供的响应时间指标，统计计算 P90 响应时间，由于 Prometheus 的指标问题，得到的 P90 可能不是非常的精确，但是不影响指标计算</p><h4 id="P99响应时间"><a href="#P99响应时间" class="headerlink" title="P99响应时间"></a>P99响应时间</h4><p>与计算 P90 响应时间类似</p><h3 id="衡量周期"><a href="#衡量周期" class="headerlink" title="衡量周期"></a>衡量周期</h3><p>服务稳定性会定期评估，一般会每1周，每4周各进行评估一次</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><strong>服务响应码</strong></p><p>当服务异常时或者强依赖的服务异常时，在响应请求时，请注意设置正确的 5xx 响应码，而不要像正常的请求一样响应 2xx 响应码，这样会导致可用性计算不准确，监控系统无法及时发现问题，无法及时报警，只能等到用户投诉反馈才能发现问题</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>Google 服务稳定性常用指标标准</p><p><a href="https://sre.google/workbook/slo-document/" target="_blank" rel="noopener">slo-document</a></p><p><a href="https://sre.google/workbook/implementing-slos/" target="_blank" rel="noopener">implementing-slos</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sre </tag>
            
            <tag> sli </tag>
            
            <tag> slo </tag>
            
            <tag> error budget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务稳定性指标规范</title>
      <link href="/posts/74/"/>
      <url>/posts/74/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>服务稳定性就是我们常说的几个9如 99，99.9，99.99。用来衡量一个服务的稳定性。衡量服务可用性通常有如下两种方式：</p><p><strong>时间维度：Availability = Uptime / (Uptime + Downtime)</strong></p><p><strong>请求维度：Availability = Successful request / Total request</strong></p><p>SRE 通常选择以请求维度来衡量服务稳定性</p><p><strong>常用术语</strong></p><p>SLA（Service Level Agreement）服务等级协议，通常以几个 9 的形式出现，一般用于对客户的承诺</p><p>SLI（Service Level Indicator）服务等级对象，qps、响应时间、请求成功率</p><p>SLO（Service Level Objective）服务等级目标，对服务等级对象设定的目标，如 qps &gt; 100、响应时间 &lt; 100ms</p><p>SLI 可以理解为我们用于衡量服务稳定性的监控指标，SLO 则是针对 SLI 设定的目标，比如 SLI 可能是异常响应码占比，那对应的 SLO 可能是异常响应码占比小于 0.5%</p><a id="more"></a><h3 id="SLI-选择"><a href="#SLI-选择" class="headerlink" title="SLI 选择"></a>SLI 选择</h3><p>根据 Goole SRE 的实践，一般通过 VALET 方法（Volume、Availability、Latency、Error、Ticket）制定选择 SLI</p><p>Volume（容量）：服务承诺的最大容量，可以选择 qps、tps、每小时处理的任务数等</p><p>Availablity（可用性）：服务是否正常，比如 HTTP 协议服务，可以采用 5xx 响应码，任务执行的成功情况等</p><p>Latency（时延）：服务响应是否足够快，90线 &lt; 50ms、99线 &lt; 100ms 等</p><p>Errors（错误率）：服务错误率有多高，比如 HTTP 协议服务 5xx，4xx 响应码占比</p><p>Tickets（人工介入）：是否需要人工介入，比如数据任务跑失败了，但是无法自动恢复，这时就要人工介入恢复；或者超时了，也需要人工介入，来中断任务、重启拉起来跑等</p><p><strong>SLI 的选择应该尽量选择能靠近用户体验的指标，比如选择响应时间，就比选择 CPU 使用率，内存指标要好</strong></p><h3 id="SLO计算方式"><a href="#SLO计算方式" class="headerlink" title="SLO计算方式"></a>SLO计算方式</h3><p>比如定义了如下的 SLO：</p><p>SLO1：状态码成功率 &gt;= 99.95%</p><p>SLO2：响应时间 90 线 &lt;= 80ms</p><p>SLO3：响应时间 99 线 &lt;= 200ms</p><p>那么服务可用性指标就是表示为：</p><p><strong>Availability = SLO1 &amp; SLO2 &amp; SLO3</strong></p><p>只有当所有 SLO 指标同时达标时，才算可用性指标达到，有一个不达标就表示可用性不达标。</p><h3 id="SLO落地：错误预算"><a href="#SLO落地：错误预算" class="headerlink" title="SLO落地：错误预算"></a>SLO落地：错误预算</h3><p>把 SLO 指标转换为可计数量化的错误预算（Error Budget），通过这种转换可以让我们可以看到我们还有多少犯错机会，把数据可视化，让我们心中有数。</p><p>假设我们4周为一个衡量周期，4周内的总请求次数为 100000，那么计算如下：</p><p>SLO1：状态码成功率 &gt;= 99.95%          错误预算：100000x0.5%=500</p><p>SLO2：响应时间 90 线 &lt;= 80ms           错误预算：100000x10%=10000</p><p>SLO3：响应时间 99 线 &lt;= 200ms         错误预算：100000x1%=1000</p><p><strong>数据可视化</strong></p><p>通过计算得到的错误预算可以用于数据可视化，制作成图表，让所有人随时查看 SLO 的情况。</p><p><strong>故障定级</strong></p><p>根据此次故障消耗的错误预算比例，定级故障，比如当故障消耗错误预算 &lt;5% 就为 P4 故障，&gt;5% &lt;20% 定级为 P3 故障等</p><p><strong>稳定性共识</strong></p><ul><li><p>剩余预算充足或未消耗完之前，对问题的发生要有容忍度</p></li><li><p>剩余预算消耗过快或即将消耗完之前，我们有权中止和拒绝任何线上变更</p></li></ul><p><strong>基于错误预算的告警</strong></p><p>当错误预算消耗过快时，或者超过一定的比例时，及时报警，通知相关人处理</p><h3 id="服务稳定性衡量指标"><a href="#服务稳定性衡量指标" class="headerlink" title="服务稳定性衡量指标"></a>服务稳定性衡量指标</h3><p><strong>衡量指标：</strong></p><ul><li><p>可用性：成功请求数 / 总请求数</p></li><li><p>P90 响应时间：服务的请求响应时间 90 线</p></li><li><p>P99 响应时间：服务的请求响应时间 99 线</p></li></ul><p>只有以上指标全部满足，本周期内的服务稳定性才算达成</p><p><strong>指标计算规则：</strong></p><ul><li><p>可用性：对于一般基于 HTTP 协议的服务，采用 HTTP 响应码来作为衡量可用性的指标，计算公式如下：可用性 = 非 5xx 响应码请求总数 / 总请求数</p></li><li><p>P90 响应时间</p></li><li><p>P99 响应时间</p></li></ul><p><strong>衡量周期</strong></p><p>服务稳定性会定期评估，一般会每1周，每4周各进行评估一次</p><p><strong>注意事项</strong></p><p>当服务异常时或者强依赖的服务异常时，在响应请求时，请注意设置正确的 5xx 响应码，而不要像正常的请求一样响应 2xx 响应码，这样会导致可用性计算不准确，监控系统无法及时发现问题，无法及时报警，只能等到用户投诉反馈才能发现问题</p><h3 id="基于错误预算的报警"><a href="#基于错误预算的报警" class="headerlink" title="基于错误预算的报警"></a>基于错误预算的报警</h3><p><strong>错误预算（Error Budget）</strong></p><p>基于 SLO 来计算错误预算，比如可用性要求是 99.9%，预估一个周期的总请求数是100万，那错误预算就是 100万 X（1-0.999）= 1000，表示我们在一个统计周期内，最多只能有 1000 个请求可以失败</p><p><strong>燃烧率（Burn Rate）</strong></p><p>燃烧率表示错误预算的消耗速度，燃烧率为 1 时表示在一个统计周期内，刚好消耗完错误预算，如果 30 天的可用性要求是 99.9%，那么持续的 0.1% 的错误率，正好消耗掉所有错误预算，燃烧率为 1</p><p><strong>燃烧率与错误率关系表：</strong></p><p><img src="/posts/74/burn-rate.png" alt="burn-rate"></p><p><strong>错误预算消耗</strong></p><p>一定时间内，当错误预算消耗过快，我们可以选择报警，比如当 1 个小时消耗的错误预算超过 2% 时，6 个小时消耗的错误预算超过 5% 时。通过错误预算消耗的占比，我们可以计算出燃烧率。</p><p>假定 30 天内的错误预算为 X，燃烧率为 1 表示 30*24 小时正好消耗完 X，那么当 1h 消耗 2% 的 X 的燃烧率就可以如下公式计算：</p><p>燃烧率 = (2% <em> X / 1h) / (X / 30 </em> 24h) = 14.4</p><p>常用的错误预算消耗与燃烧率：</p><p><img src="/posts/74/burn-rate-1.png" alt=""></p><p><strong>基于错误预算消耗报警</strong></p><p>当错误预消耗过快，及时报警，并当问题解决时能及时解除报警。多时间周期综合报警规则：</p><p><img src="/posts/74/alert.png" alt=""></p><p>以上报警规则表示，当 1h 的错误预算消耗超过 2% 时，并且 5m 的错误率依然过高，错误预算消耗依然会持续达到 2%，就及时报警，当 6h 内的错误预算超过 5% 时，也会及时报警</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://sre.google/workbook/slo-document/" target="_blank" rel="noopener">slo-document</a></p><p><a href="https://sre.google/workbook/implementing-slos/" target="_blank" rel="noopener">implementing-slos</a></p><p><a href="https://landing.google.com/sre/workbook/chapters/alerting-on-slos/" target="_blank" rel="noopener">alerting-on-slos</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sre </tag>
            
            <tag> sli </tag>
            
            <tag> slo </tag>
            
            <tag> error budget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web API的设计与开发笔记</title>
      <link href="/posts/73/"/>
      <url>/posts/73/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是 Web API<ul><li>Web API 的重要性<ul><li>通过 API 才能使用的在线服务出现</li><li>移动应用与 API</li><li>API 的经济学</li></ul></li><li>各种各样的 API 模式<ul><li>将已发布的 Web 在线服务的数据或功能通过 API 公开</li><li>将附加在其他网页上的微件公开<ul><li>Amazon 提供的广告功能</li></ul></li><li>构建现代 Web 应用<ul><li>单页面应用 异步加载</li></ul></li><li>开发智能手机应用</li><li>开发社交游戏</li><li>公司内部多个系统的集成</li></ul></li><li>应该通过 API 公开什么<ul><li>公开所有能公开的</li><li>公开 API 是否会带来风险<ul><li>不会有风险 即使不公开也可以使用爬虫抓取数据</li></ul></li><li>公开 API 能得到什么<a id="more"></a></li></ul></li><li>设计优美的 Web API 的重要性<ul><li>设计优美的 Web API 易于使用</li><li>设计优美的 Web API 便于更改</li><li>设计优美的 Web API 健壮性好</li><li>设计优美的 Web API 不怕公之于众</li></ul></li><li>如何美化 Web API<ul><li>设计规范明确的内容必须遵守相关规范</li><li>没有设计规范的内容必须遵守相关事实标准</li></ul></li><li>REST 与 Web API</li><li>作为目标对象的开发人员数量与 API 的设计思想<ul><li>LSUD<ul><li>Large Set of Unknown Developers<ul><li>尽可能设计的普适与通用</li></ul></li></ul></li><li>SSKD<ul><li>Small Set of Known Developers<ul><li>易于上手</li></ul></li></ul></li></ul></li></ul></li><li>端点的设计与请求的形式<ul><li>设计通过 API 公开的功能<ul><li>SNS聊天功能为例<ul><li>用户注册与编辑</li><li>搜索，添加，删除好友</li><li>好友之间的消息交互</li></ul></li></ul></li><li>API 端点的设计思想<ul><li>端口的设计<ul><li>容易记忆，URI 包含的功能一目了然<ul><li>短小便于输入的 URI<ul><li><a href="http://api.example.com/service/api/search" target="_blank" rel="noopener">http://api.example.com/service/api/search</a></li><li><a href="http://api.example.com/search" target="_blank" rel="noopener">http://api.example.com/search</a></li></ul></li><li>人可以读懂的 URI<ul><li><a href="http://api.example.com/sv/u" target="_blank" rel="noopener">http://api.example.com/sv/u</a></li><li><a href="http://api.example.com/products/12345" target="_blank" rel="noopener">http://api.example.com/products/12345</a></li></ul></li><li>没有大小写的混用的 URI</li><li>修改方便的 URI</li><li>不会暴露服务端架构的 URI<ul><li><a href="http://api.example.com/cgi-bin/get_user.php?user=100" target="_blank" rel="noopener">http://api.example.com/cgi-bin/get_user.php?user=100</a></li></ul></li><li>规则统一的 URI</li></ul></li></ul></li></ul></li><li>HTTP 方法与端口<ul><li>GET<ul><li>获取资源</li></ul></li><li>POST<ul><li>新增资源</li></ul></li><li>PUT<ul><li>更新已有资源</li></ul></li><li>DELETE<ul><li>删除资源</li></ul></li><li>PATCH<ul><li>更新资源的部分属性</li></ul></li><li>HEAD<ul><li>获取资源的元信息</li></ul></li><li>在不支持其他有些 HTTP 方法时解决方法<ul><li>使用 _method参数</li><li>使用 X-Http-Method_Override 头部</li><li>请求时统一使用 POST 方法</li></ul></li></ul></li><li>API 端点的设计<ul><li>基本设计<ul><li>获取用户信息列表<ul><li>GET <a href="http://api.example.com/v1/users" target="_blank" rel="noopener">http://api.example.com/v1/users</a></li></ul></li><li>新用户注册<ul><li>POST <a href="http://api.example.com/v1/users" target="_blank" rel="noopener">http://api.example.com/v1/users</a></li></ul></li><li>更新用户信息<ul><li>PUT/PATCH <a href="http://api.example.com/v1/users/:id" target="_blank" rel="noopener">http://api.example.com/v1/users/:id</a></li></ul></li><li>删除用户信息<ul><li>DELETE <a href="http://api.example.com/v1/users/:id" target="_blank" rel="noopener">http://api.example.com/v1/users/:id</a></li></ul></li></ul></li><li>好友关系<ul><li>获取当前用户的好友列表<ul><li>GET <a href="http://api.example.com/v1/users/:id/friends" target="_blank" rel="noopener">http://api.example.com/v1/users/:id/friends</a></li></ul></li><li>添加好友<ul><li>POST <a href="http://api.example.com/v1/users/:id/friends" target="_blank" rel="noopener">http://api.example.com/v1/users/:id/friends</a></li></ul></li><li>删除好友<ul><li>DELETE <a href="http://api.example.com/v1/users/:id/friends/:id" target="_blank" rel="noopener">http://api.example.com/v1/users/:id/friends/:id</a></li></ul></li></ul></li><li>动态相关的端点<ul><li>编辑动态信息<ul><li>PUT <a href="http://api.example.com/v1/updates/:id" target="_blank" rel="noopener">http://api.example.com/v1/updates/:id</a></li></ul></li><li>删除动态信息<ul><li>DELETE <a href="http://api.example.com/v1/updates/:id" target="_blank" rel="noopener">http://api.example.com/v1/updates/:id</a></li></ul></li><li>发表动态信息<ul><li>POST <a href="http://api.example.com/v1/updates" target="_blank" rel="noopener">http://api.example.com/v1/updates</a></li></ul></li><li>获取特定用户的动态信息<ul><li>GET <a href="http://api.example.com/v1/users/:id/updates" target="_blank" rel="noopener">http://api.example.com/v1/users/:id/updates</a></li></ul></li><li>获取好友的动态列表<ul><li>GET <a href="http://api.example.com/v1/users/:id/friends/updates" target="_blank" rel="noopener">http://api.example.com/v1/users/:id/friends/updates</a></li></ul></li></ul></li><li>访问资源的端点设计的注意事项<ul><li>使用名词复数形式</li><li>注意所用的单词</li><li>不使用空格及需要编码的字符</li><li>使用连接符’_’或者’-‘来连接多个单词</li></ul></li></ul></li><li>搜索与查询参数的设计<ul><li>获取数据量与获取位置的查询参数<ul><li>limit 与 offset</li><li>per_page 与 page</li><li>since_id</li></ul></li><li>参数过滤<ul><li><a href="http://api.example.com/v1/users?name=ken" target="_blank" rel="noopener">http://api.example.com/v1/users?name=ken</a></li><li><a href="http://api.example.com/v1/users?q=ken" target="_blank" rel="noopener">http://api.example.com/v1/users?q=ken</a></li></ul></li></ul></li><li>登录与 OAuth 2.0<ul><li>Authorization Code<ul><li>适用于在服务器端进行大量处理的 Web 应用</li></ul></li><li>Implicit<ul><li>适用于智能手机应用与使用 JavaScript 客户端进行大量处理的应用</li></ul></li><li>Resource Owner Password Credentials<ul><li>适用于不使用服务器端的应用， 直接使用用户名与密码<ul><li>grant_type: password</li><li>username</li><li>password</li><li>scope<ul><li>指定允许访问的权限范围</li></ul></li></ul></li></ul></li><li>Client Credentials</li><li>端点设计<ul><li>/oauth2/token</li></ul></li><li>刷新 token<ul><li>获取token的时候返回一个用于刷新token的refresh_token</li></ul></li></ul></li><li>主机名和端点共有部分<ul><li><a href="http://api.example.com/" target="_blank" rel="noopener">api.example.com</a> 最为合适</li></ul></li><li>SSKDs 与 API 设计<ul><li>尽量使用少的 API</li><li>一个屏幕的内容只使用一次 API 调用</li></ul></li><li>HATEOAS 和 REST LEVEL3 API<ul><li>返回的数据中加入超链接</li></ul></li></ul></li><li>响应数据的设计<ul><li>数据格式<ul><li>LSUD<ul><li>JSON</li><li>XML</li></ul></li><li>SSKD<ul><li>高效序列化方式<ul><li>thrift</li><li>protobuf</li><li>messagepack</li></ul></li></ul></li><li>数据格式指定方法<ul><li>URI添加查询参数<ul><li>format=json</li></ul></li><li>在请求头指定媒体类型<ul><li>Accept: application/json</li></ul></li></ul></li></ul></li><li>使用JSONP<ul><li>不一定非要实现JSONP，可能会有安全问题</li><li>支持JSONP的操作方法<ul><li>查询参数 callback</li></ul></li><li>JSONP与错误处理<ul><li>发生了错误依然需要返回200状态码</li><li>在响应的数据中添加真正的响应码</li></ul></li></ul></li><li>数据内部结构的思考方法<ul><li>让用户来选择响应的内容<ul><li>查询参数 fields=name,age</li><li>指定响应群<ul><li>small</li><li>medium</li><li>large</li></ul></li></ul></li><li>封装是否必要<ul><li>一般情况都是否</li></ul></li><li>数据是否应该扁平化<ul><li>层级</li><li>扁平化</li><li>只有遇到层级结构有绝对优势时才使用层级</li></ul></li><li>序列与格式<ul><li>推荐使用对象来封装数据（如果返回是列表，再在外面加一层对像封装）<ul><li>更容易理解响应数据表示什么</li><li>响应数据通过对像的封装实现了结构统一</li><li>可以避免安全方面的风险</li></ul></li></ul></li><li>该如何返回序列的个数以及是否还有后续数据<ul><li>服务端要返回20条数据时，可以试着获取21条数据，如果能获取成功，说明至少存在1条后续数据</li><li>在返回给客户端的对像中添加还有后续的字段标识<ul><li>hasNext: true</li></ul></li></ul></li></ul></li><li>各个数据的格式<ul><li>各个数据的名称<ul><li>推荐使用蛇形法</li></ul></li><li>如何描述性别数据<ul><li>gender（推荐）<ul><li>male</li><li>female</li></ul></li><li>sex</li></ul></li><li>日期格式<ul><li>一般采用RFC 3339<ul><li>2015-10-12T11:30:22+09:00</li></ul></li></ul></li><li>大整数与JSON<ul><li>同时传输id和id_str</li></ul></li></ul></li><li>响应数据的设计<ul><li>API没有必要如实反映DB的数据表结构</li></ul></li><li>出错信息的表示<ul><li>通过状态码来表示出错信息<ul><li>1字头 消息</li><li>2字头 成功</li><li>3字头 重定向</li><li>4字头 客户端原因引起的错误</li><li>5字头 服务端原因引起的错误</li><li>当找不到合适的状态码的时候，使用’200’，’400’，’500’这些以’00’结尾的状态码</li></ul></li><li>向客户端返回详细的出错信息<ul><li>把详细的出错信息填入响应消息首部<ul><li>code 内部定义的错误码</li><li>message 出错信息</li><li>info 帮助文档的URL</li></ul></li><li>把详细的出错信息放入消息体（推荐）</li></ul></li><li>如何填写详细的出错信息<ul><li>可以同时提供面向开发人员和非开发人员的信息提示<ul><li>developerMessage</li><li>userMessage</li><li>code</li><li>info</li></ul></li></ul></li><li>发生错误时防止返回HTML<ul><li>某些API在发生错误时会把HTML信息写入消息体，尤其是发生500，503以及404等错误时</li></ul></li><li>维护与状态码<ul><li>当维护时应该返回503状态码</li><li>如果能够预测服务何时能够重启可以添加 Retry-After 头</li></ul></li><li>需要返回意义不明确的信息<ul><li>有时出于安全考虑或其它原因需要返回模棱两可的信息</li><li>比如当用户被屏蔽时，如果访问可以返回404，如果返回403对方可能就知道是被屏蔽了</li><li>用户登录时，如果明确指出哪一个字段错误，可能会给恶意用户破解的机会</li></ul></li></ul></li></ul></li><li>最大程度地利用 HTTP 协议规范<ul><li>使用HTTP协议规范的意义<ul><li>对大家都好</li></ul></li><li>正确使用状态码<ul><li>1字头 消息</li><li>2字头 成功<ul><li>200 OK 请求成功</li><li>201 Created 请求成功，新的资源已创建</li><li>202 Accepted 请求成功，请求的操作已接受</li><li>204 No Content 没有内容</li></ul></li><li>3字头 重定向<ul><li>300 Multiple Choices 存在多个资源</li><li>301 Moved Permanently 资源被永久转移</li><li>302 Found 请求的资源被暂时转移</li><li>303 See Other 引用他处</li><li>304 Not Modified 自上一次访问后没有发生更新</li><li>307 Temporary Redirect 请求的资源被暂时转移</li></ul></li><li>4字头 客户端原因引起的错误<ul><li>400 Bad Request 请求不正确，一般是数据格式不正确</li><li>401 Unauthorized 需要认证</li><li>403 Forbidden 禁止访问，一般是没有权限</li><li>404 Not Found 没有找到指定的资源</li><li>405 Method Not Allowed 没有找到指定的方法</li><li>406 Not Acceptable 同Accept相关联的首部里含有无法处理的内容</li><li>408 Request Timeout 请求在规定时间内没有处理结束</li><li>409 Conflict 资源存在冲突</li><li>410 Gone 指定的资源已不存在</li><li>413 Request Entity Too Large 请求消息体太大</li><li>414 Request-URI Too Long 请求的URI太长</li><li>415 Unsupported Media Type 不支持所指定的媒体类型</li><li>429 Too Many Requests 请求次数过多，一般用于API请求速度控制</li></ul></li><li>5字头 服务端原因引起的错误<ul><li>500 Internal Server Error 服务器端发生错误</li><li>503 Service Unavailable 服务器暂时停止运行</li></ul></li></ul></li><li>缓存与HTTP协议规范<ul><li>过期模型<ul><li>Cache-Control<ul><li>更多控制方法</li></ul></li><li>Expires<ul><li>使用绝对时间来表示到期</li></ul></li></ul></li><li>验证模型<ul><li>Last-Modified</li><li>Etag</li></ul></li><li>启发式过期<ul><li>当服务器端没有给出过期时间时，客户端可以决定大约缓存数据多久</li></ul></li><li>不希望实施缓存的情况<ul><li>Cache-Control: no-cache</li></ul></li><li>使用Vary来指定缓存单位<ul><li>在实施缓存时可能需要同时指定Vary首部</li><li>Vary用于指定除URI外使用哪个请求首部来确定唯一的数据</li><li>Vary: Accept-Encoding,User-Agent,Accept-Language</li></ul></li><li>Cache-Control首部<ul><li>public 代理服务器处保存的缓存可以在不同用户之间共享</li><li>private 每个用户的缓存数据必须各不相同</li><li>no-cache 缓存数据需要通过验证模式来确认</li><li>no-store 不需要进行缓存</li><li>no-transform 代理服务器不可变更响应数据的媒体类型或其他相关内容</li><li>must-revalidate 不管何时都需要向原始服务器再次验证</li><li>proxy-revalidate 代理服务器需要向原始服务器再次验证</li><li>max-age 表示缓存数据处于新鲜状态的时间</li><li>s-maxage 和max-age一样，但只用于中继服务器</li><li>stable-while-revalidate 指定的max-age过期后，缓存会异步刷新，但此时缓存依然可以使用</li></ul></li></ul></li><li>媒体类型的指定<ul><li>Content-Type</li><li>以x-开头的媒体类型</li><li>自己定义媒体类型</li><li>请求数据与媒体类型<ul><li>Content-Type</li><li>Accept</li></ul></li></ul></li><li>同源策略和跨域资源共享<ul><li>CORS基本的交互<ul><li>Origin</li><li>Access-Control-Allow-Origin</li></ul></li><li>事先请求<ul><li>OPTIONS</li></ul></li><li>CORS与用户认证<ul><li>Access-Control-Allow-Credentials: true</li></ul></li></ul></li><li>定义私有的HTTP首部<ul><li>一般以x-作为前缀</li></ul></li></ul></li><li>开发方便更改设计的 Web API<ul><li>方便更改设计的重要性<ul><li>公开发布的API（LSUD）</li><li>面向移动应用的API（SSKD）</li><li>Web服务中使用的API</li></ul></li><li>通过版本信息来管理API<ul><li>在URI中嵌入版本号</li><li>如何添加版本号</li><li>在查询字符串里加入版本信息</li><li>通过媒体类型来指定版本信息<ul><li>Accept: applicaton/vnd.example.v2+json</li></ul></li><li>应该采用什么方法<ul><li>推荐在URI中嵌入版本信息</li></ul></li></ul></li><li>版本变更的方针</li><li>终止提供API</li><li>编排层<ul><li>整合API</li></ul></li></ul></li><li>开发牢固的 Web API<ul><li>让Web API变得安全</li><li>非法获取服务器端和客户端之间的信息<ul><li>使用HTTPS加密通信</li></ul></li><li>使用浏览器访问API时的问题<ul><li>XSS</li><li>XSRF<ul><li>在表单里嵌入一次性令牌</li></ul></li><li>JSON劫持</li></ul></li><li>思考防范恶意访问的对策<ul><li>篡改参数 获取没有权限的资源</li><li>请求再次发送</li></ul></li><li>同安全相关的HTTP首部<ul><li>X-Content-Type-Options: nosniff</li><li>X-XSS-Protection</li><li>X-Frame-Options</li><li>Content-Security-Policy</li><li>Strict-Transport-Security</li><li>Public-Key-Pins</li><li>Set-Cookie: HttpOnly</li></ul></li><li>应用大规模访问的对策<ul><li>限制每个用户的访问</li><li>限制单位</li><li>应对超出上限值的情况<ul><li>429 Too Many Requests</li></ul></li><li>向用户告知访问限制的信息<ul><li>X-RateLimit-Limit 单位时间访问上限</li><li>X-RateLimit-Remaining 剩余的访问次数</li><li>X-RateLimit-Reset 访问次数重置的时间</li></ul></li></ul></li></ul></li><li>附录 A 开发 Web API 的准备工作<ul><li>提供API文档</li><li>提供沙盒API<ul><li>涉及金钱交易</li></ul></li><li>API Console<ul><li>能够在浏览器上尝试实际操作API的工具</li></ul></li><li>提供SDK</li></ul></li><li>附录 B Web API 确认清单<ul><li>URI是否短小且容易输入</li><li>URI是否能让人一眼看懂</li><li>URI是否只有小写字母组成</li><li>URI是否容易修改</li><li>URI是否反映了服务端架构</li><li>URI规则是否统一</li><li>有没有使用合适的HTTP方法</li><li>URI里用到的单词所表示的意思是否和大部分API相同</li><li>URI里用到的名词是否采用了复数形式</li><li>URI里有没有空格及需要编码的字符</li><li>URI里的单词和单词之间有没有使用连接符</li><li>分页的设计是否恰当</li><li>登录有没有使用OAuth 2.0</li><li>响应数据格式有没有使用JSON作为默认的格式</li><li>是否支持通过查询参数来指定数据格式</li><li>是否支持不必要的JSONP</li><li>响应数据的内容能不能从客户端指定</li><li>响应数据中是否存在不必要的封装</li><li>响应数据的结构有没有尽量做到扁平化</li><li>响应数据有没有用对像来描述，而不是用数组</li><li>响应数据的名称所选用的单词的意思是不是和大部分API相同</li><li>响应数据的名称有没有用尽可能少的单词来描述</li><li>响应数据的名称由多个单词连接而成时，连接方式在整个API里是否一致</li><li>响应数据的名称有没有使用奇怪的缩写形式</li><li>响应数据的名称的单复数形式是否和数据内容相一致</li><li>出错时响应数据中是不是包含有助于客户端剖析原因的信息</li><li>出错时有没有返回HTML数据</li><li>有没有返回合适的状态码</li><li>服务器端在维护时有没有返回503状态码</li><li>有没有返回合适的媒体类型</li><li>必要时能不能支持CORS</li><li>有没有返回Cache-Control,Etag, Last-Modified,Vary等首部以便客户端采用合适的缓存策略</li><li>不想缓存的数据有没有添加Cache-Control: no-cache首部信息</li><li>有没有对API进行版本管理</li><li>API版本的命名有没有遵循语义化的版本控制规范</li><li>有没有在URI里嵌入主版本编号，并且能够让人一目了然</li><li>有没有考虑API终止提供时的相关事项</li><li>有没有在文档里明确注明API的最低提供期限</li><li>有没有使用HTTPS来提供API</li><li>有没有认真执行JSON转义</li><li>能不能识别X-Requested-With首部，让浏览器无法通过SCRIPT元素读取JSON数据</li><li>通过浏览器访问的API有没有使用XSRF token</li><li>API在接受参数时有没有仔细检查非法的参数（负数等）</li><li>有没有做到即使请求重复发送，数据也不会多次更新</li><li>有没有在响应消息里添加各种增强安全性的首部</li><li>有没有实施访问限速</li><li>对预想的用例来说限速的次数有没有设置得过少</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> develop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective Go笔记</title>
      <link href="/posts/72/"/>
      <url>/posts/72/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>格式</strong><ul><li>使用gofmt格式化</li><li>go没有行长的限制，如果觉得长可以折成几行，并使用一个tab缩进</li></ul></li><li><strong>注释</strong><ul><li>提供两种风格<ul><li>/<em> comment </em>/</li><li>// comment</li></ul></li><li>每个包都应该有一个注释，位于package子句之前</li><li>程序中每一个被导出的（大写的）的变量，函数都应该有一个注释，并且以函数或者变量开头</li></ul></li><li><strong>命名</strong><ul><li>程序包名<ul><li>程序包名应该使用小写的一个单词，要为求简短 bytes, encoding/base64</li><li>清晰，简明的名字 bufio.Reader,io.Reader</li><li>ring.Ring 创建一个新实例的函数，go中定义构造器会被叫做 NewRing，但由于Ring是程序包的唯一类型，可以只叫做 ring.New</li></ul></li><li>Get方法<ul><li>Get方法的名字中添加Get是不符合语言习惯的，并且没有必要。GetOwner–&gt;Owner</li><li>Set方法 SetOwner</li></ul></li><li>接口<ul><li>如果接口只有单个方法，方法上应该加上’er’后缀</li><li>String方法而不是ToString<a id="more"></a></li></ul></li></ul></li><li><strong>分号</strong><ul><li>几乎用不到显示的分号</li></ul></li><li><strong>控制结构</strong><ul><li>if<ul><li><img src="https://api2.mubu.com/v3/document_image/f1dc24c0-d4f9-45a6-a75d-7521567ce2f6.jpg" alt=""></li><li><img src="https://api2.mubu.com/v3/document_image/3f192095-9af5-476e-9d28-1c0f1e5b022c.jpg" alt=""></li></ul></li><li>rune 是Go的术语，用于指定一个单独的Unicode编码点，有中文的时候使用，可以取到整个汉字</li><li>重新声明和重新赋值<ul><li>声明中至少有其它一个变量将被声明为一个新的变量</li><li>这种不寻常的属性纯粹是从实用主义方面来考虑的。例如，这会使得在一个长的if-else 链中，很容易地使用单个err 值。</li></ul></li><li>for<ul><li><img src="https://api2.mubu.com/v3/document_image/1b0b8ab2-6e4f-4238-b797-82f08f3e140e.jpg" alt=""></li></ul></li><li>Switch<ul><li>case可以使用逗号分隔的列表<ul><li><img src="https://api2.mubu.com/v3/document_image/492f111e-9f83-4509-b2a5-4416d73c5822.jpg" alt=""></li></ul></li></ul></li></ul></li><li><strong>函数</strong><ul><li>多个返回值</li><li>命名的返回值参数</li><li>Go的defer 语句用来调度一个函数调用（被延期的函数），使其在执行defer 的函数即将返回之前才被运行</li></ul></li><li><strong>数据</strong><ul><li>使用new 进行分配<ul><li>new 是一个用来分配内存的内建函数</li></ul></li><li>使用make 进行分配<ul><li>它只用来创建slice，map和channel，并且返回一个初始化的(而不是置零)，类型为T 的值（而不是*T ）</li></ul></li><li>记住make 只用于map，slice和channel，并且不返回指针。要获得一个显式的指针，使用new 进行分配，或者显式地使用一个变量的地址。</li><li>数组<ul><li>数组的大小是其类型的一部分。类型[10]int 和[20]int 是不同的。</li><li>数组是值。将一个数组赋值给另一个，会拷贝所有的元素。</li></ul></li><li>切片<ul><li>切片（slice）对数组进行封装，提供了一个针对串行数据，更加通用，强大和方便的接口。</li></ul></li><li>二维切片<ul><li>Go的数组和切片都是一维的。要创建等价的二维数组或者切片，需要定义一个数组的数组或者切片的切片，类似这样：<img src="https://api2.mubu.com/v3/document_image/e51912c6-11d0-4182-9b1c-fe9783c65db0.jpg" alt=""></li><li>因为切片是可变长度的，所以可以将每个内部的切片具有不同的长度。<img src="https://api2.mubu.com/v3/document_image/f0559e66-be6b-4fac-aba5-d82c725e19f1.jpg" alt=""></li></ul></li></ul></li><li><strong>初始化</strong><ul><li>常量<ul><li>在Go中，枚举常量使用iota 枚举器来创建。由于iota 可以为表达式的一部分，并且表达式可以被隐式的重复，所以很容易创建复杂的值集。<img src="https://api2.mubu.com/v3/document_image/bd32f7d2-745e-4573-9367-b77aef792bfe.jpg" alt=""></li></ul></li><li>init函数<ul><li>每个源文件可以定义自己的不带参数的 init 函数，来设置它所需的状态。（实际上每个文件可以有多个init 函数） init 是在程序包中所有变量声明都被初始化，以及所有被导入的程序包中的变量初始化之后才被调用。除了用于无法通过声明来表示的初始化以外， init 函数的一个常用法是在真正执行之前进行验证或者修复程序状态的正确性。<img src="https://api2.mubu.com/v3/document_image/bfff525a-cd51-4b4a-a867-ef77ac69a056.jpg" alt=""></li></ul></li></ul></li><li><strong>方法</strong><ul><li>指针 vs. 值<img src="https://api2.mubu.com/v3/document_image/21ea67f7-4385-42a4-93e8-769121a1662e.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/1166773e-b2c1-41e1-8618-3e50332c5608.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/8b4cbe39-7044-4d93-98f8-c371f18a059c.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/79f23c6a-9a3c-4bbc-b412-e19f114b02a7.jpg" alt=""></li></ul></li><li><strong>接口和其它类型</strong><ul><li>转换<img src="https://api2.mubu.com/v3/document_image/8a7ef090-a002-4ecf-81ac-2706402ffa23.jpg" alt=""></li></ul></li><li><strong>空白标识符</strong><ul><li>空白标识符在多赋值语句中的使用<img src="https://api2.mubu.com/v3/document_image/96a6d86c-fab4-4af0-92c4-ac872a39c983.jpg" alt=""></li><li>副作用式导入<img src="https://api2.mubu.com/v3/document_image/56bb19bb-ed68-40f3-a1d1-8bc334d20c3d.jpg" alt=""></li><li>未使用的导入和变量<img src="https://api2.mubu.com/v3/document_image/2f8e745a-de85-48f6-be56-d461e931de8e.jpg" alt=""></li><li>接口检查（只检查，不需要转换）<img src="https://api2.mubu.com/v3/document_image/3489d0a7-b894-446e-a581-cb80e9fcad28.jpg" alt=""></li></ul></li><li><strong>内嵌（Embedding）</strong><ul><li>Go没有提供经典的类型驱动式的派生类概念，但却可以通过内嵌其他类型或接口代码的方式来实现类似的功能。</li><li>“内嵌”还可以用一种更简单的方式表达<img src="https://api2.mubu.com/v3/document_image/c4e1e57b-f108-468b-b729-437358d20793.jpg" alt=""></li></ul></li><li><strong>并发</strong><ul><li>以通信实现共享<ul><li>勿以共享方式通信，以通信实现共享。</li></ul></li><li>Goroutines<ul><li>之所以称之为Goroutine，主要是由于现有的一些概念—“线程”、“协程” 以及 “进程” 等—都不足以准确描述其内涵。每个Goroutine都对应一个非常简单的模型：它是一个并发的函数执行线索，并且在多个并发的Goroutine间，资 源是共享的。Goroutine非常轻量，创建的开销不会比栈空间分配的开销大多少。并且其初始栈空间很小 —— 这也就是它轻量的原因 —— 在后续执行中，会根据需要在堆空间分配（或释放）额外的栈空间。</li><li>Goroutine与操作系统线程间采用“多到多”的映射方式，因此假设一个Goroutine因某种原因阻塞其他Goroutine可以继续执行</li></ul></li><li>Channels<ul><li>无缓冲channel</li><li>缓冲channel</li><li>Channel类型的Channel</li></ul></li></ul></li><li><strong>错误</strong><ul><li>严重故障（Panic）<img src="https://api2.mubu.com/v3/document_image/51fdb064-22f9-4594-9ae1-eb6d4c7ce79e.jpg" alt=""></li><li>恢复（Recover）<img src="https://api2.mubu.com/v3/document_image/84c97d9d-521f-452b-bab1-00bdd4ae6e9d.jpg" alt=""></li></ul></li><li><strong>一个web服务示例</strong><img src="https://api2.mubu.com/v3/document_image/da7078fe-24b3-4441-a12c-514aa1166a8b.jpg" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> develop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码整洁之道笔记</title>
      <link href="/posts/71/"/>
      <url>/posts/71/</url>
      
        <content type="html"><![CDATA[<ul><li>整洁代码<ul><li>代码整洁重要性</li><li>让营地比你来时更干净</li></ul></li><li>有意义的命名<ul><li>名副其实<ul><li>命名宁愿长也要能准确表达意义，不要贪图使用简短命名</li></ul></li><li>避免误导<ul><li>不要把已经存在公认的单词表示为其他意义</li><li>不要使用accountList命名，除非它真是一个List</li><li>尽量不要单独使用零和壹（0,O,1,l）</li></ul></li><li>做有意义的区分<ul><li>如money与moneyAmount没有区别，customer与customerInfo没有区别<a id="more"></a></li></ul></li><li>使用读得出来的名称</li><li>使用可搜索的名称<ul><li>MAX_CLASSES_PER_STUDENT比7更好搜索</li></ul></li><li>避免使用编码<ul><li>不要在变量名上加入类型名</li><li>不要使用变量前缀（m_），定义为类的成员变量</li><li>不要给接口前面加上I前缀</li></ul></li><li>避免思维映射<ul><li>明确是王道</li></ul></li><li>类名<ul><li>避免使用manager,info,data,processor这样的类名，类名应该是名词，不应该是动词</li></ul></li><li>方法名<ul><li>方法名应该是动词或者动词短语，修改获取断言应该加上get,set,is,has前缀</li></ul></li><li>别扮可爱<ul><li>不要使用俚语，特殊语</li></ul></li><li>每个概念对应一个词<ul><li>例如get,retrieve,fetch只使用一种</li><li>例如不要混合使用manager,controller,driver</li></ul></li><li>别用双关语<ul><li>比如add方法是两个值相加获取新值，如果有个方法把单个参数放到群集（collection），这个命名就不适合，应该叫insert或者append</li></ul></li><li>使用解决方案领域名称</li><li>使用源自所涉问题领域的名称</li><li>添加有意义的语境<ul><li>例如当单独使用firstName,lastName,street,houseNumber,city,state,zipcode表示地址信息时，不如使用addrFirstName,addrLastName，更好的方案是创建一个Address类</li></ul></li><li>不要添加没用的语境<ul><li>只要短名称足够清楚，就要比长名称好，别给名称添加不必要的语境</li></ul></li></ul></li><li>函数<ul><li>短小<ul><li>20行封顶最佳</li><li>if,else,while语句等，其中的代码块应该只有一句，大抵应该是一个函数调用</li></ul></li><li>只做一件事<ul><li>如果函数只是做了该函数名下同一抽象层上的步骤，那函数就是只做了一件事</li></ul></li><li>每个函数一个抽象层级<ul><li>函数中的每一个语句都应该处于同一个抽象层级</li></ul></li><li>switch语句<ul><li>无可避免函数要做多件事，尽量放在较低的抽象层，比如工厂设计模式</li></ul></li><li>使用描述性的名称<ul><li>函数名宁可长也要描述清楚</li><li>如果很难给函数命名，那可能是因为函数做了不止一件事</li></ul></li><li>函数参数<ul><li>尽量少的参数</li><li>参数尽量不要有bool类型的标识值（基于该值做不同分支的操作）</li><li>参数如果过多可以使用类传递</li><li>一元函数的名称和参数应当形成一种非常良好的动词-名词对形式（writeField(name)）</li></ul></li><li>无副作用<ul><li>不要做函数名称描述之外的其他事情</li></ul></li><li>分离指令与询问<ul><li>函数要么做什么事情，要么回答什么事情，二者不可兼得</li></ul></li><li>使用异常代码错误码<ul><li>抽离try/catch代码块，把它们单独放在一个函数中</li><li>错误处理就是一件事情</li></ul></li><li>别重复自己</li><li>结构化编程<ul><li>只要保持函数短小，偶尔出现的return,break,continue语句没有坏处</li><li>每个函数尽量减少return,break,continue语句</li></ul></li><li>如何写出这样的函数<ul><li>先写，然后慢慢改进</li></ul></li></ul></li><li>注释<ul><li>注释是在弥补我们用代码表达意图时的失败</li><li>注释不能美化糟糕代码</li><li>用代码来注释</li><li>好注释<ul><li>法律信息</li><li>提供信息的注释</li><li>对意图的解释</li><li>阐释</li><li>警示</li><li>TODO注释</li><li>放大强调看起来不合理之物的重要性</li></ul></li><li>坏注释<ul><li>喃喃自语</li><li>多余的注释</li><li>误导性的注释</li><li>循规式死板的注释</li><li>变更日志式注释<ul><li>这部分信息应该被存储在源码管理系统里</li></ul></li><li>废话注释</li><li>可怕的废话</li><li>能用变量和函数就别用注释</li><li>括号后面的注释<ul><li>用来标记代码结构</li></ul></li><li>位置标记</li><li>归属与签名<ul><li>这部分信息应该被存储在源码管理系统里</li></ul></li><li>注释掉的代码</li><li>HTML注释</li></ul></li></ul></li><li>格式<ul><li>格式的目的<ul><li>更好的可读性</li></ul></li><li>垂直格式<ul><li>单个文件最好是200-500行左右</li><li>注意留空格行</li><li>被调用的函数应该放在调用函数的下面</li></ul></li><li>横向格式<ul><li>最宽不要超过120个字符</li><li>水平对齐</li><li>缩进</li></ul></li><li>团队规则<ul><li>整个团队形成统一 规则</li></ul></li></ul></li><li>对象和数据结构<ul><li>数据抽象<ul><li>类里只有数据没有方法</li></ul></li><li>数据、对象的反对称性<ul><li>过程式（使用数据结构）代码，便于在不改变现在数据结构的情况下添加新函数</li><li>面向对象编程便于在不改动现有函数的情况下添加新类</li></ul></li><li>得墨忒耳律<ul><li>模块不应了解它所操作对象的内部情形</li><li>对象隐藏数据，暴露方法</li></ul></li><li>数据传送对象（DTO）<ul><li>只有变量没有函数的类</li></ul></li></ul></li><li>错误处理<ul><li>使用异常而非返回码</li><li>先写try-catch-finally语句</li><li>尽量不要使用不可控异常（JAVA）</li><li>给出异常发生的环境说明</li><li>不要返回null值</li><li>不要传递null值</li></ul></li><li>边界<ul><li>使用第三方代码<ul><li>尽量封装一层</li></ul></li><li>使用尚不存在的代码<ul><li>提前定义好接口</li></ul></li><li>使用第三方API<ul><li>尽量封装一层</li></ul></li></ul></li><li>单元测试<ul><li>TDD三定律<ul><li>在编写不能通过的单元测试前，不可编写生产代码</li><li>只可编写刚好无法通过的单元测试，不能编译也算不通过</li><li>只可编写刚好足以通过当前失败测试的生产代码</li></ul></li><li>保持测试代码整洁</li><li>尽量少的断言在一个单元测试中</li><li>不要和正常代码使用双重整洁标准</li><li>FIRST原则<ul><li>Fast 测试应该够快</li><li>Independent 测试应该相互独立</li><li>Repeatable 测试应该可在任何环境重复通过</li><li>Self-Validating 测试应该有布尔值输出，无论是通过或者失败，你不应该查看日志文件来确认测试是否通过</li><li>Timely 测试应该及时编写，单元测试在生产代码之前编写，如果在编写生产代码之后编写测试，你会发现生产代码难以测试</li></ul></li></ul></li><li>类<ul><li>类应该短小<ul><li>单一职责</li><li>高内聚</li><li>将较大的函数切割为小函数，就会出现更多的类，把小函数的参数变为类的实体变量</li></ul></li><li>为了修改而组织<ul><li>修改添加特性时，尽量少的修改原来的代码</li></ul></li></ul></li><li>系统<ul><li>将系统的构造与使用分开<ul><li>工厂</li><li>依赖注入</li></ul></li><li>方便扩容</li></ul></li><li>迭进<ul><li>通过迭进设计达到整洁目的</li><li>运行所有测试</li><li>重构</li><li>不可重复</li><li>尽量少的类和方法</li></ul></li><li>并发编程<ul><li>保持同步区的微小</li><li>警惕同步方法之间的依赖</li></ul></li><li>逐步改进</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> develop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Testing Vue.js Applications笔记</title>
      <link href="/posts/70/"/>
      <url>/posts/70/</url>
      
        <content type="html"><![CDATA[<ul><li>测试类型<img src="https://api2.mubu.com/v3/document_image/9b9c938a-975e-47be-b698-473dbbbc6983-156946.jpg" alt=""><ul><li>unit tests</li><li>end-to-end tests</li><li>snapshot tests<a id="more"></a></li></ul></li><li>writing a sanity test<img src="https://api2.mubu.com/v3/document_image/c683f39f-a28e-4eae-991e-99de0a892e91-156946.jpg" alt=""></li><li>vue test utils<ul><li>mount<img src="https://api2.mubu.com/v3/document_image/c87ced56-390c-4f25-bf34-9087fe403836-156946.jpg" alt=""></li><li>shallow mount<img src="https://api2.mubu.com/v3/document_image/4c093f23-62f2-43e2-8bd0-4dc1cb66c51f-156946.jpg" alt=""></li><li>localVue<img src="https://api2.mubu.com/v3/document_image/0bce46b4-7bc9-4edb-be27-1e0a1bd30cce-156946.jpg" alt=""></li><li>find<img src="https://api2.mubu.com/v3/document_image/bc22a236-a52c-4358-8ed9-a9042a5d4b14-156946.jpg" alt=""></li><li>attributes<img src="https://api2.mubu.com/v3/document_image/b486ea65-dc8d-4ef3-8d24-69dfde9efd9b-156946.jpg" alt=""></li><li>findAll<img src="https://api2.mubu.com/v3/document_image/ac9dd0b2-09f1-4a13-b7ee-8399d928c21d-156946.jpg" alt=""></li><li>props<img src="https://api2.mubu.com/v3/document_image/6f009a0a-cef5-4594-a192-92f22c985dda-156946.jpg" alt=""></li><li>classes<img src="https://api2.mubu.com/v3/document_image/f7be3915-7f7c-4cb1-abf7-e9e775999610-156946.jpg" alt=""></li><li>style<img src="https://api2.mubu.com/v3/document_image/85355396-a684-41c8-8610-82f77476454e-156946.jpg" alt=""></li><li>什么时候测试渲染出来的组件输出<ul><li>只测试动态生成的输出</li><li>只测试组件的合同部分</li></ul></li></ul></li><li>测试组件方法<ul><li>测试组件方法<img src="https://api2.mubu.com/v3/document_image/e61c7362-b2c5-49ac-8efe-286d04ba3432-156946.jpg" alt=""></li><li>测试 timer 方法<ul><li>使用 fake timer<img src="https://api2.mubu.com/v3/document_image/12f6dda9-b9d2-4bca-a7a7-cef339e6842a-156946.jpg" alt=""></li><li>使用 spy<img src="https://api2.mubu.com/v3/document_image/5d11f163-1fc3-404c-952c-e2a8a662695e-156946.jpg" alt=""></li></ul></li><li>给Vue添加属性<img src="https://api2.mubu.com/v3/document_image/bcd7713f-0029-4830-9d1a-f2f60b025fe2-156946.jpg" alt=""></li><li>Jest mock<img src="https://api2.mubu.com/v3/document_image/e11b5b42-bfad-466b-a912-2bc099b8dca2-156946.jpg" alt=""></li><li>Mock 模块依赖<img src="https://api2.mubu.com/v3/document_image/e3aded0a-ad30-4bab-a7a7-f0bbe94bff0e-156946.jpg" alt=""></li><li>测试异步代码<img src="https://api2.mubu.com/v3/document_image/bf7389c6-27bf-4ec4-be99-1993acb1a4db-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/2047ac96-d7b9-4aea-af90-06fa6751ddbd-156946.jpg" alt=""></li></ul></li><li>测试事件<ul><li>原生事件<img src="https://api2.mubu.com/v3/document_image/ebc2ca29-aa0e-4f73-916f-daf51b0f73fe-156946.jpg" alt=""></li><li>自动定义事件<img src="https://api2.mubu.com/v3/document_image/9daf1c64-1504-41e2-b453-38ebb22d6d4d-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/768eb8f4-bd96-4bb0-896b-3cddb1bd94df-156946.jpg" alt=""></li><li>测试 Input Forms<img src="https://api2.mubu.com/v3/document_image/9d0e1659-a202-4c4a-bdcb-fc79fc5eef8f-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/d5162a57-c854-4527-9a4e-877fff3e9e0d-156946.jpg" alt=""></li></ul></li><li>测试 Vuex<ul><li>示意图<img src="https://api2.mubu.com/v3/document_image/38338e2b-78c5-4c05-bf12-ca3ebd6fd535-156946.jpg" alt=""></li><li>测试 mutations<img src="https://api2.mubu.com/v3/document_image/918e0f2e-03b7-4382-97e9-5bdb00e749cf-156946.jpg" alt=""></li><li>测试 getters<img src="https://api2.mubu.com/v3/document_image/32bf2f36-2bd8-4ae5-90d7-7465a4678f8a-156946.jpg" alt=""></li><li>测试 actions<img src="https://api2.mubu.com/v3/document_image/f3b9aeec-137a-43b8-921d-bfe0c0dd1852-156946.jpg" alt=""></li><li>在组件中测试 Vuex<img src="https://api2.mubu.com/v3/document_image/e060fe2c-565b-47f7-a706-76b00c8f0e30-156946.jpg" alt=""></li></ul></li><li>测试 Vue Router<img src="https://api2.mubu.com/v3/document_image/86dc3f70-e1c5-4290-bbfc-fc0d0720dec4-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/fcf602f0-bd29-45e7-b3eb-5dc07c3407cf-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/340d2d85-8cbd-454f-9adc-5d4724001a38-156946.jpg" alt=""></li><li>Snapshot 测试<img src="https://api2.mubu.com/v3/document_image/1b0dd25c-74c0-4ee6-b70a-36624ca84426-156946.jpg" alt=""></li><li>参考文档<ul><li><a href="https://testdriven.io/blog/vue-unit-testing/" target="_blank" rel="noopener">https://testdriven.io/blog/vue-unit-testing/</a></li><li><a href="https://worldline.github.io/vuejs-training/tests/" target="_blank" rel="noopener">https://worldline.github.io/vuejs-training/tests/</a></li><li><a href="https://vuejsdevelopers.com/2019/08/26/vue-what-to-unit-test-components/" target="_blank" rel="noopener">https://vuejsdevelopers.com/2019/08/26/vue-what-to-unit-test-components/</a></li><li><a href="https://www.vuemastery.com/blog/unit-testing-vue-what-to-test/" target="_blank" rel="noopener">https://www.vuemastery.com/blog/unit-testing-vue-what-to-test/</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> develop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现模式笔记</title>
      <link href="/posts/69/"/>
      <url>/posts/69/</url>
      
        <content type="html"><![CDATA[<ul><li>本书的作用<ul><li>如何编写别人能懂的代码</li></ul></li><li>一种编程理论<ul><li>价值观<ul><li>沟通<ul><li>让代码更容易与人沟通</li><li>多为读这段代码的人考虑</li></ul></li><li>简单</li><li>灵活</li></ul></li><li>原则<ul><li>局部化影响<ul><li>保证变化只会产生局部影响</li></ul></li><li>最小化重复</li><li>将逻辑与数据捆绑<ul><li>把逻辑与逻辑要处理的数据放在一起</li></ul></li><li>对称性<ul><li>程序中处处充满了对称性。比如add()方法总会伴随着remove()方法，一组方法会接受同样的参数，一个对象中所有的字段都具有相同的生命周期</li><li>这是一个缺少对称性的例子<img src="https://api2.mubu.com/v3/document_image/462297ec-8541-4c27-9532-0859715c2519-156946.jpg" alt=""></li></ul></li><li>声明式表达<ul><li>实现模式背后的另一条原则是尽可能声明式地表达出意图。命令式的编程语言功能强大灵活，但是在阅读时需要跟随着代码的执行流程。我必须在大脑中建起一个程序状态、控制流和数据流的模型。对于那些只是陈述简单事实，不需要一系列条件语句的程序片断，如果用简单的声明方式写出来，读着就容易多了</li></ul></li><li>变化率<ul><li>把具有相同变化率的逻辑、数据放在一起，把具有不同变化率的逻辑、数据分离。变化率具有时间上的对称性</li></ul></li></ul></li><li>模式<ul><li>具体的编程技巧<a id="more"></a></li></ul></li></ul></li><li>类<ul><li>类<ul><li>数据的变化比逻辑要频繁得多，正是这种现象让类有了存在的意义。每个类其实就是这样一个声明：这些逻辑应该放在一起，它们的变化不像它们所操作的数据那么频繁；这些数据也应该放在一起，它们变化的频率差不多，并且由与之关联的逻辑来负责处理。</li><li>类是相对昂贵的设计元素。一个类应该做一些有直接而明显的意义的事情</li></ul></li><li>简单的超类名<ul><li>找到一个贴切的名字</li><li>对于重要的类，尽量用一个单词来为它命名</li></ul></li><li>限定性的子类名<ul><li>子类的名字有两重职责，不仅要描述这些类像什么，还要说明它们之间的区别是什么</li><li>通常在超类名的基础上扩展一两个词就可以得到子类名</li></ul></li><li>抽象接口<ul><li>针对接口编程，不要针对实现编程</li><li>接口这个概念既可以表现为 interface，也可以表现为超类</li></ul></li><li>interface<ul><li>这是我要完成的任务，除此之外的细节不归我操心</li><li>可以给 interface 的名字加上 I 前缀：如果 interface 的名字是 IFile，那么实现类就可以叫 File 了</li></ul></li><li>抽象类<ul><li>何时应该使用超类，何时应该使用 interface？取舍最终归结为两点：接口会如何变化，实现类是否需要同时支持多个接口。抽象接口需要支持实现的变化以及接口本身的变化两种类型的变化</li><li>一旦改变 interface，所有的实现类都必须同时修改。抽象类则没有这方面的限制。只要提供了默认实现，在抽象类中新增的操作就不会侵扰现有的实现类</li><li>interface 和类继承体系并不是互斥的。你可以提供一个接口说“你可以使用这些功能”，再提供一个超类说“这是一种实现方式”。此时使用者应该引用接口类型，这样未来的维护者就可以根据需要随时替换新的实现</li></ul></li><li>有版本的 interface<ul><li>可以声明一个新的 interface，使它继承原来的 interface，然后在其中增加操作</li></ul></li><li>值对象<ul><li>一旦对象被创建出来，它的值就无法改变，只能创建新的值</li><li>组合使用状态可变的对象和像数值一样不可变的对象，能够最好地表现你的程序</li></ul></li><li>特化<ul><li>数据可能大多相同，但略有些区别；逻辑可能大多相同，但略有些区别</li></ul></li><li>子类<ul><li>声明一个子类就是在说：这些对象与那些对象很类似，只除了……</li><li>如果有个适当的超类，创建子类会是一种强大的编程方式。通过覆盖适当的方法，只需几行代码就可以为现有的计算逻辑引入变化</li><li>子类继承还有一个局限：它不能表现不断变化的逻辑。你所要表现的变化情况在创建对象时就已经清楚了，此后无法再改变。如果需要逻辑随时变化，条件语句或是委派就能派上用场了</li></ul></li><li>实现器</li><li>内部类</li><li>实例特有的行为</li><li>条件语句<ul><li>要实现实例特有的行为，if/then 和 switch 语句是最简单的方式</li><li>简而言之，条件语句的好处在于简单和局部化。如果用得太多，这些好处反而变成弱点了</li></ul></li><li>委派<ul><li>要让不同的实例执行不同的逻辑，另一种办法是把部分工作委派给不同类型的对象：不变的逻辑放在发起委派的类中，变化的逻辑交给被委派的对象</li></ul></li><li>可插拔的选择器<ul><li>反射</li></ul></li><li>匿名内部类<ul><li>只在一处使用的类</li><li>API 就必须极其简单</li></ul></li><li>库类<ul><li>创建静态方法</li><li>把静态方法转变成实例方法</li></ul></li></ul></li><li>状态<ul><li>状态<ul><li>把相似的状态放在一起，确保不同的状态彼此分离</li></ul></li><li>访问</li><li>直接访问<ul><li>最简单的方式就是直接访问变量</li></ul></li><li>间接访问<ul><li>可以用方法调用来隐藏对状态的访问和修改</li><li>这些访问器方法能带来更好的灵活性</li></ul></li><li>通用状态<ul><li>一个对象中所有的通用状态应该具有同样的作用域和生命周期</li></ul></li><li>可变状态<ul><li>同一个对象需要不同的数据元素——不仅是数据值改变，就连对象中的数据元素也全然不同，尽管这些对象都来自同一个类</li></ul></li><li>外生状态</li><li>变量</li><li>局部变量<ul><li>收集器（Collector）收集器的内容经常会作为返回值传出。如果需要将收集器返回，就将它命名为 result 或者 results</li><li>计数（Count）这是一种特殊的收集器，专门用于记录某些其他对象的个数</li><li>解释（Explaining）如果有一个复杂的表达式，可以把表达式的一部分结果赋值给一个局部变量，从而帮助阅读者理解整个复杂的运算</li><li>复用（Reuse）如果一个表达式的值会不断变化，而你又需要多次使用同一个值，就应该将这个值保存在局部变量中</li><li>元素（Element）局部变量最后一种常见的用途是在迭代遍历集合时指代其中的元素<ul><li>each</li><li>eachSender</li></ul></li></ul></li><li>字段<ul><li>助手（Helper）：助手字段用于存放其他对象的引用，该对象会被当前对象的很多方法用到</li><li>标记（Flag）：boolean 型的标记表示“这个对象可能有两种不同的行为方式</li><li>策略（Strategy）：如果想要表达“这部分计算有几种不同的方式来进行”，就应该把一个“只执行这部分可变的计算”的对象保存在一个字段中</li><li>状态（State）：状态字段和策略字段有相似之处，它们所在的对象都会把一部分行为委派给它们。但状态字段在被触发时会自己设置相关的状态，而策略字段即便会发生改变，这改变也是由其他对象来进行的</li><li>组件（Component）：这样的字段用来保存由所在对象“拥有”的对象或者数据</li></ul></li><li>参数</li><li>收集参数<ul><li>用于收集的参数</li></ul></li><li>可选参数<ul><li>必需的参数应该放在参数列表的前面，随后加上可选的参数。这样就使得尽可能多的参数保持一致，可选参数只在最后才出现</li></ul></li><li>变长参数<ul><li>变长参数必须位于参数列表的最后。如果一个方法既有变长参数，又有前面介绍的可选参数，那么可选参数也必须放在变长参数的前面</li></ul></li><li>参数对象<ul><li>如果同一组参数被放在一起传递给了很多个方法，就应该考虑创建一个对象，把这些参数放入该对象的字段，然后传递这个对象</li></ul></li><li>常量<ul><li>常量的名字通常全部大写，以强调它们不是普通的变量</li><li>使用常量的重要性在于，它可以帮你避免整整一大类的错误</li></ul></li><li>按角色命名<ul><li>变量名来描述它扮演的角色。其他关于这个变量的重要信息——生命周期、作用域和类型——通常从上下文中就可以找到</li></ul></li><li>声明时的类型</li><li>初始化</li><li>及早初始化<ul><li>一旦变量出现——变量声明时，或者变量所指的对象创建时——就立即初始化</li></ul></li><li>延迟初始化<ul><li>延迟初始化给阅读者传递的信息是：此处性能很要紧</li></ul></li></ul></li><li>行为<ul><li>控制流</li><li>主体流<ul><li>要清晰地表达程序的主体流。用异常和卫述句去表达不寻常的或者错误的情形</li></ul></li><li>消息</li><li>选择性消息</li><li>双重分发</li><li>分解性（序列性）消息</li><li>反置性消息</li><li>邀请性消息</li><li>解释性消息</li><li>异常流</li><li>卫述句<img src="https://api2.mubu.com/v3/document_image/4764c299-691b-481a-ba59-9b76dc13a3b0-156946.jpg" alt=""></li><li>异常</li><li>已检查异常</li><li>异常传播</li></ul></li><li>方法<ul><li>组合方法<ul><li>通过对其他方法的调用来组合出新的方法，被调用方法应大致属于相同的抽象层次</li></ul></li><li>揭示意图的名称<ul><li>应该从潜在调用者的想法出发，根据调用者使用该方法的意图来给方法命名</li></ul></li><li>方法可见性<ul><li>可见性有 4 级，即 public、package、protected 和 private ，每个都传达出方法的不同意图</li></ul></li><li>方法对象<ul><li>一个方法里的代码逻辑纠缠不清，像是硬塞到一起的，方法对象能帮助你将它整理成可读的、清晰的、逐层向阅读者揭示其细节的代码</li></ul></li><li>覆盖方法<ul><li>覆盖方法是表达变体的一种清晰的方式</li></ul></li><li>重载方法</li><li>方法返回类型</li><li>方法注释<ul><li>在名称及代码的结构中表达尽可能多的信息。对于不能在代码中表达清楚的信息，要增加注释</li><li>对于沟通良好的代码来说，很多注释完全是多余的</li></ul></li><li>助手方法<ul><li>助手方法是组合方法的衍生产物。要想将大方法分割成若干小方法，就少不了这些小小的助手方法。助手方法的目的是通过暂时隐藏目前不关心的细节，让你得以通过方法的名字来表达意图，从而令大尺度的运算更具可读性</li></ul></li><li>调试输出方法<ul><li>如果需要提供便于程序员使用的对象表示，则重载 toString()，而其他用途的字符串表示请放在其他方法或单独的类中</li></ul></li><li>转换</li><li>转换方法<ul><li>如果需要表达类型相近的对象之间的转换，且转换的数量有限，那么应把转换表达成源对象中的一个方法</li></ul></li><li>转换构造器<ul><li>转换构造器把源对象当作参数输入，然后返回目标对象</li></ul></li><li>创建</li><li>完整的构造器</li><li>工厂方法<ul><li>对象创建的另一种表达方式是通过类中的一个静态方法来表达</li></ul></li><li>内部工厂</li><li>容器访问器方法</li><li>布尔值设置方法<img src="https://api2.mubu.com/v3/document_image/80bc4e20-3ebe-4d5d-b18a-288f1284bf03-156946.jpg" alt=""></li><li>查询方法<ul><li>有时候对象需要根据另一个对象的状态来做决定。这是一种不理想的情况，因为一般来说其他对象应该为它们自己做决定。不过万一某对象确实需要对外提供决策依据，那么相应的方法名称应该加上“be”或“have”的某种形式（如“is”或“was”）作为前缀<img src="https://api2.mubu.com/v3/document_image/e56941a8-7907-4e4e-81ac-20c9a1d3f151-156946.jpg" alt=""></li></ul></li><li>相等性判断方法</li><li>取值方法<ul><li>提供对对象状态的访问途径，可以用方法返回相应的状态</li><li>get</li></ul></li><li>设值方法<ul><li>set</li></ul></li><li>安全复制</li></ul></li><li>容器<ul><li>隐喻</li><li>要点</li><li>接口</li><li>实现</li><li>Collections</li><li>继承容器</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> develop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凤凰项目读书笔记</title>
      <link href="/posts/67/"/>
      <url>/posts/67/</url>
      
        <content type="html"><![CDATA[<h3 id="四种工作类型"><a href="#四种工作类型" class="headerlink" title="四种工作类型"></a>四种工作类型</h3><ul><li>业务项目</li><li>IT内部项目</li><li>变更</li><li>计划外工作或救火工作<a id="more"></a><h3 id="三步工作法"><a href="#三步工作法" class="headerlink" title="三步工作法"></a>三步工作法</h3></li><li>第一工作法是关于从开发到IT运维再到客户的整个自左向右的工作流。<br>为了使流量最大化，我们需要小的批量规模和工作间隔，绝不让缺陷流向下游工作中心，并且不断为了整体目标（相对于开发功能完成率、测试发现/修复比率或运维有效性指标等局部目标）进行优化。<br>必要的做法包括持续构建、集成以及部署，按需创建环境，严控半成品，以及构建起能够顺利变更的安全系统和组织。</li><li>第二工作法 是关于价值流各阶段自右向左的快速持续反馈流，放大其效益以确保防止问题再次发生，或者更快地发现和修复问题。<br>这样，我们就能在所需之处获取或嵌入知识，从源头上保证质量。<br>必要的做法包括：在部署管道中的构建和测试失败时“停止生产线”；日复一日地持续改进日常工作；创建快速的自动化测试套装软件，以确保代码总是处于可部署的状态；在开发和IT运维之间创建共同的目标和共同解决问题的机制；创建普遍的产品遥测技术，让每个人都能知道，代码和环境是否在按照设定的运行，以及是否达到了客户的目标。</li><li>第三工作法 是关于创造公司文化，该文化可带动两种风气的形成：不断尝试，这需要承担风险并从成功和失败中吸取经验教训；理解重复和练习是熟练掌握的前提。<br>尝试和承担风险让我们能够不懈地改进工作系统，这经常要求我们去做一些与几十年来的做法大不相同的事。一旦出了问题，不断重复的日常操练赋予我们的技能和经验，令我们可以撤回至安全区域并恢复正常运作。<br>必要的做法包括营造一种勇于创新、敢于冒险（相对于畏惧或盲目服从命令）以及高信任度（相对于低信任度和命令控制）的文化，把至少20%的开发和IT运维周期划拨给非功能性需求，并且不断鼓励进行改进。</li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> agile </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码坏味道一句话总结</title>
      <link href="/posts/66/"/>
      <url>/posts/66/</url>
      
        <content type="html"><![CDATA[<p><img src="/posts/66/refactor.png" alt=""><br><a id="more"></a></p><ul><li>神秘命名(Mysterious Name)<ul><li>总结<ul><li>命名需要清晰表明意图</li><li>想不出一个好名字可能说明设计问题</li></ul></li><li>手法<ul><li>改变函数声明</li><li>变量改名</li><li>字段改名</li></ul></li></ul></li><li>重复代码(Duplicated Code)<ul><li>总结<ul><li>重复不好</li></ul></li><li>手法<ul><li>提炼函数</li><li>移动语句</li><li>函数上移</li></ul></li></ul></li><li>过长函数(Long Function)<ul><li>总结<ul><li>好函数应该更短</li></ul></li><li>手法<ul><li>提炼函数</li><li>以查询取代临时变量</li><li>引入参数对象</li><li>保持对象完整</li><li>以命令取代函数</li><li>分解条件表达式</li><li>以多态取代条件表达式</li><li>拆分循环</li></ul></li></ul></li><li>过长参数列表(Long Parameter List)<ul><li>总结<ul><li>参数应该尽量少</li></ul></li><li>手法<ul><li>以查询取代参数</li><li>保持对象完整</li><li>引入参数对象</li><li>移除标记参数</li><li>函数组合成类</li></ul></li></ul></li><li>全局数据(Global Data)<ul><li>总结<ul><li>全局数据是恶魔</li><li>限制全局数据的作用域</li></ul></li><li>手法<ul><li>封装变量</li></ul></li></ul></li><li>可变数据(Mutable Data)<ul><li>总结<ul><li>尽量少使用可变数据</li><li>限制可变数据的作用域</li></ul></li><li>手法<ul><li>封装变量</li><li>拆分变量</li><li>移动语句</li><li>提炼函数</li><li>将查询函数和修改函数分离</li><li>移除设值函数</li><li>以查询取代派生变量</li><li>函数组合成类</li><li>函数组合成变换</li><li>将引用对象改为值对象</li></ul></li></ul></li><li>发散式变化(Divergent Change)<ul><li>总结<ul><li>经常因为不同的原因在不同的方向上发生变化</li></ul></li><li>手法<ul><li>拆分阶段</li><li>搬移函数</li><li>提炼函数</li><li>提炼类</li></ul></li></ul></li><li>霰弹式修改(Shotgun Surgery)<ul><li>总结<ul><li>某种变化需要在不同类/模块/函数内做出许多小修改</li></ul></li><li>手法<ul><li>搬移函数</li><li>搬移字段</li><li>函数组合成类</li><li>函数组合成变换</li><li>拆分阶段</li><li>内联函数</li><li>内联类</li></ul></li></ul></li><li>依恋情结(Feature Envy)<ul><li>总结<ul><li>一个函数跟另一个模块中的函数或者数据交流格外频繁，远胜于在自己所处模块内部的交流</li><li>策略(Strategy)模式和访问者(Visitor)模式是例外</li></ul></li><li>手法<ul><li>搬移函数</li><li>提炼函数</li></ul></li></ul></li><li>数据泥团(Data Clumps)<ul><li>总结<ul><li>几个数据项（字段、参数）总是一起出现</li></ul></li><li>手法<ul><li>提炼类</li><li>引入参数对象</li><li>保持对象完整</li></ul></li></ul></li><li>基本类型偏执(Primitive Obsession)<ul><li>总结<ul><li>太执着于使用原生基本类型</li></ul></li><li>手法<ul><li>以对象取代基本类型</li><li>以子类取代类型码</li><li>以多态取代条件表达式</li><li>提炼类</li><li>引入参数对象</li></ul></li></ul></li><li>重复的switch (Repeated Switches)<ul><li>总结<ul><li>多次出现类似的switch</li></ul></li><li>手法<ul><li>以多态取代条件表达式</li></ul></li></ul></li><li>循环语句(Loops)<ul><li>总结<ul><li>函数式编程可以简化循环</li></ul></li><li>手法<ul><li>以管道（map/filter）取代循环</li></ul></li></ul></li><li>冗赘的元素(Lazy Element)<ul><li>总结<ul><li>有些元素过于简单，没有存在的必要</li></ul></li><li>手法<ul><li>内联函数</li><li>内联类</li><li>折叠继承体系</li></ul></li></ul></li><li>夸夸其谈通用性(Speculative Generality)<ul><li>总结<ul><li>过度/过早设计</li></ul></li><li>手法<ul><li>折叠继承体系</li><li>内联函数</li><li>内联类</li><li>改变函数声明</li><li>移除死代码</li></ul></li></ul></li><li>临时字段(Temporary Field)<ul><li>总结<ul><li>其内部某个字段仅为某种特定情况而设</li></ul></li><li>手法<ul><li>提炼类</li><li>搬移函数</li><li>引入特例</li></ul></li></ul></li><li>过长的消息链(Message Chains)<ul><li>总结<ul><li>向一个对象请求另一个对象，然后再向后者请求另一个对象，然后再请求另一个对象</li></ul></li><li>手法<ul><li>隐藏委托关系</li><li>提炼函数</li><li>搬移函数</li></ul></li></ul></li><li>中间人(Middle Man)<ul><li>总结<ul><li>过度运用委托</li></ul></li><li>手法<ul><li>移除中间人</li><li>内联函数</li><li>以委托取代超类</li><li>以委托取代子类</li></ul></li></ul></li><li>内幕交易(Insider Trading)<ul><li>总结<ul><li>减少模块间的数据交换</li><li>子类对超类的了解总是超过后者的主观愿望</li></ul></li><li>手法<ul><li>搬移函数</li><li>搬移字段</li><li>隐藏委托关系</li><li>以委托取代子类</li><li>以委托取代超类</li></ul></li></ul></li><li>过大的类(Large Class)<ul><li>总结<ul><li>单个类做太多的事情</li></ul></li><li>手法<ul><li>提炼类</li><li>提炼超类</li><li>以子类取代类型码</li></ul></li></ul></li><li>异曲同工的类(Alternative Classes with Different Interfaces)<ul><li>总结<ul><li>不同类做的事情类似，但接口不一致</li></ul></li><li>手法<ul><li>改变函数声明</li><li>搬移函数</li><li>提炼超类</li></ul></li></ul></li><li>纯数据类(Data Class)<ul><li>总结<ul><li>只有字段和用于访问这些字段的函数的类</li></ul></li><li>手法<ul><li>封装记录</li><li>移除设值函数</li><li>搬移函数</li><li>提炼函数</li></ul></li></ul></li><li>被拒绝的遗赠(Refused Bequest)<ul><li>总结<ul><li>子类不想继承超类的函数和数据</li></ul></li><li>手法<ul><li>函数下移</li><li>字段下移</li><li>以委托取代子类</li><li>以委托取代超类</li></ul></li></ul></li><li>注释(Comments)<ul><li>总结<ul><li>不要给糟糕的代码注释</li></ul></li><li>手法<ul><li>提炼函数</li><li>改变函数声明</li><li>引入断言<br>代码坏味道一句话总结</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> refactor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重构手法一句话总结</title>
      <link href="/posts/65/"/>
      <url>/posts/65/</url>
      
        <content type="html"><![CDATA[<p><img src="/posts/65/refactor.png" alt=""><br><a id="more"></a></p><ul><li>基础<ul><li>提炼函数(Extract Function)<ul><li>将意图与实现分开</li><li>减少重复</li></ul></li><li>内联函数(Inline Function)<ul><li>实现与意图相比已经足够清楚</li><li>内联到一起方便后续提炼</li></ul></li><li>提炼变量(Extract Variable)<ul><li>解释表达式意图</li><li>减少重复</li></ul></li><li>内联变量(Inline Variable)<ul><li>表达式足够清晰表明意图</li><li>变量妨碍重构</li></ul></li><li>改变函数声明(Change Function Declaration)<ul><li>更好的表现意图</li><li>增加/减少参数</li></ul></li><li>封装变量(Encapsulate Variable)<ul><li>统一变量的直接访问和修改</li></ul></li><li>变量改名(Rename Variable)<ul><li>更好的表现意图</li></ul></li><li>引入参数对象(Introduce Parameter Object)<ul><li>参数经常结伴而行</li><li>迁移共同行为</li></ul></li><li>函数组合成类(Combine Functions into Class)<ul><li>不同函数经常操作同一块数据（参数）</li></ul></li><li>函数组合成变换(Combine Functions into Transform)<ul><li>收拢派生数据（根据其他数据计算得到的数据）</li></ul></li><li>拆分阶段(Split Phase)<ul><li>一段代码同时处理多件不同的事</li></ul></li></ul></li><li>封装<ul><li>封装记录(Encapsulate Record)<ul><li>封装字典、map、数据类</li></ul></li><li>封装集合(Encapsulate Collection)<ul><li>封装数组、列表</li></ul></li><li>以对象取代基本类型(Replace Primitive with Object)<ul><li>封装基本类型处理的业务逻辑</li></ul></li><li>以查询取代临时变量(Replace Temp with Query)<ul><li>把临时变量抽取成函数</li></ul></li><li>提炼类(Extract Class)<ul><li>类责任过大</li></ul></li><li>内联类(Inline Class)<ul><li>类责任过小</li></ul></li><li>隐藏委托关系(Hide Delegate)<ul><li>减少调用方与其他元素的耦合</li></ul></li><li>移除中间人(Remove Middle Man)<ul><li>委托的功能越来越多</li></ul></li><li>替换算法(Substitute Algorithm)<ul><li>替换原来的算法</li></ul></li></ul></li><li>搬移特性<ul><li>搬移函数(Move Function)<ul><li>它与其他类/模块上的元素交互更多</li><li>类/模块需要频繁调用一个别处的函数</li></ul></li><li>搬移字段(Move Field)<ul><li>一条记录总是喜欢与别处的记录一起使用、修改</li></ul></li><li>搬移语句到函数(Move Statements into Function)<ul><li>多处调用函数前都使用了类似的语句</li></ul></li><li>搬移语句到调用者(Move Statements to Callers)<ul><li>多处调用点表现不同的行为需要从函数中挪出</li></ul></li><li>以函数调用取代内联代码(Replace Inline Code with Function Call)<ul><li>内联代码是已有函数的重复</li></ul></li><li>移动语句(Slide Statements)<ul><li>让关联的东西一起出现</li></ul></li><li>拆分循环(Split Loop)<ul><li>一个循环内做了多件事</li></ul></li><li>以管道取代循环(Replace Loop with Pipeline)<ul><li>使用函数式编程的map/filter</li></ul></li><li>移除死代码(Remove Dead Code)<ul><li>删除无用的代码</li></ul></li></ul></li><li>重新组织数据<ul><li>拆分变量(Split Variable)<ul><li>一个变量承担了多种用途</li></ul></li><li>字段改名(Rename Field)<ul><li>更好的表明意图</li></ul></li><li>以查询取代派生变量(Replace Derived Variable with Query)<ul><li>有些变量其实可以很容易地随时计算出来</li><li>减少可变变量</li></ul></li><li>将引用对象改为值对象(Change Reference to Value)<ul><li>值对象更好</li></ul></li><li>将值对象改为引用对象(Change Value to Reference)<ul><li>有时共享的数据需要更新</li></ul></li></ul></li><li>简化条件逻辑<ul><li>分解条件表达式(Decompose Conditional)<ul><li>条件和分支提取成函数</li></ul></li><li>合并条件表达式(Consolidate Conditional Expression)<ul><li>多个条件表达的分支行为一致</li></ul></li><li>以卫语句取代嵌套条件表达式(Replace Nested Conditional with Guard Clauses)<ul><li>提前返回异常情况</li><li>减少条件嵌套</li></ul></li><li>以多态取代条件表达式(Replace Conditional with Polymorphism)<ul><li>多处使用相同的条件表达式</li></ul></li><li>引入特例(Introduce Special Case)<ul><li>对有些特殊值的检查多次出现</li></ul></li><li>引入断言(Introduce Assertion)<ul><li>使用断言明确标明这些假设</li><li>条件必须为真</li></ul></li></ul></li><li>重构API<ul><li>将查询函数和修改函数分离(Separate Query from Modifier)<ul><li>把有副作用和无副作用的部分分开</li></ul></li><li>函数参数化(Parameterize Function)<ul><li>函数有点类似</li></ul></li><li>移除标记参数(Remove Flag Argument)<ul><li>调用者用标记参数来指示执行被调用函数的哪部分</li></ul></li><li>保持对象完整(Preserve Whole Object)<ul><li>从一个记录结构中导出几个值，然后又把这几个值一起传递给一个函数</li></ul></li><li>以查询取代参数(Replace Parameter with Query)<ul><li>有些参数可以通过其他方式获取到</li></ul></li><li>以参数取代查询(Replace Query with Parameter)<ul><li>移除一些不需要的依赖引用，如全局变量、对象</li></ul></li><li>移除设值函数(Remove Setting Method)<ul><li>不可变更好</li></ul></li><li>以工厂函数取代构造函数(Replace Constructor with Factory Function)<ul><li>更好的表明意图</li></ul></li><li>以命令取代函数(Replace Function with Command)<ul><li>对复杂函数进行面向对象改造</li></ul></li><li>以函数取代命令(Replace Command with Function)<ul><li>命令对象已经简单到不需要了</li></ul></li></ul></li><li>处理继承关系<ul><li>函数上移(Pull Up Method)<ul><li>子类共用，去除重复</li></ul></li><li>字段上移(Pull Up Field)<ul><li>子类共用，去除重复</li></ul></li><li>构造函数本体上移(Pull Up Constructor Body)<ul><li>子类共用，去除重复</li></ul></li><li>函数下移(Push Down Method)<ul><li>子类不共用</li></ul></li><li>字段下移(Push Down Field)<ul><li>子类不共用</li></ul></li><li>以子类取代类型码(Replace Type Code with Subclasses)<ul><li>使用面向对象和多态</li></ul></li><li>移除子类(Remove Subclass)<ul><li>子类过于简单，可以使用字段区分</li></ul></li><li>提炼超类(Extract Superclass)<ul><li>多个类在做相似的事</li></ul></li><li>折叠继承体系(Collapse Hierarchy)<ul><li>一个类与其超类已经没多大差别</li></ul></li><li>以委托取代子类(Replace Subclass with Delegate)<ul><li>继承只能用一次（单继承）</li><li>对象组合优于类继承</li></ul></li><li>以委托取代超类(Replace Superclass with Delegate)<ul><li>超类的一些函数/功能对子类并不适用</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> refactor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对软件开发中需求的思考</title>
      <link href="/posts/57/"/>
      <url>/posts/57/</url>
      
        <content type="html"><![CDATA[<h3 id="终极原则"><a href="#终极原则" class="headerlink" title="终极原则"></a>终极原则</h3><ul><li>一切都是为沟通，做软件最重要的是沟通</li><li>沟通是为了让交付团队充分理解业务<h3 id="需求以用户故事方式编写"><a href="#需求以用户故事方式编写" class="headerlink" title="需求以用户故事方式编写"></a>需求以用户故事方式编写</h3>格式：</li><li>为了<strong>[</strong>业务价值<strong>]</strong>，作为 <strong>[</strong>角色<strong>]</strong>，我需要<strong>[</strong>功能<strong>]</strong><br>示例：</li><li>为了体验系统功能，作为用户，我需要登录系统<br>好处：</li><li>每一条需求都表明了业务价值，不做无用功能</li><li>每一条需求都指定了用户角色，说明功能是给谁用的，不臆想没人会使用的功能</li><li>同一个功能，不同角色，可能实现不同</li><li>突出业务价值，站在用户的角度考虑问题，功能的业务价值明确<br><strong>重要的不是格式而是沟通，用户故事只是一个标题，一个索引，是为让团队沟通讨论并一致的理解需求</strong><a id="more"></a><h3 id="用户提的需求可能只是一种解决方案"><a href="#用户提的需求可能只是一种解决方案" class="headerlink" title="用户提的需求可能只是一种解决方案"></a>用户提的需求可能只是一种解决方案</h3>拿到需求先问为什么?<br>示例：<br>用户提出的需求：能不能把密码保存到文件？<br>5W 方式找到真实需求，使用更好的解决方案来实现真实的需求：</li><li>为什么要把密码保存到文件？因为用户不想输入密码。</li><li>为什么不想输入密码？因为输入用户名密码太频繁，半个小时就要输入一次。</li><li>为什么输入用户名密码太频繁？因为为了安全，我们设置了30分钟的登录过期策略。<br>几次为什么之后，我们已经找到最终的问题，我们可以通过浏览器记住密码，或者延长登录期策略或者其他方案来解决用户的需求。<h3 id="反馈循环"><a href="#反馈循环" class="headerlink" title="反馈循环"></a>反馈循环</h3><img src="https://api2.mubu.com/v3/document_image/86ca3043-20d5-406e-b5a3-3883c6da0a50-156946.jpg" alt="img" style="zoom: 33%;"><br><strong>传统方式</strong><br>功能有没有完成，需要等待测试或者产品等其他利益相关人验收，反馈循环长，手动验证，不可重复验证。<br><strong>更好的方式</strong><br>提前讨论沟通需求，使用各方对需求理解一致，并输出成业务相关的验收测试，在开发过程中即可执行验收测试，验证需求是否完成，而且可以反复执行。<h3 id="为什么需求文档不是最好的选择"><a href="#为什么需求文档不是最好的选择" class="headerlink" title="为什么需求文档不是最好的选择"></a>为什么需求文档不是最好的选择</h3><strong>同步</strong><br>需求文档不易与真实的需求保持一致，需求会经常变更，而需求文档可能会忘记更新同步<br><strong>理解不同</strong><br><img src="https://api2.mubu.com/v3/document_image/b57acbb1-2f46-48cd-b8ca-fc74e91390f5-156946.jpg" alt="img" style="zoom:50%;"><br>同一份需求文档，不同人阅读，会得到不同的理解，无法保证理解一致，可能只有在验收时，才发现理解不一致的问题，然后返工，成本大，反馈循环长<br><strong>可验证性</strong><br>需求文档不能验证，功能是否已经准确无误的完成了，仍然需要手动验证<h3 id="更好的选择"><a href="#更好的选择" class="headerlink" title="更好的选择"></a>更好的选择</h3><h4 id="可视化需求分析"><a href="#可视化需求分析" class="headerlink" title="可视化需求分析"></a>可视化需求分析</h4>文字版本效果，理解困难，不直观<br><img src="https://api2.mubu.com/v3/document_image/6e2f8927-9098-4e65-8551-920bff407579-156946.jpg" alt="img" style="zoom: 50%;"><br>可视化图表，清晰易懂<br><img src="https://api2.mubu.com/v3/document_image/39453495-d9a8-455e-ac03-a93168cd1705-156946.jpg" alt="img" style="zoom:33%;"><h4 id="实例化需求"><a href="#实例化需求" class="headerlink" title="实例化需求"></a>实例化需求</h4>抽象的需求和规则一般难于理解，只有业务规则和实际的例子一起，才能更好的理解需求<br>规则：</li><li>密码至少包含数字、小写字母、大写字母</li><li>密码长度最短为6个字符<br>实例化：</li><li>a1234546B 合法</li><li>a123456c 不合法</li><li>123456 不合法</li><li>A123456 不合法<br>实例化得到的即是测试用例<br><strong>实践</strong><br>Example Mapping<br><img src="https://api2.mubu.com/v3/document_image/47558b0a-7fbf-494e-85a3-e24f1230ee92-156946.jpg" alt="img" style="zoom: 25%;"><h4 id="BDD-活文档"><a href="#BDD-活文档" class="headerlink" title="BDD 活文档"></a>BDD 活文档</h4><img src="https://api2.mubu.com/v3/document_image/1a887abe-dde2-4502-baa3-d8e303f31191-156946.jpg" alt="img" style="zoom:33%;"><br>从业务语言到代码实现<br><img src="https://api2.mubu.com/v3/document_image/144a09d8-8899-42ee-88b7-432f362a377b-156946.jpg" alt="img" style="zoom:33%;"><br>开发循环<br><img src="https://api2.mubu.com/v3/document_image/02c3ca62-bab8-4e8c-8a39-6a067e65f076-156946.jpg" alt="img" style="zoom:33%;"><h3 id="需求规划"><a href="#需求规划" class="headerlink" title="需求规划"></a>需求规划</h3>迭代计划，小版本发布<br>每一次迭代发布都要有明确的目标，把对目标有贡献的需求加入到当次迭代<br>不能只见树木不见森林，要有整个产品的用户故事地图，用户旅程<h4 id="用户故事地图"><a href="#用户故事地图" class="headerlink" title="用户故事地图"></a>用户故事地图</h4><img src="https://api2.mubu.com/v3/document_image/b1733409-9023-476f-a9bc-369fc4908c1e-156946.jpg" alt="img" style="zoom:50%;"><br>示例：<br><img src="https://api2.mubu.com/v3/document_image/c6c1769b-3601-4c56-926f-bbd114cf7eae-156946.jpg" alt="img" style="zoom:50%;"><h4 id="用户旅程"><a href="#用户旅程" class="headerlink" title="用户旅程"></a>用户旅程</h4><img src="https://api2.mubu.com/v3/document_image/1607fd4b-3333-478e-8bbd-c5ce5c7b26b2-156946.jpg" alt="img" style="zoom:50%;"><br>示例：<br><img src="https://api2.mubu.com/v3/document_image/442044bb-d447-4bc4-9bb5-19f37d436112-156946.jpg" alt="img" style="zoom: 33%;"><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://book.douban.com/subject/26760348/" target="_blank" rel="noopener">用户故事地图</a></li><li><a href="https://book.douban.com/subject/4743056/" target="_blank" rel="noopener">用户故事与敏捷方法</a></li><li><a href="https://book.douban.com/subject/11611022/" target="_blank" rel="noopener">实例化需求</a></li><li><a href="https://www.manning.com/books/bdd-in-action" target="_blank" rel="noopener">BDD in Action</a></li><li><a href="https://leanpub.com/bddbooks-discovery" target="_blank" rel="noopener">The BDD Books - Discover</a></li><li><a href="https://leanpub.com/vba-cn-zh" target="_blank" rel="noopener">可视化软件需求分析</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> agile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界上最简单的会计书笔记</title>
      <link href="/posts/68/"/>
      <url>/posts/68/</url>
      
        <content type="html"><![CDATA[<ul><li>方法<ul><li>权责发生制<ul><li>有存货</li></ul></li><li>收付实现制<ul><li>服务业</li><li>延期纳税</li></ul></li></ul></li><li>三张表<a id="more"></a><ul><li>资产负债表<img src="https://api2.mubu.com/v3/document_image/213ce93b-cdda-4582-beea-7c7b72eb484b-156946.jpg" alt=""><ul><li>恒等式<img src="https://api2.mubu.com/v3/document_image/0ecb4d72-53f7-4449-bb8b-1bce961f9926-156946.jpg" alt=""><ul><li>资产 = 负债 + 所有者权益</li></ul></li><li>资产<ul><li>现金</li><li>应收账款</li><li>待摊费用</li><li>固定资产<ul><li>土地</li><li>设备<ul><li>直线折旧法</li><li>双倍余额递减法</li><li>折旧是一项非付现费用</li></ul></li></ul></li><li>存货<ul><li>计算方法<ul><li>先进先出</li><li>后进先出<ul><li>节税</li></ul></li></ul></li><li>原材料</li><li>产成品</li></ul></li></ul></li><li>负债<ul><li>应付票据</li><li>应付账款</li></ul></li><li>权益<ul><li>初始投资</li><li>留在收益</li><li>本周盈利</li></ul></li></ul></li><li>利润表<img src="https://api2.mubu.com/v3/document_image/ebb9f8fe-264c-4f32-b0c5-4c024676b5b0-156946.jpg" alt=""><ul><li>期初存货</li><li>期末存货</li><li>销售收入</li><li>销售成本</li><li>毛利</li><li>费用<ul><li>利息</li><li>坏账</li></ul></li><li>净利润（底线值）</li></ul></li><li>现金表<img src="https://api2.mubu.com/v3/document_image/69de3ea2-c5a7-48bb-b7df-175403baa700-156946.jpg" alt=""><ul><li>现金流量</li></ul></li></ul></li><li>核销</li><li>税金</li><li>趋势分析<img src="https://api2.mubu.com/v3/document_image/f9edfd79-b64a-47a8-af2c-a43ec8b54a95-156946.jpg" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> 会计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 会计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch使用入门</title>
      <link href="/posts/59/"/>
      <url>/posts/59/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Elasticsearch 是一个高度可扩展的开源全文搜索分析引擎，可以快速的以接近实时速度存储、搜索、分析大量的数据。使用 Elasticsearch 可以实现复杂的搜索需求。Elasticsearch 可以以单节点的方式启动，也可以以集群的方式运行。Elasticsearch 通常用来解决 MySQL 在数据量比较大时，使用 like 来模糊匹配性能差的问题。</p><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p><strong>集群（cluster）</strong>是多个 Elasticsearch 节点的集合。共同存储数据，提供服务。</p><p><strong>节点（node）</strong>是 Elasticsearch 集群中的单个服务器。</p><a id="more"></a><p><strong>分片（shards）</strong>由于索引可能会存储大量的数据，以至于超过单个 ES 节点的硬件资源限制，为了解决这个问题，ES 提供了分片功能，可以把一个索引分成若干个分片，每个分片只存储索引部分数据。分片对用户是完全透明的，用户仍然可以把索引当成一个整体来使用。</p><p><strong>副本（replicas）</strong>当索引数据分成多个分片后，为了保证高可用性，可以把同一个分片数据复制多份存储，这些复制的数据就被称为副本分片，简称副本。</p><p><strong>索引（index）</strong>是拥有相似特征的文档集合，相当于 MySQL 中的表。</p><p><strong>映射（mapping）</strong>是索引中存储的文档数据的结构定义，相当于 MySQL 中的表结构定义。</p><p><strong>类型（type）</strong>是索引的逻辑分隔，为了在同一个索引中存储不同类型的文档数据。在 ES 6.x 及之后的版本已经被废弃，不再支持在一个索引中存储多种类型的文档数据。</p><p><strong>文档（document）</strong>是 ES 中索引存储的基本数据单位，相当于 MySQL 表中的一行数据。</p><h3 id="简单使用入门"><a href="#简单使用入门" class="headerlink" title="简单使用入门"></a>简单使用入门</h3><p><code>http://localhost:9200/</code> 是 ES 启动之后的监听地址。</p><h4 id="管理索引"><a href="#管理索引" class="headerlink" title="管理索引"></a>管理索引</h4><p><strong>查看所有索引</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/_cat/indices?v</span><br></pre></td></tr></table></figure><p><strong>创建索引</strong></p><p>创建名为 <code>test</code> 的索引。<code>?pretty</code> 用来设置让 ES 返回格式化后的 json 响应数据，方便在命令行中查看数据。实际生产环境可以去除该参数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT http://localhost:9200/<span class="built_in">test</span>?pretty</span><br></pre></td></tr></table></figure><p><strong>删除索引</strong></p><p>删除名为 <code>test</code> 的索引。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE http://localhost:9200/<span class="built_in">test</span>?pretty</span><br></pre></td></tr></table></figure><h4 id="管理索引的映射"><a href="#管理索引的映射" class="headerlink" title="管理索引的映射"></a>管理索引的映射</h4><p>索引的映射决定了索引中存储的文档的字段及其类型，类似于 MySQL 中的表结构定义。ES 支持动态的索引映射，可以在不创建映射的情况下存储文档数据，ES 会为索引动态创建映射。但是由于默认动态创建的映射为了有更好的通用性，规则比较宽松，可能会造成映射之后的数据存储空间占用比较大的情况。推荐根据业务需求提前为索引创建好映射。对于已经创建好的映射中字段，是无法修改其类型的，即使修改成功，之前已经索引的数据也不会发生改变。</p><p>映射字段常用类型：</p><ul><li>字符串类型<ul><li><strong>text</strong> 全文索引类型，对字段值进行分词后索引并存储，当需要对该字段进行全文索引时，使用此类型。</li><li><strong>keyword</strong> 关键字索引，不进行分词，把整个字段值作为一个整体索引并存储，适合于精确匹配，如：根据完整的用户名查找用户。</li></ul></li><li>数字类型<ul><li><strong>long</strong> 64位整数，整数范围 -2^63 ~ 2^63 -1</li><li><strong>integer</strong> 32位整数，整数范围 -2^31 ~ 2^31 -1</li><li><strong>short</strong> 16位整数，整数范围 -2^15 ~ 2^15 -1</li><li><strong>byte</strong> 8位整数，整数范围 -2^7 ~ 2^7 -1</li><li><strong>double</strong> 64位浮点数</li><li><strong>float</strong> 32位浮点数</li></ul></li><li>日期类型<ul><li><strong>date</strong></li></ul></li><li>布尔类型<ul><li><strong>bool</strong> true 和 false</li></ul></li></ul><p>其他类型以及详细信息可查看<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html" target="_blank" rel="noopener">官方文档</a>。</p><p><strong>查看索引的映射</strong></p><p>查看 <code>test</code> 索引的映射。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/<span class="built_in">test</span>/_mapping?pretty</span><br></pre></td></tr></table></figure><p><strong>更新索引映射</strong></p><p>更新 <code>test</code> 索引中 <code>_doc</code> 类型的映射。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT http://localhost:9200/<span class="built_in">test</span>/_mapping/_doc?pretty -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "properties": &#123;</span></span><br><span class="line"><span class="string">        "name": &#123;</span></span><br><span class="line"><span class="string">            "type": "text"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "nickname": &#123;</span></span><br><span class="line"><span class="string">            "type": "text",</span></span><br><span class="line"><span class="string">            "fields": &#123;</span></span><br><span class="line"><span class="string">                "raw": &#123;</span></span><br><span class="line"><span class="string">                    "type": "keyword"</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "admin": &#123;</span></span><br><span class="line"><span class="string">            "type": "byte"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br><span class="line"></span><br><span class="line">curl http://localhost:9200/<span class="built_in">test</span>/_mapping?pretty</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>name 字段只用全文索引，所以设置类型为 text 类型。</li><li>nickname 字段由于需要全文索引又需要精确匹配，所以设置原始类型设置为 text 类型，并且再额外存储一个字段名为 raw 类型为 keyword 类型的字段，用于精准匹配，使用时字段名为 nickname.raw 。</li><li>admin 字段只存储简单的 0，1 数据，所以选择占用空间更小的 byte 类型。</li></ul><p><strong>注意：</strong></p><p>对于不需要过滤或者搜索，仅需要获取的字段可以设置不进行索引来节省存储空间。如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"nickname"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>: &#123;</span><br><span class="line">                <span class="attr">"raw"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"admin"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"byte"</span>,</span><br><span class="line"><span class="attr">"index"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下不支持使用 text 类型的字段排序，如果需要使用 text 类型的字段排序，需要使用如下配置方式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"nickname"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line"><span class="attr">"fielddata"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"admin"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"byte"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="管理文档数据"><a href="#管理文档数据" class="headerlink" title="管理文档数据"></a>管理文档数据</h4><p><strong>添加单条数据</strong></p><p> 向 <code>test</code> 索引的 <code>_doc</code> 类型添加一条 id 为 1 的数据。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT http://localhost:9200/<span class="built_in">test</span>/_doc/1?pretty -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "name": "will",</span></span><br><span class="line"><span class="string">  "nickname": "John Doe",</span></span><br><span class="line"><span class="string">  "admin": 0</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><p><strong>查询数据</strong></p><p>查看 <code>test</code> 索引中类型为 <code>_doc</code> 且 id 为 1 的数据。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/<span class="built_in">test</span>/_doc/1?pretty</span><br></pre></td></tr></table></figure><p><strong>更新数据</strong></p><p>更新 <code>test</code> 索引中类型为 <code>_doc</code>  且 id 为 1 的数据。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:9200/<span class="built_in">test</span>/_doc/1/_update?pretty -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "doc": &#123;</span></span><br><span class="line"><span class="string">      "nickname": "hello will"</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><p><strong>批量添加或更新数据</strong></p><p>向 <code>test</code> 索引批量添加类型为 <code>_doc</code> 数据。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H <span class="string">"Content-Type: application/json"</span> http://localhost:9200/<span class="built_in">test</span>/_doc/_bulk?pretty -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;"index":&#123;"_id":"2"&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;"name":"cwill","nickname":"how are you","admin":1&#125;</span></span><br><span class="line"><span class="string">&#123;"index":&#123;"_id":"3"&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;"name":"will2","nickname":"will is very good","admin":0&#125;</span></span><br><span class="line"><span class="string">&#123;"index":&#123;"_id":"4"&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;"name":"awill","nickname":"hi amgxian","admin":0&#125;</span></span><br><span class="line"><span class="string">&#123;"index":&#123;"_id":"5"&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;"name":"Will","nickname":"hello world","admin":1&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><p><strong>删除数据</strong></p><p>删除 <code>test</code> 索引中类型为 <code>_doc</code>  且 id 为 1 的数据。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE http://localhost:9200/<span class="built_in">test</span>/_doc/1?pretty</span><br></pre></td></tr></table></figure><h4 id="搜索数据"><a href="#搜索数据" class="headerlink" title="搜索数据"></a>搜索数据</h4><p>搜索数据可以使用如下的两种方式：</p><ul><li><strong>query 查询</strong> 检查数据与搜索关键字的匹配度，返回 score 值表示相关度得分。</li><li><strong>filter 过滤器</strong> 只检查数据与搜索关键字是否匹配，不计算匹配度，不返回 score 值。</li></ul><p>filter 过滤器能缓存查询结果，性能会更好。</p><h5 id="query-查询"><a href="#query-查询" class="headerlink" title="query 查询"></a>query 查询</h5><p><strong>搜索所有数据</strong></p><p>在 <code>test</code> 索引中搜索数据，从位置 0 开始取数据，取 3 条数据，只获取数据的 nickname 和 name 字段，以 admin 字段降序且以 nickname.raw 字段升序排序。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/<span class="built_in">test</span>/_search?pretty</span><br><span class="line"></span><br><span class="line">curl http://localhost:9200/<span class="built_in">test</span>/_search?pretty -H <span class="string">"Content-Type: application/json"</span>  -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "match_all": &#123;&#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "from": 0,</span></span><br><span class="line"><span class="string">    "size": 3,</span></span><br><span class="line"><span class="string">    "_source": [</span></span><br><span class="line"><span class="string">        "nickname",</span></span><br><span class="line"><span class="string">        "name"</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">    "sort": [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "admin": "desc"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "nickname.raw": "asc"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><p><strong>搜索指定数据</strong></p><p>在 <code>test</code> 索引中搜索 nickname 字段中包含 will 关键字的用户。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/<span class="built_in">test</span>/_search?pretty -H <span class="string">"Content-Type: application/json"</span>  -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "match": &#123;</span></span><br><span class="line"><span class="string">            "nickname": "will"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "from": 0,</span></span><br><span class="line"><span class="string">    "size": 3,</span></span><br><span class="line"><span class="string">    "_source": ["nickname", "name"]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><p><strong>精准匹配数据</strong></p><p>在 <code>test</code> 索引中搜索 nickname.raw 字段等于 hello world 关键字的用户。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/<span class="built_in">test</span>/_search?pretty -H <span class="string">"Content-Type: application/json"</span>  -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "term": &#123;</span></span><br><span class="line"><span class="string">            "nickname.raw": "hello world"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "from": 0,</span></span><br><span class="line"><span class="string">    "size": 3,</span></span><br><span class="line"><span class="string">    "_source": ["nickname", "name"]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><p><strong>多字段数据匹配</strong></p><p>在 <code>test</code> 索引中搜索 name 字段或者 nickname 字段中包含 hello 关键字的用户。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/<span class="built_in">test</span>/_search?pretty -H <span class="string">"Content-Type: application/json"</span>  -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "multi_match": &#123;</span></span><br><span class="line"><span class="string">            "query": "hello",</span></span><br><span class="line"><span class="string">            "fields": ["nickname", "name"]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "from": 0,</span></span><br><span class="line"><span class="string">    "size": 3,</span></span><br><span class="line"><span class="string">    "_source": ["nickname", "name"]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><p><strong>前缀数据匹配</strong></p><p>在 <code>test</code> 索引中搜索 nickname.raw 字段中以 will 作为前缀的用户。一般多用于 keyword 类型。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/<span class="built_in">test</span>/_search?pretty -H <span class="string">"Content-Type: application/json"</span>  -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "prefix": &#123;</span></span><br><span class="line"><span class="string">            "nickname.raw": "will"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "from": 0,</span></span><br><span class="line"><span class="string">    "size": 3,</span></span><br><span class="line"><span class="string">    "_source": ["nickname", "name"]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><p><strong>组合搜索</strong></p><p>在 <code>test</code> 索引中搜索 admin 字段等于 1 且 name 字段中包含 will 关键字的用户。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/<span class="built_in">test</span>/_search?pretty -H <span class="string">"Content-Type: application/json"</span>  -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "bool": &#123;</span></span><br><span class="line"><span class="string">            "must": [&#123;</span></span><br><span class="line"><span class="string">                    "match": &#123;</span></span><br><span class="line"><span class="string">                        "name": "will"</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    "term": &#123;</span></span><br><span class="line"><span class="string">                        "admin": 1</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "from": 0,</span></span><br><span class="line"><span class="string">    "size": 3,</span></span><br><span class="line"><span class="string">    "_source": ["nickname", "name", "admin"]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><h5 id="filter-过滤器"><a href="#filter-过滤器" class="headerlink" title="filter 过滤器"></a>filter 过滤器</h5><p>在 <code>test</code> 索引中搜索 admin 字段等于 1 的用户。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/<span class="built_in">test</span>/_search?pretty -H <span class="string">"Content-Type: application/json"</span>  -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "bool": &#123;</span></span><br><span class="line"><span class="string">            "filter": &#123;</span></span><br><span class="line"><span class="string">                "term": &#123;</span></span><br><span class="line"><span class="string">                    "admin": 1</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "from": 0,</span></span><br><span class="line"><span class="string">    "size": 3,</span></span><br><span class="line"><span class="string">    "_source": ["nickname", "name", "admin"]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><p>在 <code>test</code> 索引中搜索 admin 字段等于 1 且 name 字段中包含 will 关键字的用户。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/<span class="built_in">test</span>/_search?pretty -H <span class="string">"Content-Type: application/json"</span>  -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "bool": &#123;</span></span><br><span class="line"><span class="string">            "must": &#123;</span></span><br><span class="line"><span class="string">                "match": &#123;</span></span><br><span class="line"><span class="string">                    "name": "will"</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            "filter": &#123;</span></span><br><span class="line"><span class="string">                "term": &#123;</span></span><br><span class="line"><span class="string">                    "admin": 1</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "from": 0,</span></span><br><span class="line"><span class="string">    "size": 3,</span></span><br><span class="line"><span class="string">    "_source": ["nickname", "name", "admin"]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><h5 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h5><p>由于 filter 过滤器能缓存查询结果，性能更好。如果可能，请使用 filter 过滤器而不是 query 查询。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><strong>索引多类型弃用说明</strong></p><p>一个索引中使用多个类型的文档在6.x 版本仍能使用，但只允许创建一个索引类型，且官方文档均以 <code>_doc</code> 示例，建议使用时与官方保持一致，为每个索引只创建一个名为 <code>_doc</code> 的类型。7.x 版本索引类型被废弃，8.x 版本会完全移除。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收集nginx-ingress-controller的指标</title>
      <link href="/posts/61/"/>
      <url>/posts/61/</url>
      
        <content type="html"><![CDATA[<p>由于k8s集群中已经使用了prometheus-operator部署了prometheus，所以收集nginx-ingress-controller指标只需要编写相应的ServiceMonitor即可。</p><p>示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">http-metrics</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10254</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    release:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="string">http-metrics</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/metrics</span></span><br><span class="line"><span class="attr">    interval:</span> <span class="number">1</span><span class="string">m</span></span><br><span class="line"><span class="attr">    scrapeTimeout:</span> <span class="number">1</span><span class="string">m</span></span><br></pre></td></tr></table></figure><p>编写完成之后即可在prometheus上找到以nginx_ingress_controller为前缀的相关指标。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> ingress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S高可用集群部署</title>
      <link href="/posts/60/"/>
      <url>/posts/60/</url>
      
        <content type="html"><![CDATA[<p>本文主要是介绍部署<code>K8S</code>的<code>1.21</code>版本并配合<code>containerd</code>，实现高可用集群，并更新证书到10年。</p><h3 id="节点说明"><a href="#节点说明" class="headerlink" title="节点说明"></a>节点说明</h3><p>master1: etcd master kube-vip 11.11.11.111<br>master2: etcd master kube-vip 11.11.11.112<br>master3: etcd master kube-vip 11.11.11.113<br>node1: node  11.11.11.114<br>node2: node  11.11.11.115<br>node3: node  11.11.11.116</p><p>vip(loadblancer ip): 11.11.11.110</p><h3 id="配置-yum-源"><a href="#配置-yum-源" class="headerlink" title="配置 yum 源"></a>配置 yum 源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.ori</span><br><span class="line">sudo curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">sudo curl -o /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure><h3 id="安装-containerd"><a href="#安装-containerd" class="headerlink" title="安装 containerd"></a>安装 containerd</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/containerd.conf</span><br><span class="line">overlay</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo modprobe overlay</span><br><span class="line">sudo modprobe br_netfilter</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf</span><br><span class="line">vm.swappiness = 0</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">fs.inotify.max_user_instances = 8192</span><br><span class="line">EOF</span><br><span class="line">sudo sysctl --system</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">sudo yum install -y containerd.io-1.4.9</span><br><span class="line"></span><br><span class="line">sudo mkdir -p /etc/containerd</span><br><span class="line">containerd config default | sudo tee /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line">sudo cp /etc/containerd/config.toml /etc/containerd/config.toml.bak</span><br><span class="line">sudo sed -i <span class="string">'s@\["https://registry-1.docker.io"\]@["https://docker.mirrors.ustc.edu.cn", "https://registry-1.docker.io"]@g'</span> /etc/containerd/config.toml</span><br><span class="line">sudo sed -i <span class="string">'/plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options/a \            SystemdCgroup = true'</span> /etc/containerd/config.toml</span><br><span class="line">sudo sed -i <span class="string">'s@sandbox_image = "k8s.gcr.io/pause:3.2"@sandbox_image = "registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2"@'</span> /etc/containerd/config.toml</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart containerd</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> containerd</span><br></pre></td></tr></table></figure><h3 id="安装-kubeadm"><a href="#安装-kubeadm" class="headerlink" title="安装 kubeadm"></a>安装 kubeadm</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/yum.repos.d/kubernetes.repo &lt;&lt;-<span class="string">'EOF'</span> </span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line">sudo yum install -y kubelet-1.21.4 kubeadm-1.21.4 kubectl-1.21.4 ipvsadm kubernetes-cni-0.8.7</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> kubelet.service</span><br></pre></td></tr></table></figure><h3 id="配置-crictl"><a href="#配置-crictl" class="headerlink" title="配置 crictl"></a>配置 crictl</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/crictl.yaml &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">runtime-endpoint: unix:///var/run/containerd/containerd.sock</span><br><span class="line">image-endpoint: unix:///var/run/containerd/containerd.sock</span><br><span class="line">timeout: 10</span><br><span class="line">debug: <span class="literal">false</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="镜像拉取测试"><a href="#镜像拉取测试" class="headerlink" title="镜像拉取测试"></a>镜像拉取测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo crictl pull busybox</span><br><span class="line">sudo crictl images</span><br></pre></td></tr></table></figure><h3 id="基础环境配置"><a href="#基础环境配置" class="headerlink" title="基础环境配置"></a>基础环境配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">sudo sed -i <span class="string">'s/SELINUX=permissive/SELINUX=disabled/'</span> /etc/sysconfig/selinux</span><br><span class="line">sudo setenforce 0</span><br><span class="line"></span><br><span class="line">sudo swapoff -a</span><br><span class="line">sudo sed -ri <span class="string">'s@(^/.*swap.*)@#\1@g'</span> /etc/fstab</span><br><span class="line">free -m</span><br><span class="line"></span><br><span class="line">sudo modprobe ip_vs</span><br><span class="line">sudo modprobe ip_vs_rr</span><br><span class="line">sudo modprobe ip_vs_wrr</span><br><span class="line">sudo modprobe ip_vs_sh</span><br><span class="line">sudo modprobe nf_conntrack_ipv4</span><br><span class="line">sudo lsmod | grep ip_vs</span><br><span class="line">sudo tee /etc/modules-load.d/k8s-ipvs.conf &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">ip_vs</span><br><span class="line">ip_vs_rr</span><br><span class="line">ip_vs_wrr</span><br><span class="line">ip_vs_sh</span><br><span class="line">nf_conntrack_ipv4</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="配置-kubelet"><a href="#配置-kubelet" class="headerlink" title="配置 kubelet"></a>配置 kubelet</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NODE_IP=$(ip a | grep <span class="string">'11\.'</span> | awk <span class="string">'&#123;print $2&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | head -n 1)</span><br><span class="line">sudo tee /etc/sysconfig/kubelet &lt;&lt;-EOF</span><br><span class="line">KUBELET_EXTRA_ARGS=<span class="string">"--node-ip=<span class="variable">$NODE_IP</span>"</span></span><br><span class="line">EOF</span><br><span class="line">sudo cat /etc/sysconfig/kubelet</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> kubelet.service</span><br></pre></td></tr></table></figure><h3 id="在-master1-节点-配置-kube-vip"><a href="#在-master1-节点-配置-kube-vip" class="headerlink" title="在 master1 节点 配置 kube-vip"></a>在 master1 节点 配置 kube-vip</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">VIP=11.11.11.110</span><br><span class="line">INTERFACE=eth2</span><br><span class="line">sudo ctr image pull docker.io/plndr/kube-vip:v0.3.7</span><br><span class="line">sudo ctr run --rm --net-host docker.io/plndr/kube-vip:v0.3.7 vip \</span><br><span class="line">/kube-vip manifest pod \</span><br><span class="line">--interface <span class="variable">$INTERFACE</span> \</span><br><span class="line">--vip <span class="variable">$VIP</span> \</span><br><span class="line">--controlplane \</span><br><span class="line">--services \</span><br><span class="line">--arp \</span><br><span class="line">--leaderElection | sudo tee /etc/kubernetes/manifests/kube-vip.yaml</span><br></pre></td></tr></table></figure><h3 id="初始化-master1-节点"><a href="#初始化-master1-节点" class="headerlink" title="初始化 master1 节点"></a>初始化 master1 节点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 11.11.11.111</span><br><span class="line">nodeRegistration: </span><br><span class="line">  criSocket: /run/containerd/containerd.sock</span><br><span class="line">---</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.21.4</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">controlPlaneEndpoint: 11.11.11.110:6443</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">controllerManager:</span><br><span class="line">  extraArgs:</span><br><span class="line">    node-monitor-grace-period: 3m</span><br><span class="line">    pod-eviction-timeout: 30s</span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">dns:</span><br><span class="line">  imageRepository: coredns</span><br><span class="line">  imageTag: 1.8.0</span><br><span class="line">---</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">mode: ipvs</span><br><span class="line">ipvs:</span><br><span class="line">  strictARP: <span class="literal">true</span></span><br><span class="line">---</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">cgroupDriver: systemd</span><br><span class="line">systemReserved:</span><br><span class="line">  cpu: <span class="string">"500m"</span></span><br><span class="line">  memory: <span class="string">"1Gi"</span></span><br><span class="line">  ephemeral-storage: <span class="string">"1Gi"</span></span><br><span class="line">kubeReserved:</span><br><span class="line">  cpu: <span class="string">"1"</span></span><br><span class="line">  memory: <span class="string">"2Gi"</span></span><br><span class="line">  ephemeral-storage: <span class="string">"1Gi"</span></span><br><span class="line">evictionHard:</span><br><span class="line">  memory.available: <span class="string">"500Mi"</span></span><br><span class="line">  nodefs.available: <span class="string">"10%"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo kubeadm config images pull --config kubeadm-master.config</span><br><span class="line">sudo kubeadm init --config kubeadm-master.config --upload-certs</span><br></pre></td></tr></table></figure><h3 id="配置-kubectl"><a href="#配置-kubectl" class="headerlink" title="配置 kubectl"></a>配置 kubectl</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="variable">$HOME</span>/.kube</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><h3 id="加入-master-2-and-3"><a href="#加入-master-2-and-3" class="headerlink" title="加入 master 2 and 3"></a>加入 master 2 and 3</h3><h1 id="注意：如果节点有多个IP-–apiserver-advertise-address-参数不可缺少"><a href="#注意：如果节点有多个IP-–apiserver-advertise-address-参数不可缺少" class="headerlink" title="注意：如果节点有多个IP –apiserver-advertise-address 参数不可缺少"></a>注意：如果节点有多个IP –apiserver-advertise-address 参数不可缺少</h1><p>sudo kubeadm join … –apiserver-advertise-address 11.11.11.112</p><h3 id="在-master2-和-master3-节点配置-kube-vip"><a href="#在-master2-和-master3-节点配置-kube-vip" class="headerlink" title="在 master2 和 master3 节点配置 kube-vip"></a>在 master2 和 master3 节点配置 kube-vip</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">VIP=11.11.11.110</span><br><span class="line">INTERFACE=eth2</span><br><span class="line">sudo ctr image pull docker.io/plndr/kube-vip:v0.3.7</span><br><span class="line">sudo ctr run --rm --net-host docker.io/plndr/kube-vip:v0.3.7 vip \</span><br><span class="line">/kube-vip manifest pod \</span><br><span class="line">--interface <span class="variable">$INTERFACE</span> \</span><br><span class="line">--vip <span class="variable">$VIP</span> \</span><br><span class="line">--controlplane \</span><br><span class="line">--services \</span><br><span class="line">--arp \</span><br><span class="line">--leaderElection | sudo tee /etc/kubernetes/manifests/kube-vip.yaml</span><br></pre></td></tr></table></figure><h3 id="加入-worker-node"><a href="#加入-worker-node" class="headerlink" title="加入 worker node"></a>加入 worker node</h3><p>sudo kubeadm join …</p><h3 id="部署-flannel-网络组件"><a href="#部署-flannel-网络组件" class="headerlink" title="部署 flannel 网络组件"></a>部署 flannel 网络组件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://raw.githubusercontent.com/mgxian/k8s-addons/v0.3/kube-flannel/kube-flannel.yaml -o kube-flannel.yaml</span><br><span class="line">sed -i <span class="string">"/--kube-subnet-mgr/a \            - --iface=eth2"</span> kube-flannel.yaml</span><br><span class="line">kubectl apply -f kube-flannel.yaml</span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure><h3 id="部署-metallb"><a href="#部署-metallb" class="headerlink" title="部署 metallb"></a>部署 metallb</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;metallb-config.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  namespace: metallb-system</span><br><span class="line">  name: config</span><br><span class="line">data:</span><br><span class="line">  config: |</span><br><span class="line">    address-pools:</span><br><span class="line">    - name: default</span><br><span class="line">      protocol: layer2</span><br><span class="line">      addresses:</span><br><span class="line">      - 10.186.70.151-10.186.70.200</span><br><span class="line">    - name: nginx-ingress</span><br><span class="line">      protocol: layer2</span><br><span class="line">      addresses:</span><br><span class="line">      - 10.186.70.150/32</span><br><span class="line">EOF</span><br><span class="line">curl -s https://raw.githubusercontent.com/mgxian/k8s-addons/v0.3/metallb/metallb.yaml -o metallb.yaml</span><br><span class="line">kubectl apply -f metallb.yaml</span><br><span class="line">kubectl apply -f metallb-config.yaml</span><br><span class="line">kubectl get pod -n metallb-system</span><br></pre></td></tr></table></figure><h3 id="部署-nginx-ingress-controller"><a href="#部署-nginx-ingress-controller" class="headerlink" title="部署 nginx ingress controller"></a>部署 nginx ingress controller</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://raw.githubusercontent.com/mgxian/k8s-addons/v0.3/ingress-nginx/ingress-nginx.yaml -o ingress-nginx.yaml</span><br><span class="line">kubectl apply -f ingress-nginx.yaml</span><br><span class="line">kubectl get pod -n ingress-nginx</span><br><span class="line">kubectl get svc -n ingress-nginx</span><br></pre></td></tr></table></figure><h3 id="测试-k8s-cluster"><a href="#测试-k8s-cluster" class="headerlink" title="测试 k8s cluster"></a>测试 k8s cluster</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment nginx --image=nginx:alpine</span><br><span class="line">kubectl expose deployment nginx --name=nginx-service --port=80 --target-port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=nginx-service-nodeport --port=80 --target-port=80</span><br><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line">cat &gt;dns-test.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: dns-test</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: radial/busyboxplus:curl</span><br><span class="line">    name: dns-test</span><br><span class="line">    stdin: <span class="literal">true</span></span><br><span class="line">    tty: <span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f dns-test.yaml</span><br><span class="line">kubectl get pod</span><br><span class="line"></span><br><span class="line">kubectl <span class="built_in">exec</span> dns-test -- nslookup kubernetes</span><br><span class="line">kubectl <span class="built_in">exec</span> dns-test -- nslookup nginx-service</span><br><span class="line">kubectl <span class="built_in">exec</span> dns-test -- nslookup www.baidu.com</span><br><span class="line">kubectl <span class="built_in">exec</span> dns-test -- curl -s -I www.baidu.com</span><br><span class="line">kubectl <span class="built_in">exec</span> dns-test -- curl -s -I nginx-service</span><br><span class="line"></span><br><span class="line">cat &gt;ingress-test.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-test</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: ingress.test.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: nginx-service</span><br><span class="line">            port:</span><br><span class="line">              number: 80</span><br><span class="line">        path: /</span><br><span class="line">        pathType: ImplementationSpecific</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f ingress-test.yaml</span><br><span class="line">kubectl get ingress</span><br><span class="line"></span><br><span class="line">curl 10.186.70.150:80</span><br><span class="line">curl -H <span class="string">"Host: ingress.test.com"</span> 10.186.70.150:80</span><br></pre></td></tr></table></figure><h3 id="清理测试"><a href="#清理测试" class="headerlink" title="清理测试"></a>清理测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete deployment nginx</span><br><span class="line">kubectl delete service nginx-service</span><br><span class="line">kubectl delete service nginx-service-nodeport</span><br><span class="line">kubectl delete -f ingress-test.yaml</span><br><span class="line">kubectl delete -f dns-test.yaml</span><br></pre></td></tr></table></figure><h3 id="延长证书到10年"><a href="#延长证书到10年" class="headerlink" title="延长证书到10年"></a>延长证书到10年</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：以下命令使用 root 用户执行，并配置好 root 用户的 kubectl 配置文件</span></span><br><span class="line"><span class="comment"># 链接: https://pan.baidu.com/s/1co8g8fNUidncpc46s9uD2A 提取码: z867</span></span><br><span class="line">rm -rf <span class="variable">$HOME</span>/.kube</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod +x sealos k8s-certs-renew.sh</span><br><span class="line">bash k8s-certs-renew.sh 11.11.11.110:6443 <span class="string">"11.11.11.110"</span></span><br><span class="line">bash -c <span class="string">'for f in `ls /etc/kubernetes/pki/*.crt`;do openssl x509 -noout -text -in $f | grep "Not After";done'</span></span><br><span class="line">bash -c <span class="string">'for f in `ls /etc/kubernetes/pki/etcd/*.crt`;do openssl x509 -noout -text -in $f | grep "Not After";done'</span></span><br><span class="line">bash -c <span class="string">'for f in `ls /etc/kubernetes/*.conf`;do grep server $f;done'</span></span><br></pre></td></tr></table></figure><h3 id="更新完成后重新设置-kubectl"><a href="#更新完成后重新设置-kubectl" class="headerlink" title="更新完成后重新设置 kubectl"></a>更新完成后重新设置 kubectl</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="variable">$HOME</span>/.kube</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> containerd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构整洁之道笔记</title>
      <link href="/posts/64/"/>
      <url>/posts/64/</url>
      
        <content type="html"><![CDATA[<ul><li>软件架构的终极目标是，用最小的人力成本来满足构建和维护系统的需求。</li><li>编程范式<ul><li>结构化编程<ul><li>goto 有害</li><li>功能性降解拆分</li><li>结构化编程对程序控制权的直接转移进行了限制和规范</li></ul></li><li>面向对象编程<ul><li>限制函数指针的使用</li><li>封装，继承，多态</li><li>面向对象编程对程序控制权的间接转移进行了限制和规范</li></ul></li><li>函数式编程<ul><li>没有赋值语句</li><li>函数式编程对程序中的赋值进行了限制和规范<a id="more"></a></li></ul></li></ul></li><li>设计原则<ul><li>SOLID<ul><li>SRP (Signle Responsibility Principle) 单一职责原则<ul><li>任何一个软件模块都应该只对某一类行为者负责</li></ul></li><li>OCP (Open Closed Principle) 开闭原则<ul><li>设计良好的计算机软件应该易于扩展，同时抗拒修改</li><li>设计原则的终极目标</li><li>财务报告示例<ul><li>职责划分<img src="https://api2.mubu.com/v3/document_image/9f1eb91b-871f-4d36-a4b3-e8d8a922774c-156946.jpg" alt=""></li><li>组件划分 <img src="https://api2.mubu.com/v3/document_image/d0d0ade4-b17f-4cc3-91f7-f021c7e9cd62-156946.jpg" alt=""></li><li>组件依赖关系<img src="https://api2.mubu.com/v3/document_image/750cb35e-a9bb-419b-900a-d4a53fd945ce-156946.jpg" alt=""></li></ul></li></ul></li><li>LSP (Liskov Substitution Principle) 里式替换原则<img src="https://api2.mubu.com/v3/document_image/64be66be-1a4a-4713-8c2b-14b77c676c66-156946.jpg" alt=""><ul><li>继承的使用指导</li><li>类/接口的不同子类对象/实现应该可以相互替换，而调用方不用做修改</li></ul></li><li>ISP (Interface Segregation Principle) 接口隔离原则<img src="https://api2.mubu.com/v3/document_image/4a561a0e-5cc8-4d34-8eee-4163545e39aa-156946.jpg" alt=""><ul><li>客户端不应该依赖它不需要的接口，一个类对另一个类的依赖应该建立在最小的接口上</li></ul></li><li>DIP (Dependency Inversion Principle) 依赖反转原则<ul><li>稳定的抽象层<ul><li>应在代码中多使用抽象接口，尽量避免使用那些多变的具体实现类</li><li>不要在具体实现类上创建衍生类</li><li>不要覆盖包含具体实现的函数</li><li>应避免在代码中写入任何具体实现相关的名字，或者是其他容易变动的事物的名字</li></ul></li><li>工厂模式<img src="https://api2.mubu.com/v3/document_image/351aeeff-0bef-490d-bf1f-f1ade9a951df-156946.jpg" alt=""></li></ul></li></ul></li></ul></li><li>组件构建原则<ul><li>组件聚合<ul><li>REP 复用/发布等同原则<ul><li>软件复用的最小粒度应等同于其发布的最小粒度</li><li>组件中的类与模块必须是彼此紧密相关的</li><li>组件中包含的类与模块还应该是可以同时发布的</li></ul></li><li>CCP 共同闭包原则<ul><li>应该将同时修改，为了相同目的而修改的类放到同一个组件中</li></ul></li><li>CRP 共同复用原则<ul><li>不要强迫一个组件的用户依赖他们不需要的东西</li></ul></li><li>三原则张力图<img src="https://api2.mubu.com/v3/document_image/2ebfd785-a8c6-4e61-ac47-e735e2bdc4c8-156946.jpg" alt=""></li></ul></li><li>组件耦合<ul><li>无依赖环原则<ul><li>组件依赖关系图中不应该出现环</li><li>典型的组件结构图<img src="https://api2.mubu.com/v3/document_image/f432adcd-7284-47c8-94d6-cc9b852ed347-156946.jpg" alt=""></li><li>打破循环依赖<ul><li>存在依赖环的组件图<img src="https://api2.mubu.com/v3/document_image/df0f5227-a7e3-4800-850e-8814410458e6-156946.jpg" alt=""></li><li>应用依赖反转原则<img src="https://api2.mubu.com/v3/document_image/1f4d4914-b37b-4a8d-8f06-1fe691b1537c-156946.jpg" alt=""></li><li>创建一个新组件<img src="https://api2.mubu.com/v3/document_image/a68bd7a5-b37d-47a6-9833-92ca43ee2405-156946.jpg" alt=""></li></ul></li></ul></li><li>稳定依赖原则<ul><li>依赖关系必须要指向更稳定的方向</li><li>稳定性指标<ul><li>Fan-in: 入向依赖，组件外部类依赖于组件内部类的数量</li><li>Fan-out: 出向依赖，组件内部类依赖于组件外部类的数量</li><li>I: 不稳定性 I = Fan-out / ( Fan-out + Fan-in )</li></ul></li><li>稳定依赖原则（ SDP ）的要求是让每个组件的 I 指标都必须大于其所依赖组件的 I 指标。也就是说，组件结构依赖图中各组件的 I 指标必须要按其依赖关系方向递减。</li><li>解决违反稳定依赖原则的情况<ul><li>违反稳定依赖原则的情况<img src="https://api2.mubu.com/v3/document_image/6a321fa8-2113-4d1e-87ed-f790ee7019cf-156946.jpg" alt=""></li><li>使用 DIP 原则解决<img src="https://api2.mubu.com/v3/document_image/d8b94cff-e092-46b9-bb96-29504280659c-156946.jpg" alt=""></li></ul></li></ul></li><li>稳定抽象原则<ul><li>一个组件的抽象化程度应该与其稳定性保持一致</li><li>稳定的组件应该是抽象的，不稳定的组件应该包含具体的实现代码，如果一个组件想要成为稳定组件，那么它就应该由接口和抽象类组成，以便将来做扩展</li><li>衡量抽象化程度<ul><li>Nc: 组件中类的数量</li><li>Na: 组件中抽象类和接口的数量</li><li>A: 抽象程度 A = Na / Nc</li></ul></li></ul></li><li>排除区<img src="https://api2.mubu.com/v3/document_image/e941b602-3691-4325-9787-952e09c2709b-156946.jpg" alt=""></li><li>离主序列线的距离<ul><li>D 指标： 距离D=I A +I - 1 I</li><li>对于一个良好的系统设计来说， D 指标的平均值和方差都应该接近于0</li></ul></li></ul></li></ul></li><li>软件架构<ul><li>设计软件架构的目的，就是为了在工作中更好地对这些组件进行研发、部署、运行以及维护</li><li>如果想设计一个便于推进各项工作的系统，其策略就是要在设计中尽可能长时间地保留尽可能多的可选项<ul><li>软件架构师的目标是创建一种系统形态，该形态会以策略为最基本的元素，并让细节与策略脱离，以允许在具体决策过程中推迟或延迟与细节相关的内容。举例如下：<ul><li>开发早期应该无须选择数据库系统，高层策略并不关心底层是什么数据库</li><li>开发早期也不应该选定使用的 Web 服务，高层策略不应该知道自己未来以网页形式发布</li><li>开发早期也不应该过早的使用 REST 模式，高层策略应该与外部接口无关，同样也不应该过早考虑微服务框架、SOA框架等</li><li>开发早期不应该过早地采用依赖注入框架，高层策略不应该操心如何解析系统的依赖关系</li></ul></li><li>一个优秀的软件架构师应该致力于最大化可选数量</li></ul></li><li>解耦<ul><li>按层解耦（水平切分）<ul><li>UI</li><li>业务逻辑</li><li>数据库</li></ul></li><li>用例解耦（垂直切分）<ul><li>增加订单</li><li>删除订单</li></ul></li></ul></li><li>划分边界<ul><li>边界线应该画在那些不相关的事情中问。GUI 与业务逻辑无关，所以两者之间应该有一条边界线。数据库与GUI 无关，这两者之间也应该有一条边界线。数据库又与业务逻辑无关，所以两者之间也应该有一条边界线。</li><li>数据库与业务逻辑边界<img src="https://api2.mubu.com/v3/document_image/98878366-9148-46ad-b1c4-2dd49fc7db7b-156946.jpg" alt=""></li><li>业务逻辑组件与数据库组件关系<img src="https://api2.mubu.com/v3/document_image/29746293-0ff7-4f85-850a-5592c32bf318-156946.jpg" alt=""><ul><li>数据库组件依赖于业务逻辑组件</li></ul></li><li>GUI 与业务逻辑组件的边界线<img src="https://api2.mubu.com/v3/document_image/b3411452-c91e-4016-a385-f9c2b58e9f95-156946.jpg" alt=""><ul><li>GUI 依赖业务逻辑组件</li></ul></li><li>插件式架构<img src="https://api2.mubu.com/v3/document_image/6e474703-e74f-4b7c-a49d-17775140a10a-156946.jpg" alt=""><ul><li>系统的核心业务逻辑必须和其他组件隔离，保持独立，而这些其他组件要么是可以去掉的， 要么是有多种实现的</li></ul></li></ul></li><li>跨边界调用<ul><li>低层客户端来调用高层服务函数<img src="https://api2.mubu.com/v3/document_image/617aea50-ffee-4f04-b5eb-e9bb324b61e6-156946.jpg" alt=""></li><li>高层组件中的客户端需要调用低层组件中的服务<img src="https://api2.mubu.com/v3/document_image/6e96a646-4a41-4770-8dac-5885bc0ce190-156946.jpg" alt=""></li></ul></li><li>策略与层次<ul><li>层次（Level)<ul><li>一条策略距离系统的输入／输出越远，它所属的层次就越高。而直接管理输入／输出的策略在系统中的层次是最低的。</li><li>示例程序<img src="https://api2.mubu.com/v3/document_image/82564c73-32bc-40ce-beb1-02a4fc8129a2-156946.jpg" alt=""><ul><li>程序从输入设备读取字符，然后用查表法转换这些字符，并将转换后的字符输出到输出设备</li><li>不正确的架构设计<img src="https://api2.mubu.com/v3/document_image/4f60d33d-5f79-43f1-be2c-88c8a944989d-156946.jpg" alt=""><ul><li>上面这个程序架构设计的错误在于，它让高层组件中的函数 encrypt() 依赖于低层组件中的函数 readChar() 与 writeChar()</li></ul></li><li>更好的系统架构设计<img src="https://api2.mubu.com/v3/document_image/d0870a66-7988-42e5-bc55-d56bed74f16d-156946.jpg" alt=""><ul><li>被虚线框起来的 Encrypt 类及其两个接口 CharReader 和 CharWriter 。所有的依赖关系都指向了边界内部。这一切都说明它是该系统中最高层次的组件。</li><li>ConsoleReader 和 ConsoleWriter 都属于具体类。由于它们与输入／输出最近，因此属于低层组件。</li></ul></li></ul></li><li>低层组件应该成为高层组件的插件<img src="https://api2.mubu.com/v3/document_image/6883cd36-fed4-4a7d-a85e-f8713ed9a624-156946.jpg" alt=""></li></ul></li></ul></li><li>业务逻辑<ul><li>我们可以把应用程序划分为业务逻辑和插件两部分</li><li>业务逻辑就是程序中那些真正用于赚钱或省钱的业务逻辑与过程无论这些业务逻辑是在计算机上实现的，还是人工执行的，它们在省钱／赚钱上的作用都是一样的。<ul><li>关键业务逻辑：它们是一项业务的关键部分，不管有没有自动化系统来执行这项业务，这一点是不会改变的。</li><li>关键业务数据：“关键业务逻辑”通常会需要处理一些数据</li></ul></li><li>业务实体（ Entity ）<ul><li>关键业务逻辑和关键业务数据是紧密相关的，所以它们很适合被放在同一个对象中处理。我们将这种对象称为“业务实体（ Entity ）”</li><li>业务实体实际上就是计算机系统中的一种对象，这种对象中包含了一系列用于操作关键数据的业务逻辑</li><li>业务实体的接口层则是由那些实现关键业务逻辑、操作关键业务数据的函数组成的</li><li>借贷业务的实体类 Loan 的 UML 图<img src="https://api2.mubu.com/v3/document_image/e28a4cd9-6af1-410a-896c-73b3446b7b78-156946.jpg" alt=""></li><li>业务实体并不一定是以类形式展现，业务实体不一定非要用面向对象编程语言的类来实现。业务实体这个概念只要求我们将关键业务数据和关键业务逻辑绑定在一个独立的软件模块内</li></ul></li><li>用例<ul><li>用例所描述的是某种特定应用情景下的业务逻辑，它并非业务实体中所包含的关键业务逻辑。</li><li>用例本质上就是关于如何操作一个自动化系统的描述，它定义了用户需要提供的输入数据、用户应该得到的输出信息以及产生输出所应该采取的处理步骤。</li><li>用例示范<img src="https://api2.mubu.com/v3/document_image/4f16b61e-1a10-40ca-b78d-87562851cde2-156946.jpg" alt=""></li><li>简而言之，用例控制着业务实体之间的交互方式。</li><li>用例并不描述系统与用户之间的接口，它只描述该应用在某些特定情景下的业务逻辑，这些业务逻辑所规范的是用户与业务实体之间的交互方式，它与数据流入／流出系统的方式无关。</li><li>用例依赖于业务实体，而业务实体并不依赖于用例。</li></ul></li></ul></li><li>尖叫的软件架构<ul><li>一个系统的架构应该着重于展示系统本身的设计，而并非该系统所使用的框架。<ul><li>如果我们要构建的是一个医疗系统，新来的程序员第一次看到其源码和目录时就应该知道这是一个医疗系统。</li><li>新来的程序员应该先了解该系统的用例，而非系统的交付方式。</li></ul></li><li>一个良好的架构设计应该围绕着用例来展开， 这样的架构设计可以在脱离框架、工具以及使用环境的情况下完整地描述用例。</li><li>良好的架构设计应该尽可能地允许用户推迟和延后决定采用什么框架、数据库、Web 服务以及其他与环境相关的工具。框架应该是一个可选项， 良好的架构设计应该允许用户在项目后期再决定是否采用 Rails 、Spring 、Hibernate 、Tomcat 、MySQL 这些工具。同时，良好的架构设计还应该让我们很容易改变这些决定。总之，良好的架构设计应该只关注用例，并能将它们与其他的周边因素隔离。</li><li>Web 只是一种交付手段–一种 IO 设备一一这就是它在应用程序的架构设计中的角色。换句话说，应用程序采用 Web 方式来交付只是一个实现细节，这不应该主导整个项目的结构设计。事实上， 关于一个应用程序是否应该以 Web 形式来交付这件事，它本身就应该是一个被推迟和延后的决策。一个系统应该尽量保持它与交付方式之间的无关性。在不更改基础架构设计的情况下，我们应该可以将一个应用程序交付成命令行程序、Web 程序、富客户端程序、Web 服务程序等任何一种形式的程序。</li><li>框架是工具而不是生活信条，我们需要仔细考虑如何能保持对系统用例的关注，避免让框架主导我们的架构设计。</li><li>我们测试的应该只是一个简单的业务实体对象，没有任何与框架、数据库相关的依赖关系。总而言之，我们应该通过用例对象来调度业务实体对象，确保所有的测试都不需要依赖框架。</li></ul></li><li>整洁架构<ul><li>架构图<img src="https://api2.mubu.com/v3/document_image/5d61e1cd-4258-4d06-b900-fe4ab052979b-156946.jpg" alt=""><ul><li>独立于框架：这些系统的架构并不依赖某个功能丰富的框架之中的某个函数。框架可以被当成工具来使用，但不需要让系统来适应框架。</li><li>可被测试： 这些系统的业务逻辑可以脱离 UI 、数据库、Web 服务以及其他的外部元素来进行测试。</li><li>独立于 UI：这些系统的 UI 变更起来很容易，不需要修改其他的系统部分。例如，我们可以在不修改业务逻辑的前提下将一个系统的 UI 由 Web 界面替换成命令行界面。</li><li>独立于数据库：我们可以轻易将这些系统使用的 Oracle 、SQL Server 替换成 Mongo 、BigTable 、CouchDB 之类的数据库。因为业务逻辑与数据库之间已经完成了解耦。</li><li>独立于任何外部机构：这些系统的业务逻辑并不需要知道任何其他外部接口的存在。</li></ul></li><li>依赖关系规则<ul><li>源码中的依赖关系必须只指向同心圆的内层， 即由低层机制指向高层策略。换句话说， 就是任何属于内层圆中的代码都不应该牵涉外层圆中的代码，尤其是内层圆中的代码不应该引用外层圆中代码所声明的名字，包括函数、类、变量以及一切其他有命名的软件实体。外层圆中使用的数据格式也不应该被内层圆中的代码所使用，尤其是当数据格式是由外层圆的框架所生成时。总之，我们不应该让外层圆中发生的任何变更影响到内层圆的代码。</li><li>业务实体<ul><li>业务实体这一层中封装的是整个系统的关键业务逻辑， 一个业务实体既可以是一个带有方法的对象，也可以是一组数据结构和函数的集合。无论如何，只要它能被系统中的其他不同应用复用就可以。</li></ul></li><li>用例<ul><li>软件的用例层中通常包含的是特定应用场景下的业务逻辑，这里面封装并实现了整个系统的所有用例。这些用例引导了数据在业务实体之间的流入／流出，并指挥着业务实体利用其中的关键业务逻辑来实现用例的设计目标。</li></ul></li><li>接口适配器<ul><li>软件的接口适配器层中通常是一组数据转换器，它们负责将数据从对用例和业务实体而言最方便操作的格式，转化成外部系统（譬如数据库以及 Web ）最方便操作的格式。</li><li>例如，这一层中应该包含整个 GUI MVC 框架。展示器、视图、控制器都应该属于接口适配器层。而模型部分则应该由控制器传递给用例，再由用例传回展示器和视图。</li><li>这一层的代码也会负责将来自外部服务的数据转换成系统内用例与业务实体所需的格式。</li></ul></li><li>框架与驱动程序<ul><li>最外层的模型层一般是由工具、数据库、Web 框架等组成的。在这一层中，我们通常只需要编写一些与内层沟通的黏合性代码。</li><li>框架与驱动程序层中包含了所有的实现细节。Web 是一个实现细节，数据库也是一个实现细节。</li></ul></li><li>不只四层<ul><li>同心圆只是为了说明架构的结构，真正的架构很可能会超过四层。并没有某个规则约定一个系统的架构有且只能有四层。</li><li>层次越往内，其抽象和策略的层次越高， 同时软件的抽象程度就越高，其包含的高层策略就越多。最内层的圆中包含的是最通用、最高层的策略，最外层的圆包含的是最具体的实现细节。</li></ul></li><li>跨越边界调用<ul><li>依赖反转原则</li></ul></li><li>跨越边界的数据<ul><li>跨边界传输的对象应该有一个独立、简单的数据结构。总之，不要投机取巧地直接传递业务实体或数据库记录对象。同时，这些传递的数据结构中也不应该存在违反依赖规则的依赖关系。</li><li>当我们进行跨边界传输时， 一定要采用内层最方便使用的形式。</li></ul></li></ul></li><li>应用场景示例<ul><li>架构设计图<img src="https://api2.mubu.com/v3/document_image/dfce1ec4-0198-4b83-b645-bc6cf0da59cd-156946.jpg" alt=""></li><li>架构描述<img src="https://api2.mubu.com/v3/document_image/4ec97675-c6fc-4ccb-89d3-62d95c213c02-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/27016a1d-3b02-4bb1-89da-51218b76d775-156946.jpg" alt=""></li><li>所有跨边界的依赖线都是指向内的，这很好地遵守了架构的依赖关系规则。</li></ul></li></ul></li><li>展示器和谦卑对象<ul><li>谦卑对象模式<ul><li>谦卑对象模式最初的设计目的是帮助单元测试的编写者区分容易测试的行为与难以测试的行为，并将它们隔离。其设计思路非常简单，就是将这两类行为拆分成两组模块或类。其中一组模块被称为谦卑（Humble）组，包含了系统中所有难以测试的行为，而这些行为已经被简化到不能再简化了。另一组模块则包含了所有不属于谦卑对象的行为。</li><li>例如，GUI 通常是很难进行单元测试的，因为让计算机自行检视屏幕内容，并检查指定元素是否出现是非常难的事情。然而，GUI 中的大部分行为实际上是很容易被测试的。这时候，我们就可以利用谦卑对象模式将 GUI 的这两种行为拆分成展示器与视图两部分。</li></ul></li><li>展示器与视图<ul><li>视图部分属于难以测试的谦卑对象。这种对象的代码通常应该越简单越好，它只应负责将数据填充到 GUI 上，而不应该对数据进行任何处理。</li><li>展示器则是可测试的对象。展示器的工作是负责从应用程序中接收数据，然后按视图的需要将这些数据格式化，以便视图将其呈现在屏幕上。</li><li>例子<ul><li>如果应用程序需要在屏幕上展示一个日期，那么它传递给展示器的应该是一个 Date 对象。然后展示器会将该对象格式化成所需的字符串形式，并将其填充到视图模型中。</li><li>如果应用程序需要在屏幕上展示金额，那么它应该将 Currency 对象传递给展示器。展示器随后会将这个对象按所需的小数位数进行格式化，并加上对应的货币标识符，形成一个字符串存放在视图模型中。如果需要将负数金额显示成红色，那么该视图模型中就应该有一个简单的布尔值被恰当地设置。</li></ul></li></ul></li><li>应用程序在屏幕上的每个按钮都应该有其对应的名称，这些名称也是由展示器在视图模型中设置的。如果某个按钮需要变灰，展示器就应该将相应的开关变量设置成对应的布尔值。同样，菜单中每个菜单项所显示的值，也应该是一个个由展示器加载到视图模型中的字符串。应用程序在屏幕上显示的每个单选项、多选项以及文本框的名字也都如此，在视图模型中都有相应的字符串和布尔值可供展示器做对应的设置。</li><li>总而言之，应用程序所能控制的、要在屏幕上显示的一切东西，都应该在视图模型中以字符串、布尔值或枚举值的形式存在。然后，视图部分除了加载视图模型所需要的值，不应该再做任何其他事情。因此，我们才能说视图是谦卑对象。</li><li>测试与架构<ul><li>谦卑对象模式就是这方面的一个非常好的例子。我们将系统行为分割成可测试和不可测试两部分的过程常常就也定义了系统的架构边界。</li></ul></li><li>数据库网关<ul><li>对于用例交互器（interactor）与数据库中间的组件，我们通常称之为数据库网关。这些数据库网关本身是一个多态接口，包含了应用程序在数据库上所要执行的创建、读取、更新、删除等所有操作。</li><li>例子<ul><li>如果应用程序需要知道所有昨天登录系统的用户的姓， 那么 UserGateway 接口就应该包含一个 getLastNamesOfUsersWhoLoggedinAfter 方法，接收一个Date 参数，并返回一个包含姓的列表。</li></ul></li><li>Hibernate 这类的 ORM 框架属于数据库层，ORM 其实就是在数据库和数据库网关接口之间构建了另一种谦卑对象的边界。</li></ul></li><li>在每个系统架构的边界处，都有可能发现谦卑对象模式的存在。因为跨边界的通信肯定需要用到某种简单的数据结构，而边界会自然而然地将系统分割成难以测试的部分与容易测试的部分，所以通过在系统的边界处运用谦卑对象模式， 我们可以大幅地提高整个系统的可测试性。</li></ul></li><li>不完全边界<ul><li>构建完整的架构边界是一件很耗费成本的事。在这个过程中，需要为系统设计双向的多态边界接口，用于输入和输出的数据结构，以及所有相关的依赖关系管理，以便将系统分割成可独立编译与部署的组件。这里会涉及大量的前期工作，以及大量的后期维护工作。</li><li>在很多情况下， 一位优秀的架构师都会认为设计架构边界的成本太高了一一 但为了应对将来可能的需要，通常还是希望预留一个边界。</li><li>省掉最后一步<ul><li>构建不完全边界的一种方式就是在将系统分割成一系列可以独立编译、独立部署的组件之后，再把它们构建成一个组件。换句话说，在将系统中所有的接口、用于输入／输出的数据格式等每一件事都设置好之后，仍选择将它们统一编译和部署为一个组件。这省去了多组件管理这部分的工作，这就等于省去了版本号管理和发布管理方面的工作。</li></ul></li><li>单向边界<ul><li>在设计一套完整的系统架构边界时，往往需要用反向接口来维护边界两侧组件的隔离性。而且， 维护这种双向的隔离性，通常不会是一次性的工作，它需要我们持续地长期投入资源维护下去。</li><li>示例<img src="https://api2.mubu.com/v3/document_image/8dc199e0-7b95-4394-a432-570da143dc3f-156946.jpg" alt=""><ul><li>你会看到一个临时占位的，将来可被替换成完整架构边界的更简单的结构。这个结构采用了传统的策略模式（strategy pattern）。如你所见，其 Client 使用的是一个由 Serviceimpl 类实现的 ServiceBoundary 接口。</li><li>上述设计为未来构建完整的系统架构边界打下了坚实基础。为了未来将 Client 与 Serviceimpl 隔离，必要的依赖反转己经做完了。</li></ul></li></ul></li><li>门户模式<ul><li>一个更简单的架构边界设计： 采用门户模式（facade pattern）</li><li>在这种模式下，我们连依赖反转的工作都可以省了</li><li>示例<img src="https://api2.mubu.com/v3/document_image/2d71ae8c-a6e1-463d-b261-76c82c49da2b-156946.jpg" alt=""><ul><li>需要注意的是，在该设计中， Client 会传递性地依赖于所有的 Service 类。在静态类型语言中，这就意味着对 Service 类的源码所做的任何修改都会导致 Client 的重新编译。</li></ul></li></ul></li></ul></li><li>层次与边界<ul><li>游戏架构设计示例<img src="https://api2.mubu.com/v3/document_image/d5b78f08-d3ee-458d-9d8f-00a027fa3104-156946.jpg" alt=""></li><li>修正后的架构设计<img src="https://api2.mubu.com/v3/document_image/d92ffb63-b980-4077-bcf8-9c097896d02b-156946.jpg" alt=""></li><li>简化版设计图<img src="https://api2.mubu.com/v3/document_image/1bbea9a2-0b9d-47df-b809-e8dc2e98611f-156946.jpg" alt=""><ul><li>说明<img src="https://api2.mubu.com/v3/document_image/3864cdd4-b1c1-4f9a-ba97-6ccc847aa0cf-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/91da9c12-de68-4ccf-8761-3e4a2d93a226-156946.jpg" alt=""></li></ul></li><li>交汇数据流<img src="https://api2.mubu.com/v3/document_image/253e3f65-c58d-483e-909f-b136ce825aae-156946.jpg" alt=""></li><li>数据流的分隔<img src="https://api2.mubu.com/v3/document_image/4087ac29-6bfb-4f26-b2eb-3d55f91e12ee-156946.jpg" alt=""></li><li>添加一个微服务的 API<img src="https://api2.mubu.com/v3/document_image/22811a26-49f4-4431-bf61-3308d8509c8f-156946.jpg" alt=""></li></ul></li><li>Main 组件<ul><li>在所有的系统中，都至少要有一个组件来负责创建、协调、监督其他组件的运转。我们将其称为Main 组件。</li><li>最细节化的部分<ul><li>Main 组件是系统中最细节化的部分一一也就是底层的策略，它是整个系统的初始点。在整个系统中，除了操作系统不会再有其他组件依赖于它了。Main 组件的任务是创建所有的工厂类、策略类以及其他的全局设施， 并最终将系统的控制权转交给最高抽象层的代码来处理。</li><li>Main 组件中的依赖关系通常应该由依赖注入框架来注入。在该框架将依赖关系注入到 Main 组件之后， Main 组件就应该可以在不依赖于该框架的情况下自行分配这些依赖关系了。</li><li>请记住， Main 组件是整个系统中细节信息最多的组件。</li></ul></li></ul></li><li>服务化<ul><li>虽然服务化可能有助于提升系统的可扩展性和可研发性，但服务本身却并不能代表整个系统的架构设计。系统的架构是由系统内部的架构边界， 以及边界之间的依赖关系所定义的，与系统中各组件之间的调用和通信方式无关。</li><li>一个服务可能是一个独立组件，以系统架构边界的形式隔开。一个服务也可能由几个组件组成，其中的组件以架构边界的形式互相隔离。</li><li>架构设计的任务就是找到高层策略与低层细节之间的架构边界，同时保证这些边界遵守依赖关系规则。所谓的服务本身只是一种比函数调用方式成本稍高的，分割应用程序行为的一种形式，与系统架构无关。</li><li>关于服务化能带来好处的错误观点<ul><li>服务之间是强隔离的，服务化能解耦合</li><li>服务独立开发部署</li><li>只要使用了服务，就等于有了一套架构</li></ul></li><li>架构设计示例<ul><li>原出租车调度系统<img src="https://api2.mubu.com/v3/document_image/dab98f12-1aa6-4882-b517-5302e2765ab2-156946.jpg" alt=""></li><li>添加运送猫咪功能后的重构架构图<img src="https://api2.mubu.com/v3/document_image/44627815-022f-4740-88c7-6a26f2ac9b3f-156946.jpg" alt=""></li><li>添加运送猫咪功能后的服务化重构架构图<img src="https://api2.mubu.com/v3/document_image/276b39cf-11d6-4d5e-a719-6c1d580ea262-156946.jpg" alt=""></li></ul></li></ul></li><li>测试边界<ul><li>测试也是一种系统组件</li><li>不要依赖于多变的东西。譬如， GUI 往往是多变的，因此通过 GUI 来验证系统的测试一定是脆弱的。因此，我们在系统设计与测试设计时，应该让业务逻辑不通过 GUI 也可以被测试。</li><li>测试并不是独立于整个系统之外的，恰恰相反，它们是系统的一个重要组成部分。我们需要精心设计这些测试，才能让它们发挥验证系统稳定性和预防问题复发的作用。没有按系统组成部分来设计的测试代码，往往是非常脆弱且难以维护的。这种测试最后常常会被抛弃，因为它们终究会出问题。</li><li>测试专用 API<ul><li>设计这样一个系统的方法之一就是专门为验证业务逻辑的测试创建一个 API 。这个 API 应该被授予超级用户权限，允许测试代码可以忽视安全限制，绕过那些成本高昂的资源（例如数据库），强制将系统设置到某种可测试的状态中。总而言之，该 API 应该成为用户界面所用到的交互器与接口适配器的一个超集。</li></ul></li><li>测试组件是可以独立部署的</li></ul></li><li>整洁的嵌入式架构<ul><li>固件并不一定是指存储在 ROM 中的代码。固件也并不是依据其存储的位置来定义的， 而是由其代码的依赖关系，及其随着硬件的演进在变更难度上的变化来定义的。</li><li>虽然你可能并不是嵌入式系统的开发者，但如果你在代码中嵌入了 SQL 或者是代码中引入了对某个平台的依赖的话，其实就是在写固件代码。譬如， Android 工程师在没有将业务逻辑与 Android API 分离之前，实际上也是在写固件代码。</li><li>添加硬件抽象层<img src="https://api2.mubu.com/v3/document_image/c3194932-4782-42b1-9026-ac9b70420ed7-156946.jpg" alt=""></li><li>添加操作系统抽象层<img src="https://api2.mubu.com/v3/document_image/ee10ce2a-9f52-44a1-9fb2-74d7481936b9-156946.jpg" alt=""></li><li>为产品的长期健康着想而采用一套整洁的嵌入式架构是很有必要的。</li></ul></li></ul></li><li>实现细节<ul><li>一个优秀的架构师是不会让实现细节污染整个系统架构的。</li><li>数据库只是实现细节<ul><li>数据的组织结构， 数据的模型， 都是系统架构中的重要部分， 但是从磁盘上存储／读取数据的机制和手段却没那么重要。关系型数据库强制我们将数据存储成表格并且以 SQL 访问， 主要是为了后者。总而言之， 数据本身很重要， 但数据库系统仅仅是一个实现细节。</li></ul></li><li>Web 是实现细节<ul><li>Web 只是一种 I/O 设备</li><li>GUI 只是一个实现细节。而 Web 则是 GUI 的一种，所以也是一个实现细节。作为一名软件架构师，我们需要将这类细节与核心业务逻辑隔离开来。</li></ul></li><li>应用程序框架只是实现细节<ul><li>请不要嫁给框架！</li><li>我们应该将框架作为架构最外圈的一个实现细节来使用，不要让它们进入内圈。</li><li>如果框架要求我们根据它们的基类来创建派生类，就请不要这样做！我们可以创造一些代理类，同时把这些代理类当作业务逻辑的插件来管理。</li><li>不要让框架污染我们的核心代码，应该依据依赖关系原则，将它们当作核心代码的插件来管理。</li></ul></li></ul></li><li>案例分析：视频销售网站<ul><li>产品<img src="https://api2.mubu.com/v3/document_image/da3c575f-b315-48d8-a11f-a9f0d72b5dfa-156946.jpg" alt=""></li><li>用例分析<img src="https://api2.mubu.com/v3/document_image/5cec86d7-1a88-43f1-b1a1-199f7d81b7d0-156946.jpg" alt=""></li><li>组件架构<img src="https://api2.mubu.com/v3/document_image/31818796-c740-4b62-b51e-1c175de70845-156946.jpg" alt=""></li></ul></li><li>拾遗<ul><li>例子<ul><li>假设正在构建一个在线书店，这个例子的任务是实现一个客户查看订单状态的用例。</li></ul></li><li>按层封装<img src="https://api2.mubu.com/v3/document_image/75d812ab-dd60-4ee7-912e-13b3c2706243-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/4dd9027b-b38a-47c8-9739-7573bb6bc8d3-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/3c1569ae-b3fc-4f76-984c-20dd7f9138c6-156946.jpg" alt=""></li><li>按功能封装<img src="https://api2.mubu.com/v3/document_image/44714c84-3279-47dc-9694-22f6f04ca85f-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/13babd3f-c17b-41c4-a452-e557aefebcb4-156946.jpg" alt=""></li><li>端口和适配器<img src="https://api2.mubu.com/v3/document_image/e09ce1e1-62dd-4054-a9ee-d4b541f28c1c-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/fc96eae0-935a-49a2-bebc-1cd4b6a74f1a-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/0c079ff1-2a8f-400f-88d5-66c352867046-156946.jpg" alt=""></li><li>按组件封装<img src="https://api2.mubu.com/v3/document_image/b11da670-aabf-4add-bb7e-158f2ac555bd-156946.jpg" alt=""></li><li>组织形式与封装的区别<ul><li>如果所有的类都是 public 的，那么其实我们就是在用四种不同的方式描述一个传统的分层架构设计方式。<img src="https://api2.mubu.com/v3/document_image/8759d7b4-62cf-45fc-9804-7f6d19d13267-156946.jpg" alt=""></li><li>使用访问修饰符<img src="https://api2.mubu.com/v3/document_image/f4adf1aa-05b3-4aff-aa80-8415a8c37b8d-156946.jpg" alt=""></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> develop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户故事与敏捷方法</title>
      <link href="/posts/63/"/>
      <url>/posts/63/</url>
      
        <content type="html"><![CDATA[<ul><li>起步<ul><li>概览<ul><li>什么是用户故事<ul><li>用户故事描述了对用户、系统或者软件购买者有价值的功能，用户故事由三个方面组成<ul><li>书面的故事描述，用来做计划和作为提示</li><li>有关故事的对话，用于具体描述故事细节</li><li>验收测试，用于表达故事细节且可用于确定故事如何才算完成</li></ul></li><li>3C<ul><li>卡片（card）</li><li>对话（conversation）</li><li>确认（confirmation）</li></ul></li><li>卡片代表客户需求而不是记录需求，卡片包含故事的文字描述，然而需求细节要在“对话”中获得，并在“确认”部分得以记录<a id="more"></a></li><li>用户故事示例<ul><li>用户故事只代表对用户有价值的功能<ul><li>用户可以在网站发布简历</li><li>用户可以搜索职位</li><li>公司可以发布新职位</li><li>用户可以限制浏览其简历的人</li></ul></li><li>不理想的用户故事<ul><li>这个软件用C++语言来编写</li><li>程序将通过连接池连接到数据库</li></ul></li></ul></li><li>如果用户故事很大，我们称为史诗故事（Epic），史诗故事可以分解成小故事，例如：用户可以搜索工作，可以分解成如下几个小故事<ul><li>用户可以通过地区、薪水范围、职位、公司名和发布日期之类的属性来搜索工作</li><li>用户可以查看搜索结果中每个工作的信息</li><li>用户可以查看发布工作的公司的详细信息</li></ul></li></ul></li><li>客户团队，客户编写用户故事<ul><li>客户团队可以包括测试人员、产品经理、实际用户和交互设计师</li></ul></li><li>规划发布和迭代<ul><li>客户团队排列故事优先级，放入不同的迭代，进行发布</li></ul></li><li>验收测试<ul><li>衡量故事是否完成</li></ul></li><li>用户故事强调口头沟通，鼓励推迟细节</li><li>小结<img src="https://api2.mubu.com/v3/document_image/7bab9a51-3c50-44e0-868b-18a42bcca16c-156946.jpg" alt=""></li></ul></li><li>编写故事<ul><li>一个优秀的故事应该有如下特点（INVEST原则）<ul><li>独立的（Independent)</li><li>可讨论的（Negotiable）</li><li>对用户或客户有价值的（Valuable）</li><li>可估计的（Estimable）</li><li>小的（Small）</li><li>可测试的（Testable）</li></ul></li><li>独立的<ul><li>尽量避免故事的相互依赖，如果故事间有依赖会影响优先级评估以及故事评估</li><li>如果故事有这依赖，可以做出如下调整<ul><li>合并有依赖的故事</li><li>用一个不同的维度去分割故事</li></ul></li><li>示例：<ul><li>故事<ul><li>公司可以使用 Visa 信用卡对发布的职位进行付费</li><li>公司可以使用万事达信用卡对发布的职位进行付费</li><li>公司可以使用美国运通卡对发布的职位进行付费</li></ul></li><li>假设开发支持第一种信用卡需要3天时间，然后支持第二种信用卡和第三种卡各需要1天时间，因为这些故事有依赖，不知道给每个故事估计多少时间，哪个故事应该是3天</li><li>解决方法<ul><li>合并3个故事为一个故事，合并后只需要5天，完全可行，如果合并后时间远远大于5天，那最好找另外一种维度重新划分故事</li><li>重新划分故事<ul><li>客户可以用一种信用卡支付</li><li>客户可以用另外两种信用卡支付</li></ul></li></ul></li></ul></li></ul></li><li>可讨论的<ul><li>故事卡是功能的简短描述，细节将在客户团队和开发团队的讨论中产生，故事卡的作用是提醒客户团队和开发团队在以后需要进行关于需求的对话，它并不是具体的需求本身，一些重要的细节可以记录在故事卡的背面<img src="https://api2.mubu.com/v3/document_image/205cf7cf-ff80-4a74-aaf9-f82b0bff7bfe-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/4e34f0ea-0812-48f3-afbd-4fb7d007b5a0-156946.jpg" alt=""></li><li>故事卡用于提醒开发人员和客户进行关于需求的讨论<img src="https://api2.mubu.com/v3/document_image/64b7ddaa-b027-44b5-9931-59b1c3f9b788-156946.jpg" alt=""><ul><li>一两句短语，用来提醒开发人员和客户进行对话</li><li>一些注释，用以表明在对话中亟待解决的问题</li></ul></li></ul></li><li>对用户或客户有价值的<ul><li>用户是软件的使用者，客户是购买软件的人</li><li>对客户有价值的故事，而对用户没有价值的故事<img src="https://api2.mubu.com/v3/document_image/cab21d15-c2a0-47b5-a936-3f1079d2cd00-156946.jpg" alt=""></li><li>避免只对开发人员有用的故事<img src="https://api2.mubu.com/v3/document_image/56f984f0-677f-4c5c-9466-476ceb7d65d3-156946.jpg" alt=""></li><li>更好的版本<img src="https://api2.mubu.com/v3/document_image/b5d91fb0-b5dd-4ca4-bed2-263d775e2700-156946.jpg" alt=""></li><li>保证每个故事对客户或用户有价值的最好的方法是让客户来编写故事</li></ul></li><li>可估计的<ul><li>对开发人员来说，能估算故事的大小（至少猜一下），或者把故事变为可用代码的时间量是很重要的，一般有3个原因会导致故事不可估计<ul><li>开发人员缺少领域知识<ul><li>可以与客户一起讨论，没有必要理解所有细节，大概了解故事即可</li></ul></li><li>开发人员缺少技术知识<ul><li>先进行一个快速的探索（spike），然后再评估故事，一个故事变成两个故事，一个快速的探索故事（用来获取足够的信息）和一个故事（真正实现功能）</li></ul></li><li>故事太大了<ul><li>分解成小故事</li></ul></li></ul></li></ul></li><li>小的<ul><li>故事太大太小，都无助于制订计划</li><li>史诗故事需要分解成更小的故事，合适的故事大小最终取决于团队，它的容量及所使用的技术</li><li>分割故事<ul><li>史诗故事通常分为以下两种<ul><li>复合故事（compound story）</li><li>复杂故事（complex story）</li></ul></li><li>复合故事由多个小故事组成，比如“用户可以发布他的简历”。在做系统初始时，这个故事可能比较恰当，但当开发人员跟客户讨论时，他们发现发布简历包含以下几点<img src="https://api2.mubu.com/v3/document_image/7b9b5371-d485-4b46-b6ad-fbf66be540d5-156946.jpg" alt=""></li><li>太小的故事<img src="https://api2.mubu.com/v3/document_image/93a2e0d9-69f2-4a7a-8103-a80629dd01d1-156946.jpg" alt=""></li><li>合适的故事<img src="https://api2.mubu.com/v3/document_image/8265c353-e3cc-4f43-8a56-cbffc71f6084-156946.jpg" alt=""></li><li>复合故事分解方法<ul><li>按照创建、编辑、删除来分解</li><li>按照数据边界来分解<img src="https://api2.mubu.com/v3/document_image/14eae139-4f60-4092-bbc7-cd0bdfb02dd8-156946.jpg" alt=""></li></ul></li><li>复杂故事是本身就很大且不容易分解的故事，如果一个故事因为不确定性而复杂，可以将它分解成两个用户故事，一个做调研的故事和一个开发故事，可以考虑将两个故事放在不同的迭代里<img src="https://api2.mubu.com/v3/document_image/0c9a2522-92cd-4482-a3a6-099682e4a6c0-156946.jpg" alt=""></li></ul></li><li>合并故事<ul><li>合并非常的故事为一个故事，比如代码 bug、用户界面变更等</li><li>合并成一个在半天或几天完成的故事中，然后命名，放入迭代</li></ul></li></ul></li><li>可测试的<ul><li>故事必须是可以测试的，成功通过了测试可以证明开发人员正确地实现了故事，如果故事不能被测试，开发人员怎么知道他们什么时候才算完成了代码呢？</li><li>只要有可能，尽量把测试自动化</li><li>通常不可测试的故事发生在一些非功能需求上<img src="https://api2.mubu.com/v3/document_image/f70f4b55-77c4-43a9-8fea-199fe59dbc2a-156946.jpg" alt=""></li><li>实际上总有小部分的测试是不能被自动化的</li></ul></li><li>小结<img src="https://api2.mubu.com/v3/document_image/4000e168-d934-4dec-ba37-9c55b12d19dc-156946.jpg" alt=""></li></ul></li><li>用户角色建模<ul><li>不同的用户角色，可能有不同的使用需求</li><li>角色建模步骤<ul><li>通过头脑风暴，列出初始的用户集合</li><li>整理最初的角色集合<img src="https://api2.mubu.com/v3/document_image/3cc905a5-8d73-48f8-89eb-c29cca7a7231-156946.jpg" alt=""></li><li>整合角色<img src="https://api2.mubu.com/v3/document_image/a9f03d23-214f-48b6-a3b4-7086d403c45e-156946.jpg" alt=""></li><li>提炼角色<img src="https://api2.mubu.com/v3/document_image/105523a8-bc93-4b7e-9846-9cc668758abf-156946.jpg" alt=""></li></ul></li><li>两个额外技术<ul><li>虚构人物</li><li>极端人物</li></ul></li><li>小结<img src="https://api2.mubu.com/v3/document_image/87636b74-6526-42e9-bf7d-62d11d148c37-156946.jpg" alt=""></li></ul></li><li>搜集故事<ul><li>方法<ul><li>用户访谈<ul><li>访问不同角色的用户</li><li>开放的问题与背景无关的问题<ul><li>封闭的问题让调查对象只能回答简单的是或否，没有余地去回答其他的东西</li><li>背景无关的问题，这种问题没有暗含答案或喜好</li></ul></li></ul></li><li>问卷调查<ul><li>使用静态的问卷不利于跟进后续问题</li><li>简单的单向沟通和时间滞后</li><li>不要作为搜集故事的主要方法</li></ul></li><li>观察<ul><li>观察用户使用软件的情况</li><li>有时用户表达不清楚，只有通过观察才能发现</li></ul></li><li>故事编写工作坊<ul><li>故事编写工作坊是开发人员、用户、产品客户和其他对编写故事有帮助的人共同参加的会议</li><li>参与人员编写尽可能多的故事，此时不对故事排优先级</li><li>快速且最有效的故事收集方法</li><li>简单原型<img src="https://api2.mubu.com/v3/document_image/f5f182a1-ad27-4952-b82f-7edb4789a439-156946.jpg" alt=""></li><li>用户故事<img src="https://api2.mubu.com/v3/document_image/bc65f823-2b39-4d9c-940e-29e8d1e94237-156946.jpg" alt=""></li><li>扔掉原型<img src="https://api2.mubu.com/v3/document_image/b34c91b5-260e-42a6-bde6-02b129ad6184-156946.jpg" alt=""></li></ul></li></ul></li><li>小结<img src="https://api2.mubu.com/v3/document_image/83f37da2-3758-4727-bf26-55d996ccbcec-156946.jpg" alt=""></li></ul></li><li>与用户代理合作<ul><li>可能的用户代理<ul><li>用户的经理</li><li>开发经理</li><li>销售人员</li><li>领域专家</li><li>市场营销团队</li><li>以前的用户</li><li>客户</li><li>培训师与技术支持</li><li>业务分析师或系统分析师</li></ul></li><li>什么情况与用户代理合作<ul><li>能接触到用户但访问受限时</li><li>实在不能接触到用户时</li></ul></li><li>设立客户团队<ul><li>在任何时候，实际用户总是优于用户代理，只要有可能，就要邀请实际用户到客户团队</li><li>客户团队应该优势互补，加入不同的用户代理或实际用户</li></ul></li><li>小结<img src="https://api2.mubu.com/v3/document_image/d3e3a857-1342-432d-b9ad-22b6c419f0fa-156946.jpg" alt=""></li></ul></li><li>用户故事验收测试<ul><li>在编写故事代码之前先写测试<ul><li>通常写测试的时间<img src="https://api2.mubu.com/v3/document_image/111c6322-7c83-4904-882c-8c23d4ad4bb2-156946.jpg" alt=""></li></ul></li><li>客户定义测试，客户可以和程序员与测试人员合作创建测试</li><li>测试是开发过程中的一部分，而不是在编码完成后要做的事</li><li>客户应该更专注于那些能向开发团队说明意图的测试</li><li>测试的是缺陷，而不是覆盖率，不要过渡追求 100% 覆盖率</li><li>小结<img src="https://api2.mubu.com/v3/document_image/71e393d2-4b9d-4a10-99c7-a29b537e8854-156946.jpg" alt=""></li></ul></li><li>优秀用户故事准则<ul><li>从目标故事开始<ul><li>考虑每一个用户角色，了解用户使用我们软件的目的<img src="https://api2.mubu.com/v3/document_image/37222145-da98-45aa-bd14-78427cfd957a-156946.jpg" alt=""></li><li>这些是高层次的故事，可以用来衍生出新的故事</li></ul></li><li>切蛋糕式的分解故事<ul><li>求职者可以发布简历<img src="https://api2.mubu.com/v3/document_image/8f1da66d-d864-4f03-87ed-c1e929171f9e-156946.jpg" alt=""></li></ul></li><li>编写封闭的故事<ul><li>一个封闭的故事是指那种随着一个有意义的目标的实现而结束的故事，能让用户使用后觉得她完成了某个任务</li><li>招聘者可以管理她发的招聘广告，这不是一个闭合故事，管理她发布的招聘广告是没法彻底完成的事情，可以分解成如下的闭合故事集合<img src="https://api2.mubu.com/v3/document_image/3efb8982-2180-4934-9e9f-c9926b062d70-156946.jpg" alt=""></li></ul></li><li>卡片约束<ul><li>对于任何必须要遵守而不需要直接实现的故事，在其故事卡上标注“约束”</li><li>示例<img src="https://api2.mubu.com/v3/document_image/83c3ab64-3e2d-46bd-ad4d-73417cc90b74-156946.jpg" alt=""></li><li>编写验收测试来确保系统没有违反约束</li></ul></li><li>根据实现时间来确定故事规模<ul><li>高层次故事<img src="https://api2.mubu.com/v3/document_image/c8f9d849-f65e-4feb-a741-d9ba1986eda6-156946.jpg" alt=""></li><li>客户决定第一轮迭代专注于允许用户发布简历，项目团队和客户进行讨论，通过沟通，扩展故事细节，另外3个高层次的故事先放在一边<img src="https://api2.mubu.com/v3/document_image/e1b4161d-10cb-4a42-97c4-179d6bfca3de-156946.jpg" alt=""></li><li>编写故事时，要利用故事灵活性的优势，让它们能够用于不同的层次</li></ul></li><li>不要过早涉及用户界面<ul><li>尽量让故事不包含用户界面</li></ul></li><li>有些需求并不是故事<ul><li>用户故事也不是万灵药，如果需要，可以放心使用用户故事以外的其他形式来表达某些需求，例如截图、文档等</li></ul></li><li>在故事里包括用户角色<ul><li>示例<ul><li>用户可以发布她的简历（不好的示例）</li><li>求职者可以发布她的简历（好的示例）</li></ul></li><li>可以采用如下简单模板<img src="https://api2.mubu.com/v3/document_image/decc3937-60a2-45e7-8f8a-977e57f8fd15-156946.jpg" alt=""></li></ul></li><li>只为一个用户编写<ul><li>求职者可以删除简历（不好的示例）</li><li>求职者可以删除她自己的简历（好的示例）</li></ul></li><li>以主动语态编写<ul><li>简历可以被求职者发布（不好的示例）</li><li>求职者可以发布简历（好的示例）</li></ul></li><li>由客户编写<ul><li>开发者可以在故事编写工作坊编写故事，或者给客户建议新故事，但编写故事的职责在于客户</li><li>由于客户有责任给故事排列优先级，所以客户理解每个故事是至关重要的，所以亲自编写是最好的办法</li></ul></li><li>不要给故事编号</li><li>不要忘记意图<ul><li>故事卡的主要目的是用来提醒开发人员和客户团队对功能进行讨论的，保持它的简洁性，加入细节，不要加入太多细节并以此取代对话</li></ul></li><li>小结<img src="https://api2.mubu.com/v3/document_image/79b9f2a3-a78c-4486-b381-6381b5ed9297-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/bed94cb1-e5ad-4234-a7ac-41e843dbb88f-156946.jpg" alt=""></li></ul></li></ul></li><li>估算和计划<ul><li>估算用户故事<ul><li>故事点<ul><li>故事点是一个相对的点数，故事点是一个模糊的单位，仅代表故事相对实现复杂度</li><li>在不同的团队，一个故事点可能代表不同的时间，可能代表一天，也可能代表一周</li><li>作者更愿意把一个故事点代表一个理想的工作日</li></ul></li><li>故事估算是团队的责任，团队大部分成员都参加估算是非常重要的，如果团队很大，不需要每个开发人员都参加。客户也可以参加，但不能参与估算</li><li>估算方法<ul><li>客户拿出故事卡读给开发人员听，开发人员根据需要尽可能多发问，客户要尽其所能解答，如果客户不知道答案，可以先猜猜看，或者要团队推迟估算这个故事</li><li>每个开发人员在卡片上写下自己的估算值，先不要给其他人看，之后同时亮出分数，如果不一致再进行讨论后，再进行估算</li><li>在做出几个估算后，可以使用三角测量来进行估算，把未进行评估的故事，和已经评估完成的故事进行对比，根据实现复杂度来进行相对点评估故事，一个4点故事应该是一个2点故事的两倍，这些都可以不用太精确</li><li>然后使用如下的看板形式，再进行故事比较和点数调整<img src="https://api2.mubu.com/v3/document_image/b06c0491-4a60-49ff-88c6-670c0035a9ce-156946.jpg" alt=""></li></ul></li><li>在迭代中把上一次完成的故事点数，作为下一个迭代的计划故事点数，这就是团队的速率，第一个迭代时，可以先估算一个大概值</li><li>用户故事的故事点数，可以随着我们后面获取到更多的信息进行调整，并不是一成不变的</li><li>小结<img src="https://api2.mubu.com/v3/document_image/a95bccdb-af52-4514-996b-676783f060d8-156946.jpg" alt=""></li></ul></li><li>发布计划<ul><li>选择下一次发布的故事</li><li>什么时候发布<ul><li>给定日期范围</li><li>以迭代次数<ul><li>6或7轮迭代后可能完成基本的功能</li><li>或许10到12轮迭代后有 1.0 版本的所有功能</li></ul></li></ul></li><li>发布中包含哪些功能<ul><li>DSDM<ul><li>必须有的（must have）</li><li>应用有的（should have）</li><li>可以有（could have）</li><li>这次不会有（won’t have）</li></ul></li></ul></li><li>排列故事优先级<ul><li>故事不能如期完成的风险</li><li>推迟实现一个故事时对其他故事的影响</li><li>故事对于广泛用户的重要性</li><li>故事对于少部分用户的重要性</li><li>故事与其他故事的的内聚性</li></ul></li><li>选择迭代长度<ul><li>通常是1至4周，固定迭代长度</li></ul></li><li>从故事点到预计工期<ul><li>根据团队速率，确定工期</li></ul></li><li>不要迷信发布计划<ul><li>利用发布计划可以设立初始期望，但之后获得新信息，应该重新调整期望</li></ul></li><li>小结<img src="https://api2.mubu.com/v3/document_image/188215a4-82b9-4315-a180-d4fc47f0b038-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/9c5af194-9590-42b7-a372-0e2ba26854db-156946.jpg" alt=""></li></ul></li><li>迭代计划<ul><li>迭代计划会议<ul><li>在每个迭代开始之前，进行迭代计划会议来为本轮迭代做计划</li><li>会议内容<ul><li>讨论故事</li><li>从故事中分解出任务</li><li>开发人员承担任务的职责</li><li>讨论过所有故事，并且接受所有任务后，开发人员单独估计他们承担的任务，以确保他们不会做出过于乐观的承诺</li></ul></li></ul></li><li>讨论故事<ul><li>客户从最高优先级的故事开始，读给开发人员听，然后由开发人员提问，直到他们充分理解故事，能从中分解出任务，没有必要理解故事的所有细节，在会议之后，开发人员跟客户一起理清故事的细节</li><li>尽量不要在迭代进行时改变故事的优先级</li></ul></li><li>分解任务<ul><li>用户故事的待办事项</li><li>示例故事<ul><li>用户可以根据不同的字段搜索酒店</li></ul></li><li>分解任务<img src="https://api2.mubu.com/v3/document_image/f2aa8615-1d86-4f75-ac09-de6a08b33817-156946.jpg" alt=""></li></ul></li><li>承担职责<ul><li>自愿领取任务</li><li>每个任务关联一个人的名字</li><li>在迭代快要结束时，如果有开发人员不能完成他接手的所有任务，其他成员应该尽量勇于承担</li></ul></li><li>估算并确认<ul><li>用户故事都分解完成后，开发人员估算自己承担的工作量，然后再进行合理分配任务，或者移除部分任务</li><li>估算<img src="https://api2.mubu.com/v3/document_image/621b2ed1-227f-4c1e-ab01-ed83ff261621-156946.jpg" alt=""></li></ul></li><li>小结<img src="https://api2.mubu.com/v3/document_image/48c94269-00d6-422c-81f1-9a959d5c5ca6-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/0195b1ae-166f-4f51-9435-12b1a0757c48-156946.jpg" alt=""></li></ul></li><li>测量并监控速率<ul><li>测量速率<ul><li>团队速率可能初期不稳定，两三轮迭代之后，才能获得一个比较稳定的速率</li><li>部分完成的用户故事，不能计算在速率内</li><li>图示<img src="https://api2.mubu.com/v3/document_image/870f62d8-d6b2-41ff-9c9b-d9cf83984d76-156946.jpg" alt=""></li></ul></li><li>计划速率与实际速率<ul><li>速率<img src="https://api2.mubu.com/v3/document_image/d915ccce-4d7b-4fb3-b9fa-14d443031573-156946.jpg" alt=""></li><li>故事点数<img src="https://api2.mubu.com/v3/document_image/78823ae3-c3ee-4d00-a1eb-89f62767279f-156946.jpg" alt=""></li><li>迭代燃尽图<img src="https://api2.mubu.com/v3/document_image/67a34783-b1f7-4930-82f7-82dcdcbe7007-156946.jpg" alt=""><ul><li>可能有新增加的用户故事</li></ul></li><li>迭代中的用户故事点数变化<img src="https://api2.mubu.com/v3/document_image/1fd36441-ccba-4d2c-98e4-975d47a354e2-156946.jpg" alt=""><ul><li>增加故事</li><li>删除故事</li><li>修改故事的评估</li></ul></li><li>迭代中的燃尽图<img src="https://api2.mubu.com/v3/document_image/9b6458d9-5c89-447c-a47f-05b17ff60c42-156946.jpg" alt=""></li><li>小结<img src="https://api2.mubu.com/v3/document_image/5eeae64e-32c0-4989-954f-31d608369a2d-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/f5c2ec16-0c98-45ce-93ac-e30e688530e1-156946.jpg" alt=""></li></ul></li></ul></li></ul></li><li>经常讨论的话题<ul><li>故事不是什么<ul><li>用户故事不是 IEEE 830 的软件需求规格<ul><li>需求列表只是描述了软件的行为，不是用户的行为或目的</li></ul></li><li>用户故事不是用例（use case）</li><li>用户故事不是场景（scenario）</li><li>小结<img src="https://api2.mubu.com/v3/document_image/8b918011-fa63-40ac-845f-5e13eaa637a7-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/d02198aa-85c2-4776-9d55-24e3c758f808-156946.jpg" alt=""></li></ul></li><li>用户故事的优势<ul><li>用户故事强调口头沟通<ul><li>每个人对共享的文档有不同的理解</li><li>客户只会获得开发人员根据他们对写下来的文档的理解所开发出来的系统，而这可能并不是客户真正想要的</li></ul></li><li>人人都可以理解用户故事</li><li>用户故事的大小适合做计划</li><li>用户故事适合于迭代开发<ul><li>在开始编码之前，我们并不需要写出所有的用户故事，可以写一部分故事，就进行编码与测试，然后按需要的节奏重复这个过程</li><li>写故事时，可以按照认为合适的粒度去写，比如项目计划时，可能写出史诗故事，后来准备开发时把故事分解成新的故事</li></ul></li><li>用户故事鼓励延迟细节</li><li>用户故事支持随机应变的开发<ul><li>用户及客户通常都不会准确地知道自己的实际需求</li><li>很多细节只能随着开发进展变得清晰</li><li>我们没有能力理解这么多细节，而且产品和项目也会经常变更</li><li>我们总会犯错</li><li>用户故事提醒我们用随机应变的方式开发软件</li></ul></li><li>用户故事鼓励参与性设计</li><li>用户故事传播隐性知识</li><li>小结<img src="https://api2.mubu.com/v3/document_image/c40bcf83-1df2-4f80-9052-5947f1f6b7e9-156946.jpg" alt=""></li></ul></li><li>用户故事不良症兆<ul><li>故事太小</li><li>故事相互依赖</li><li>镀金<ul><li>在迭代中实现了计划外的功能，或仅凭自己的感觉实现故事，实现的功能超出了实际需求</li></ul></li><li>细节太多</li><li>过早考虑用户界面细节</li><li>想得太远</li><li>故事划分太过频繁</li><li>客户很难为故事安排优先级</li><li>客户不愿意写用户故事，也不愿意为故事安排优先级</li></ul></li><li>Scrum与用户故事<ul><li>Scrum 是迭代和递增的</li><li>Scrum 基础<img src="https://api2.mubu.com/v3/document_image/16e88c68-2d68-44d4-b3b6-062aaf1fac35-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/c6c44786-f20b-4ae8-87c1-82645ac8ef9e-156946.jpg" alt=""></li><li>产品 Backlog<img src="https://api2.mubu.com/v3/document_image/0f11bd20-43a0-450e-8121-727a780e8df4-156946.jpg" alt=""></li><li>Sprint 计划会议</li><li>在 Scrum 中使用用户故事</li><li>小结<img src="https://api2.mubu.com/v3/document_image/37dfeef2-73b7-4567-a55a-94f7be35eeae-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/5d741c75-3329-4ea5-bcfd-0e87c7b73f2c-156946.jpg" alt=""></li></ul></li><li>其他话题<ul><li>处理非功能性需求<ul><li>不是所有的东西都必须转化为用户故事，非功能性需求有时无法恰当的以故事形式来表达</li></ul></li><li>纸质还是软件<ul><li>从卡片开始，如果有令人信服的理由使用软件，那就使用软件</li></ul></li><li>用户故事和用户界面</li><li>保留用户故事</li><li>缺陷的用户故事<ul><li>缺陷集合可以当成一个用户故事</li></ul></li><li>小结<img src="https://api2.mubu.com/v3/document_image/54eab900-ba95-4d29-8dde-f62d85339369-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/2ab59b17-640b-47ae-8470-22ec493629c3-156946.jpg" alt=""></li></ul></li></ul></li><li>一个完整的实例<ul><li>用户角色<ul><li>项目<ul><li>开发一个卖航海用品的网站，但决定先从简单的书开始卖</li></ul></li><li>定义客户<ul><li>项目的客户是需要买书的航海者，他们都不是公司员工，所以需要一个内部客户作为最终客户的代理，最后决定选择 Lori 来充当这个客户，她是销售和市场副总裁</li><li>她的初始想法<ul><li>典型的书店电子商务网站</li><li>通过各种方法搜索书籍</li><li>用户能维护一些书籍列表，记着以后再买</li><li>用户能对书籍打分和评论</li><li>用户可以查看订单状态</li></ul></li></ul></li><li>定义角色雏形<ul><li>Lori 和开发人员一起写用户角色卡片<img src="https://api2.mubu.com/v3/document_image/6d6187f3-18b7-4e5c-800e-f41a904aaad7-156946.jpg" alt=""></li></ul></li><li>整合与提炼<ul><li>去年重复或相似的，得到一个精简的用户角色列表<img src="https://api2.mubu.com/v3/document_image/4476e49c-c9de-4372-b06f-f431efadad1e-156946.jpg" alt=""></li></ul></li><li>角色建模<ul><li>团队考虑每一个角色，在角色卡片上添加一些详细描述，主要考虑以下几个因素<ul><li>用户使用软件的频率</li><li>用户在这个领域的专业能力程度</li><li>用户对电脑和软件的熟练程度</li><li>用户对团队正在开发的软件的熟练程度</li><li>用户使用软件的目的，一些用户关心易用性，一些关注用户体验等等</li></ul></li><li>讨论之后更新用户角色卡片<img src="https://api2.mubu.com/v3/document_image/32e789d5-c791-4637-ae4c-071331089ec4-156946.jpg" alt=""></li></ul></li><li>添加虚构人物<ul><li>有时添加虚构人物是值得的<img src="https://api2.mubu.com/v3/document_image/63964ffc-458a-4940-94eb-1f6ba6f00507-156946.jpg" alt=""></li><li>只有当虚构人物更容易让大家分析出用户故事时，才需要添加虚构人物</li></ul></li></ul></li><li>一些用户故事<ul><li>Teresa 的故事<ul><li>用户可以用作者、书名或 ISBN 搜索书籍</li><li>用户可以查看书籍的具体信息。例如：页数、出版日期和内容简介</li><li>用户可以把书籍放进购物车，在结束购物时，可以购买其中的书</li><li>在完成订单前，用户可以从她的购物车中删除书籍</li><li>购买书时，用户需要输入她的账单地址、送货地址及信用卡信息</li><li>用户可以对书籍进行评级和发表评论</li><li>用户可以创建一个网站账户用于保存送货地址和账单信息</li><li>用户可以编辑她的账户信息（信用卡、送货地址和账单地址等）</li><li>用户可以把书放入愿望清单，网站的其他访问者也可以看到该清单</li><li>用户可以把愿望清单（甚至是别人的愿望清单）中的项目放入自己的购物车</li><li>老顾客必须能购在 90 秒内找到书和下订单（约束）</li></ul></li><li>Ron 船长的故事<ul><li>用户可以查看自己的历史订单</li><li>查看历史订单时，用户可以方便地重新购买订单中的东西</li><li>网站总是告诉购物者她最近三次查看的东西，并提供返回的链接（即使在不同的会话中，这个功能也要能用）</li></ul></li><li>初级航海者的故事<ul><li>用户可以看到我们针对各种主题推荐的书籍</li></ul></li><li>不出海的礼物购买者的故事<ul><li>用户，特别是不出海的礼物购买者，能够很容易查找到其他用户的愿望清单</li><li>用户可以选择对购买的东西进行礼物包装</li><li>用户可以选择附上礼物卡，并且可以在卡片上写上自己的信息</li></ul></li><li>报表查阅者的故事<ul><li>报表查阅者可以按照图书的类别、流量、最佳和最差销售情况来查看每天的购买报表</li><li>用户必须经过适当的身份验证才能查看报表</li><li>在网站上提交的订单最终必须同电话订单放入同一个订单数据库（约束）</li></ul></li><li>管理员的一些故事<ul><li>管理员可以在网站上增加新书</li><li>在评论放上网站之前，必须经过管理员批准</li><li>管理员可以删除书</li><li>管理员可以编辑已有书的信息</li></ul></li><li>收尾<ul><li>用户可以检查她最近的订单状态。如果订单还没有发货，她可以增加或删除书，更改送货方式、送货地址和信用卡信息</li><li>系统必须能够支持 50 个并发用户（约束）</li></ul></li></ul></li><li>估算故事<ul><li>初始故事集合<img src="https://api2.mubu.com/v3/document_image/238d2805-0c4a-4b56-987b-94dd447ca4e3-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/13ea6fcb-77e3-44ca-95b7-34108631202d-156946.jpg" alt=""></li><li>第一个故事<ul><li>没有必要从第一个故事开始，但是这个项目中，第一个故事就很适合开始做估算</li><li>经过讨论之后第一个故事分解成了两个故事<ul><li>用户可以做基本的简单搜索，输入的单词或词组会同时在作者和书名中匹配</li><li>用户可以输入作者、书名和 ISBN ，以它们的任意组合来搜索书</li></ul></li></ul></li><li>评分和评论<ul><li>经历讨论分解成两个用户故事<ul><li>用户可以对书进行1到5的评分。用户即使不从我们这里买书，也可以评分</li><li>用户可以对图书写评论。在提交之前她可以预览评论。用户即使不从我们这里买书，也可以发表评论</li></ul></li></ul></li><li>账户<ul><li>经历讨论分解成两个用户故事<ul><li>用户可以修改存储在她账户中的信用卡信息</li><li>用户可以修改存储在她账户中的发货地址和账单地址</li></ul></li></ul></li><li>完成估算<img src="https://api2.mubu.com/v3/document_image/cc2e0284-903e-43d5-abeb-d32b8539f9f1-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/4a712b2e-3b0e-4f30-af43-03d48060c165-156946.jpg" alt=""></li></ul></li><li>发布计划<ul><li>确定迭代长度为两周</li><li>估算速率</li><li>给故事安排优先级</li><li>最终发布计划<img src="https://api2.mubu.com/v3/document_image/ca1fe4e0-1139-41db-9912-6f96cd95b50d-156946.jpg" alt=""></li></ul></li><li>验收测试<ul><li>搜索测试<img src="https://api2.mubu.com/v3/document_image/e6ebc20d-a608-41d7-9c14-3dfac809a8ad-156946.jpg" alt=""></li><li>购物车测试<ul><li>团队意识到更改商品数量为 0 的情况，所以他们把原来故事修改了<ul><li>在完成订单前，用户可以从她的购物车中删除书（修改前的故事）</li><li>用户可以调整购物车中商品的数量，把数量设为 0 即可从购物车中删除该商品（修改后的故事）</li></ul></li><li>测试<img src="https://api2.mubu.com/v3/document_image/4e484ef4-05e5-4537-8406-96cef2c78bd6-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/1db51f03-29c8-4b07-b46c-f994598f9e5a-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/aab3e284-5a50-4196-bccf-cd6dde31e08d-156946.jpg" alt=""></li></ul></li><li>购买书<img src="https://api2.mubu.com/v3/document_image/04411caa-8f63-4773-a31f-cefbea20a8de-156946.jpg" alt=""></li><li>用户账户<img src="https://api2.mubu.com/v3/document_image/83b9f8b3-fe59-41ee-af87-259887f9c1e2-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/573f5be1-3256-403b-9a51-44c5f0ad519e-156946.jpg" alt=""></li><li>管理<img src="https://api2.mubu.com/v3/document_image/6ef2b859-4567-4190-b6b9-0b5acb1f4fdc-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/d386eaa0-7dfd-4d2c-a7f1-71f39ab1c73b-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/4b0966d3-4d3f-4048-851a-3cc456912e83-156946.jpg" alt=""></li><li>测试限制条件<img src="https://api2.mubu.com/v3/document_image/40b83906-8cce-4d5c-b624-abc444af86be-156946.jpg" alt=""></li><li>最后一个故事<img src="https://api2.mubu.com/v3/document_image/7089c3fb-de4f-4dbd-a057-b8d804e9559e-156946.jpg" alt=""></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> develop </tag>
            
            <tag> agile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单设计四原则</title>
      <link href="/posts/62/"/>
      <url>/posts/62/</url>
      
        <content type="html"><![CDATA[<ul><li>重构基础原则<ul><li>表达意图（Expresses Intent）</li><li>消除重复（Eliminate Duplication）</li></ul></li><li>简单设计四原则<ul><li>通过测试（Tests Pass）<ul><li>只有通过了测试软件设计才有意义</li><li>测试应该尽可能自动化</li><li>测试应该尽可能快</li></ul></li><li>表达意图（Expresses Intent）<ul><li>当修改代码时，能快速找到应该做修改的地方</li><li>当修改代码时，命名有可能偏离了它所表达的内容</li><li>当找不到一个合适的能表达意图的命名时，说明它做的有点多了，需要重构</li></ul></li><li>消除重复（No Duplication (DRY)）<ul><li>不是指代码层面的重复（code duplication），而是指知识重复（knowledge duplication）</li><li>每块知识都应该有且只有一种表示</li><li>一次并且只有一次（Once and Only Once）</li></ul></li><li>小（Small）<ul><li>应用以上原则的时候，注意本原则</li><li>是否有任何不再使用的残留代码</li><li>是否有任何重复的抽象，合并它们</li><li>是否重构提取做的过头了</li></ul></li><li>相互迭代<ul><li>修复了命名问题之后，可能会发现一些重复，消除这些重复，可能会发现一些可以改进的表达方式<a id="more"></a></li></ul></li></ul></li><li>具体示例<ul><li>测试名称应该影响对象的 API<ul><li>测试名称应该表达测试代码的意图</li><li>示例 1<ul><li>代码<img src="https://api2.mubu.com/v3/document_image/6f3ee387-bb03-471f-a7d1-fdf79900ea47-156946.jpg" alt=""></li><li>测试名称提到了 empty world，但是测试代码中却没有这个empty world 概念</li><li>测试代码只是粗暴地拿出了对象的集合并计数</li><li>优化<img src="https://api2.mubu.com/v3/document_image/082abfd7-a6a5-4121-b1d0-229de4458ebe-156946.jpg" alt=""></li></ul></li><li>示例 2<ul><li>代码<img src="https://api2.mubu.com/v3/document_image/0f53220d-ecd9-4425-acb6-b7214311db87-156946.jpg" alt=""></li><li>优化<img src="https://api2.mubu.com/v3/document_image/09d94756-fcd8-412d-8da8-290e2359dbdf-156946.jpg" alt=""></li><li>更小的测试驱动<img src="https://api2.mubu.com/v3/document_image/a1af3b4c-d1d2-4818-9299-b9e3b2969cfd-156946.jpg" alt=""></li></ul></li></ul></li><li>拓扑结构的知识重复<ul><li>代码<img src="https://api2.mubu.com/v3/document_image/bdca943c-d547-49e9-af43-8fc7d30fe82c-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/3030f861-1f9a-4beb-a134-db4e5cbecc64-156946.jpg" alt=""></li><li>拓扑结构的知识重复了，如果之后使用三维坐标，可能就需要同时修改这两个地方</li><li>优化<img src="https://api2.mubu.com/v3/document_image/ef0ded26-91fe-4e5b-ac90-4ff0125a8333-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/326e0dda-ddae-41a8-82e6-aff523b96ccd-156946.jpg" alt=""></li></ul></li><li>行为吸引<ul><li>代码<img src="https://api2.mubu.com/v3/document_image/3aab9c0c-2884-4898-beaa-48330549af05-156946.jpg" alt=""></li><li>在实现 alive_in_next_generation 时，我们发现需要如下方法，但是我们不确定这个方法应该放在哪一个类中<img src="https://api2.mubu.com/v3/document_image/35caa453-1b38-4eb1-a4f8-cd8a14daeb9a-156946.jpg" alt=""></li><li>但是如果我们之前提取了 Location ，我们会发现这是个好地方<img src="https://api2.mubu.com/v3/document_image/1cae8982-5107-4341-a375-4a9cc1a72bde-156946.jpg" alt=""></li><li>当我们想实现一个新行为的时候，已经有一个地方很适合实现该行为，这就是行为吸引</li><li>如果我们发现我们想实现的新行为，不知道应该放在哪里，这可能表明我们的系统没有很好地表达某个概念</li></ul></li><li>测试状态与测试行为<ul><li>状态测试<img src="https://api2.mubu.com/v3/document_image/5b0f0ced-1c4d-4da5-80b2-a00ca28ca175-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/366a4210-fc53-40e6-a44f-5b6b223e4d51-156946.jpg" alt=""></li><li>行为测试<img src="https://api2.mubu.com/v3/document_image/e3906799-7385-411c-a5c8-980fa279778f-156946.jpg" alt=""></li><li>我们应该更专注于行为测试</li></ul></li><li>新的测试不要依赖之前的测试<ul><li>代码<img src="https://api2.mubu.com/v3/document_image/fd133dae-ac1d-47a4-a148-7744e8c54fd5-156946.jpg" alt=""></li><li>我们如何确定初始化的 word 就是 empty world，我们依赖了之前的测试<img src="https://api2.mubu.com/v3/document_image/5b0f0ced-1c4d-4da5-80b2-a00ca28ca175-156946.jpg" alt=""></li><li>优化<img src="https://api2.mubu.com/v3/document_image/21fae542-80ae-41c4-a7bb-86f6935949cb-156946.jpg" alt=""></li><li>外部调用者不应该调用基础的构造方法，外部调用者不能使用 new 去初始化一个实例，然后期望它有特定的状态</li></ul></li><li>打破抽象层次<ul><li>代码<img src="https://api2.mubu.com/v3/document_image/a811ab67-c3fc-4328-b536-687d389d22a3-156946.jpg" alt=""></li><li>我们依赖了 Location 的具体实现，如果我们修改了 Location 类，可能会导致很多测试失败，应该把拓扑相关的知识封装在 Location 类中</li><li>优化<img src="https://api2.mubu.com/v3/document_image/4bae41ca-ab63-4497-956f-5da4bfde6f31-156946.jpg" alt=""></li></ul></li><li>简单重复<ul><li>代码<img src="https://api2.mubu.com/v3/document_image/bb654199-a726-45f4-a5a1-c2cadd5c226e-156946.jpg" alt=""></li><li>number_of_neighbors == 3 看起来有点重复，可能会重构成如下所示<img src="https://api2.mubu.com/v3/document_image/10600476-de3e-494d-95fc-5d4b44aab3bf-156946.jpg" alt=""></li><li>当我们理解它们的意图时发现，发现应该重构成如下所示<img src="https://api2.mubu.com/v3/document_image/0e861adc-ce79-407b-b8db-3546681674c6-156946.jpg" alt=""></li><li>它们不是知识的重复，它们只是巧合的代码重复，我们不能看到代码重复就去消除重复</li></ul></li><li>程序上的多态性<ul><li>代码<img src="https://api2.mubu.com/v3/document_image/d1f58eca-a6a0-472e-ab3f-d54ebb52a05c-156946.jpg" alt=""></li><li>alive_in_next_generation 方法更像是一个面向状态的描述，而不是一个行为相关的问题</li><li>为什么我们会对 alive 更感兴趣，还可以添加其他状态吗？重构成如下所示<img src="https://api2.mubu.com/v3/document_image/52eb5f97-1e03-42d6-b366-d0a774bfafc8-156946.jpg" alt=""></li><li>重构成多态<img src="https://api2.mubu.com/v3/document_image/e64d5fda-f854-45a1-9b7b-9633b17217cb-156946.jpg" alt=""></li><li>为了更好的表达意图，我们也可能会重构成如下所示<img src="https://api2.mubu.com/v3/document_image/40571cda-ffa3-4406-9749-9b24ea8c63e7-156946.jpg" alt=""></li></ul></li><li>对使用做出假设<ul><li>代码<img src="https://api2.mubu.com/v3/document_image/3b5764bd-ff39-47a0-8f1c-8fa60fee54f6-156946.jpg" alt=""></li><li>我们可能会这样使用 cell.stays_alive?(number_of_neighbors) ，</li><li>这些类是围绕状态构建的，它们实际上代表了规则，为什么 Cell 抽象会围绕规则，为什么我们不具体化为规则</li><li>优化<img src="https://api2.mubu.com/v3/document_image/a028c890-b099-45d9-84c0-b999afebe82d-156946.jpg" alt=""></li><li>这些抽象需要吗？我们要考虑我们是不是对使用做出了假设</li></ul></li><li>打开对象<ul><li>代码<img src="https://api2.mubu.com/v3/document_image/6b3b2e1e-8f71-403e-93f8-fb20e709249d-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/3d2aa527-4225-4c5e-806b-68eef7fc5ba2-156946.jpg" alt=""></li><li>大部分情况下，我们问对象要一些它们的数据或者计算，然后做一些计算把结果填充到其他对象</li><li>通过禁用返回值，我们可以强制我们依赖对象去执行行为</li><li>优化<img src="https://api2.mubu.com/v3/document_image/d93d096a-9b0d-47a2-8289-d0b190d99897-156946.jpg" alt=""></li><li>更进一步<img src="https://api2.mubu.com/v3/document_image/00e1fe5c-ab57-40a4-8e55-97421e3a10b1-156946.jpg" alt=""></li><li>调用者<img src="https://api2.mubu.com/v3/document_image/1c2e5ac6-2950-449c-83b7-bb4c890da83f-156946.jpg" alt=""><img src="https://api2.mubu.com/v3/document_image/850c38c9-934c-4bce-8783-2f243dfbbe3f-156946.jpg" alt=""></li></ul></li><li>反向组合代替继承<ul><li>代码<img src="https://api2.mubu.com/v3/document_image/846026a2-384b-4cb0-8d11-3ccd60f28cc8-156946.jpg" alt=""></li><li>使用继承<img src="https://api2.mubu.com/v3/document_image/fa00d63f-88f8-4d52-b62a-2084c7f5c2f3-156946.jpg" alt=""></li><li>虽然使用了继承，但是两个类型仍然包含了同样的知识</li><li>反向组合<img src="https://api2.mubu.com/v3/document_image/e965aa09-fbf8-42fd-a182-6723fa00e1a8-156946.jpg" alt=""></li><li>优化命名<img src="https://api2.mubu.com/v3/document_image/0db9331a-9f0a-454c-a328-dde0beb461f3-156946.jpg" alt=""></li></ul></li></ul></li><li>练习时的限制条件<ul><li>每个方法小于等于 3 行</li><li>不使用分支语句（if、switch 等）</li><li>不让语言原始类型越过边界（返回值、参数等）</li><li>不允许交流的结对编程</li><li>不允许使用 return</li><li>对象健身操</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> develop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Istio 上线可能会遇到的坑总结</title>
      <link href="/posts/56/"/>
      <url>/posts/56/</url>
      
        <content type="html"><![CDATA[<p>我们从迁移服务到 Istio 到现在稳定运行已经有半年时间。虽然在使用 Istio 的过程中，整体过程还算顺利，但是我们还是碰到了一些大大小小的问题，我们把这些问题以及解决方法做一个总结，希望能帮助到有意愿使用 Istio 的团队和个人。</p><p>我们碰到的 Istio 使用问题：</p><ul><li>k8s 中 service 的命名端口问题</li><li>gRPC 服务端使用 TLS 证书问题</li><li>服务没有监听 127.0.0.1问题</li><li>HTTP 1.0 协议问题</li><li>由 keepalive 导致的偶发 503</li><li>Proxy 与应用的启动顺序不固定</li><li>路由域名冲突问题</li><li>Istio 导致 PV 挂载问题</li><li>Headless 服务问题</li></ul><a id="more"></a><h3 id="k8s-中-service-的命名端口问题"><a href="#k8s-中-service-的命名端口问题" class="headerlink" title="k8s 中 service 的命名端口问题"></a>k8s 中 service 的命名端口问题</h3><p>service 使用命名端口<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">MyApp</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">9376</span></span><br></pre></td></tr></table></figure></p><p>Istio 实现了 HTTP 和 HTTP2 流量的自动探测，当服务没有使用命名端口时候，并且开启了流量自动探测功时（默认开启），Istio 可以进行自动的流量探测来识别协议。但是如果你使用了命名端口，但是指定错了协议，那就会导致服务无法正常访问，通常会得到 connection reset 的错误。</p><p>具体支持协议的类型，以及自动探测相关文档可以参考<a href="https://istio.io/latest/docs/ops/configuration/traffic-management/protocol-selection/" target="_blank" rel="noopener">Istio 协议选择</a></p><h3 id="gRPC-服务端使用-TLS-问题"><a href="#gRPC-服务端使用-TLS-问题" class="headerlink" title="gRPC 服务端使用 TLS 问题"></a>gRPC 服务端使用 TLS 问题</h3><p>当你有服务使用 gRPC 协议并且使用 TLS 证书时，你需要把服务的协议类型命名为 https 或者 tls ，而不能直接使用 grpc ，具体问题可参考<a href="https://github.com/istio/istio/issues/16282#issuecomment-665349098" target="_blank" rel="noopener">Istio issue</a> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-grpc-service-with-tls</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">MyApp</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">9376</span></span><br></pre></td></tr></table></figure><h3 id="服务没有监听-127-0-0-1-问题"><a href="#服务没有监听-127-0-0-1-问题" class="headerlink" title="服务没有监听 127.0.0.1 问题"></a>服务没有监听 127.0.0.1 问题</h3><p><img src="/posts/56/mesh-traffic.png" alt=""></p><p>如上图所示，当服务 A 访问服务 B 时，实际上流量是先达到服务 A 的 Proxy 上的，然后再到服务 B 的 Proxy 上的，然后服务 B 上的 Proxy 会访问本地 127.0.0.1 地址对应的端口。如果服务 B 没有监听 127.0.0.1 地址上的对应端口，就会导致服务 B 无法自动被访问，出现 connection refused 的情况。</p><p>迁移 zookeeper 或者 redis 到 Istio 中时，就会碰到类似问题，官方有专门的<a href="https://istio.io/latest/faq/applications/#redis" target="_blank" rel="noopener">FAQ 说明</a></p><h3 id="HTTP-1-0-协议问题"><a href="#HTTP-1-0-协议问题" class="headerlink" title="HTTP 1.0 协议问题"></a>HTTP 1.0 协议问题</h3><p>由于 Istio 不支持 HTTP 1.0 版本的协议，所以当客户端在 Istio 集群中使用 HTTP 1.0 协议时，就会出现无法正常访问的情况。比如当使用 Nginx 作了代理时，默认情况下会使用 HTTP 1.0 协议，访问 Nginx 时，就会出现 503 无法正常访问的情况。具体问题可见<a href="https://istio.io/v1.1/help/ops/traffic-management/troubleshooting/#envoy-won-t-connect-to-my-http-1-0-service" target="_blank" rel="noopener">官方帮助文档</a></p><h3 id="由-keepalive-导致的偶发-503"><a href="#由-keepalive-导致的偶发-503" class="headerlink" title="由 keepalive 导致的偶发 503"></a>由 keepalive 导致的偶发 503</h3><p>默认情况下 Istio 的 Proxy 会跟后端服务保持长连接，TCP 默认情况下保持跟系统的 tcp keepalive 一样，linux 系统一般默认为 7200s ，HTTP 协议默认设置为 1h，除非后端主动断开，否则连接将会一直被重复使用。</p><p>由于后端服务设置的 keepalive 时间过短，在高并发情况下，可能会出现当后端服务发送断开请求数据包 fin 时，数据包还没有达到 Proxy 时， Proxy 认为此连接依然正常可用，正好有请求到达 Proxy， 于是 Proxy 仍然会发请求给这个连接，由于后端服务已经发送了断开请求数据包 fin 包，当这条连接再有数据过来时，会直接返回 tcp reset ，导致 Proxy 返回 503 给调用方。</p><p>解法方法：</p><p>可以通过给服务的 destinationrule 设置 keepalive 时间，让 Proxy 的 keepalive 时间小于后端服务的 keepalive 时间，让 Proxy 主动断开连接。</p><p>HTTP 层可以设置<a href="https://istio.io/latest/docs/reference/config/networking/destination-rule/#ConnectionPoolSettings-HTTPSettings" target="_blank" rel="noopener">idleTimeout参数</a></p><p>TCP 层可以设置<a href="https://istio.io/latest/docs/reference/config/networking/destination-rule/#ConnectionPoolSettings-TCPSettings" target="_blank" rel="noopener">tcpKeepalive参数</a></p><h3 id="Proxy-与应用的启动顺序不固定"><a href="#Proxy-与应用的启动顺序不固定" class="headerlink" title="Proxy 与应用的启动顺序不固定"></a>Proxy 与应用的启动顺序不固定</h3><p>由于 k8s 的 pod 中的容器并不保证启动顺序，所以可能导致应用启动早于 Proxy，如果此时应用对外发起请求，就会出现请求失败的情况，应用可能会出现反复重启的情况，比如应用启动时会去先拿配置中心的配置，然后再启动应用。</p><h3 id="路由域名冲突问题"><a href="#路由域名冲突问题" class="headerlink" title="路由域名冲突问题"></a>路由域名冲突问题</h3><p>某些版本的 Istio 当出现域名冲突时，会停止更新路由，导致路由不正常，集群无法正常提供服务。比如当配置了相同域名的 service 和 serviceentry 时</p><h3 id="Istio-导致-PV-挂载问题"><a href="#Istio-导致-PV-挂载问题" class="headerlink" title="Istio 导致 PV 挂载问题"></a>Istio 导致 PV 挂载问题</h3><p>在 Istio 1.5 版本之后，加入了<a href="https://istio.io/latest/docs/ops/best-practices/security/#configure-third-party-service-account-tokens" target="_blank" rel="noopener">third party service account tokens</a> 来增强 Proxy 到控制平面的认证。但是由于<a href="https://github.com/kubernetes/kubernetes/issues/57923" target="_blank" rel="noopener">k8s 的 bug</a> ，导致 Istio 使用了另一个方式绕过这个 bug ，但是这就导致了另外一个问题。由于使用 fsGroup ，会导致每次挂载 PV 时，都要修改整个 PV 中的文件权限，当文件比较多时，就可能会导致挂载超时，无法成功挂载 PV，问题可见<a href="https://github.com/istio/istio/issues/22025" target="_blank" rel="noopener">Istio issue</a>。不管使用的是<code>third-party-jwt</code>还是<code>first-party-jwt</code>，都会有该问题。</p><p>我之前的解决方案是使用<code>first-party-jwt</code>，并且注释了 Istio 代码中强制插入 fsGroup 的代码，重新编译了 pilot 镜像，替换了官方的镜像。</p><h3 id="Headless-服务问题"><a href="#Headless-服务问题" class="headerlink" title="Headless 服务问题"></a>Headless 服务问题</h3><p>Istio 默认情况下会开启服务间的兼容模式的 mTLS，即服务可以支持 mTLS 的方式访问，也可以使用 plain 流量访问。当两个服务服务都部署在 Istio 集群中时，会默认使用 mTLS 方式访问，当 Istio 集群中服务访问没有部署在 Istio 集群中的服务时，默认使用 plain 流量访问。但是由于 Istio 1.6 之前的版本对于 headless 服务支持不够完善，导致部署在 Istio 集群中的服务无法访问没有部署在 Istio 集群中的 headless 服务，访问时会出现 connection reset 的错误。排查后发现是由于 Istio 把集群中访问 headless 服务的路由规则设置成了只使用 mTLS 方式访问，所以导致了访问 Istio 集群外的 headless 服务出现问题。</p><p>具体分析可见<a href="https://cloud.tencent.com/developer/article/1700748" target="_blank" rel="noopener">Istio 运维实战系列（2）：让人头大的『无头服务』-上</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上这些问题都是我们在生产环境碰到的问题，有一些是我们自己的使用方式问题，还有一些是 Istio 自身的问题，甚至还有一些是 k8s 的问题，不过我们都找到了还不错的解决方法，希望以后 Istio 能越来越好用稳定。</p>]]></content>
      
      
      <categories>
          
          <category> 服务网格 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> service mesh </tag>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Istio中的一个完整请求过程分析</title>
      <link href="/posts/58/"/>
      <url>/posts/58/</url>
      
        <content type="html"><![CDATA[<p>本文章主要分析在Istio中一个请求从一个服务实例调用另一个服务时，请求是怎么从调用方到服务提供方的。</p><h3 id="HTTP-协议的请求"><a href="#HTTP-协议的请求" class="headerlink" title="HTTP 协议的请求"></a>HTTP 协议的请求</h3><p>以 service-python 服务访问 service-lua 服务为例。</p><h4 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h4><p>当 service-python 服务要访问 service-lua 服务时，需要先通过 kube-dns 找到要访问的服务的 IP 地址，也就是 service-lua 服务的 cluster ip，执行如下的命令可以看到 DNS 解析得到的 service-lua 服务的 IP 地址。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> $(kubectl get pod -l app=service-python -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) -c service-python -- ping -c 1 service-lua</span><br><span class="line">PING service-lua (10.111.228.100): 56 data bytes</span><br><span class="line">64 bytes from 10.111.228.100: seq=0 ttl=64 time=0.052 ms</span><br><span class="line"></span><br><span class="line">--- service-lua ping statistics ---</span><br><span class="line">1 packets transmitted, 1 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.052/0.052/0.052 ms</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="调用方发起请求"><a href="#调用方发起请求" class="headerlink" title="调用方发起请求"></a>调用方发起请求</h4><p>当 service-python 服务拿到 service-lua 服务的 IP 地址后，发送请求给服务对应的 IP 和端口。由于 Envoy 代理会拦截所有流量，这个请求会最先到达 service-python 服务实例的 Envoy 代理上，查看 Envoy 代理监听了哪些地址和端口。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config listener $(kubectl get pod -l app=service-python -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>)</span><br><span class="line">ADDRESS           PORT      TYPE</span><br><span class="line">10.244.1.16       80        HTTP</span><br><span class="line">10.99.91.255      15011     TCP</span><br><span class="line">10.110.93.233     443       TCP</span><br><span class="line">10.99.91.255      31400     TCP</span><br><span class="line">10.105.42.173     443       TCP</span><br><span class="line">10.96.0.1         443       TCP</span><br><span class="line">10.97.150.161     443       TCP</span><br><span class="line">10.99.91.255      8060      TCP</span><br><span class="line">10.101.237.88     15011     TCP</span><br><span class="line">10.96.0.10        53        TCP</span><br><span class="line">10.99.91.255      853       TCP</span><br><span class="line">10.111.27.172     42422     TCP</span><br><span class="line">10.99.91.255      443       TCP</span><br><span class="line">0.0.0.0           15001     TCP</span><br><span class="line">0.0.0.0           9093      HTTP</span><br><span class="line">0.0.0.0           15010     HTTP</span><br><span class="line">0.0.0.0           15031     HTTP</span><br><span class="line">0.0.0.0           80        HTTP</span><br><span class="line">0.0.0.0           9091      HTTP</span><br><span class="line">0.0.0.0           15030     HTTP</span><br><span class="line">0.0.0.0           15004     HTTP</span><br><span class="line">0.0.0.0           8080      HTTP</span><br><span class="line">0.0.0.0           8060      HTTP</span><br></pre></td></tr></table></figure><p>从上面的监听器可以看出，由于 service-python 服务访问 service-lua 服务使用是 HTTP 协议并且是80端口，所以会匹配到 0.0.0.0:80 监听器。查看具体监听器的信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config listener $(kubectl get pod -l app=service-python -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) --<span class="built_in">type</span> HTTP --port 80 --address 0.0.0.0 -o json</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"0.0.0.0_80"</span>,</span><br><span class="line">        <span class="string">"address"</span>: &#123;</span><br><span class="line">            <span class="string">"socketAddress"</span>: &#123;</span><br><span class="line">                <span class="string">"address"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">                <span class="string">"portValue"</span>: 80</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"filterChains"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"filters"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"name"</span>: <span class="string">"envoy.http_connection_manager"</span>,</span><br><span class="line">                        <span class="string">"config"</span>: &#123;</span><br><span class="line">                            ...</span><br><span class="line">                            <span class="string">"rds"</span>: &#123;</span><br><span class="line">                                <span class="string">"config_source"</span>: &#123;</span><br><span class="line">                                    <span class="string">"ads"</span>: &#123;&#125;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                <span class="string">"route_config_name"</span>: <span class="string">"80"</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            ...</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>从上面的输出信息可以看出，0.0.0.0:80 的监听器使用了名为 80 的路由规则，查看路由规则信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config route $(kubectl get pod -l app=service-python -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) --name=80 -o json</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"80"</span>,</span><br><span class="line">        <span class="string">"virtualHosts"</span>: [</span><br><span class="line">            ...</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"name"</span>: <span class="string">"service-lua.default.svc.cluster.local:80"</span>,</span><br><span class="line">                <span class="string">"domains"</span>: [</span><br><span class="line">                    <span class="string">"service-lua.default.svc.cluster.local"</span>,</span><br><span class="line">                    <span class="string">"service-lua.default.svc.cluster.local:80"</span>,</span><br><span class="line">                    <span class="string">"service-lua"</span>,</span><br><span class="line">                    <span class="string">"service-lua:80"</span>,</span><br><span class="line">                    <span class="string">"service-lua.default.svc.cluster"</span>,</span><br><span class="line">                    <span class="string">"service-lua.default.svc.cluster:80"</span>,</span><br><span class="line">                    <span class="string">"service-lua.default.svc"</span>,</span><br><span class="line">                    <span class="string">"service-lua.default.svc:80"</span>,</span><br><span class="line">                    <span class="string">"service-lua.default"</span>,</span><br><span class="line">                    <span class="string">"service-lua.default:80"</span>,</span><br><span class="line">                    <span class="string">"10.109.146.20"</span>,</span><br><span class="line">                    <span class="string">"10.109.146.20:80"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"routes"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"match"</span>: &#123;</span><br><span class="line">                            <span class="string">"prefix"</span>: <span class="string">"/"</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">"route"</span>: &#123;</span><br><span class="line">                            <span class="string">"cluster"</span>: <span class="string">"outbound|80||service-lua.default.svc.cluster.local"</span>,</span><br><span class="line">                            <span class="string">"timeout"</span>: <span class="string">"0.000s"</span>,</span><br><span class="line">                            <span class="string">"maxGrpcTimeout"</span>: <span class="string">"0.000s"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        ...</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            ...</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"validateClusters"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>从上面的路由信息可以看出，对于请求 service-lua 服务的流量使用了名为 “outbound|80||service-lua.default.svc.cluster.local” 的服务实例集群，查看服务实例集群的信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config cluster $(kubectl get pod -l app=service-python -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) --fqdn=service-lua.default.svc.cluster.local -o json</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"outbound|80||service-lua.default.svc.cluster.local"</span>,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"EDS"</span>,</span><br><span class="line">        <span class="string">"edsClusterConfig"</span>: &#123;</span><br><span class="line">            <span class="string">"edsConfig"</span>: &#123;</span><br><span class="line">                <span class="string">"ads"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"serviceName"</span>: <span class="string">"outbound|80||service-lua.default.svc.cluster.local"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"connectTimeout"</span>: <span class="string">"1.000s"</span>,</span><br><span class="line">        <span class="string">"circuitBreakers"</span>: &#123;</span><br><span class="line">            <span class="string">"thresholds"</span>: [</span><br><span class="line">                &#123;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>从上面的服务实例集群信息可以看出，请求 service-lua 服务的流量最终都转发到了名为 “outbound|80||service-lua.default.svc.cluster.local” 的 endpoint 上，查看 endpoint  信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config endpoint $(kubectl get pod -l app=service-python -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) --cluster <span class="string">"outbound|80||service-lua.default.svc.cluster.local"</span></span><br><span class="line">ENDPOINT           STATUS      CLUSTER</span><br><span class="line">10.244.1.15:80     HEALTHY     outbound|80||service-lua.default.svc.cluster.local</span><br><span class="line">10.244.2.9:80      HEALTHY     outbound|80||service-lua.default.svc.cluster.local</span><br></pre></td></tr></table></figure><p>从上面的 endpoint 信息可以看出，请求 service-lua 服务的流量最终到达 10.244.1.10:80 和 10.244.2.8:80 地址上，而这两个地址其实就是 Kubernetes 中  service-lua 服务实例的 pod 的 IP 地址。查看 service-lua 服务的 pod IP 地址。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -l app=service-lua -o wide</span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE   IP            NODE   NOMINATED NODE</span><br><span class="line">service-lua-v1-5c9bcb7778-l6qv2   2/2     Running   0          22m   10.244.1.15   lab3   &lt;none&gt;</span><br><span class="line">service-lua-v2-75cb5cdf8-svn5c    2/2     Running   0          22m   10.244.2.9    lab2   &lt;none&gt;</span><br></pre></td></tr></table></figure><p>调用方的 Envoy 代理，在获取到具体的 service-lua 服务实例地址后，对相应的地址发起请求。</p><h4 id="服务方接受请求"><a href="#服务方接受请求" class="headerlink" title="服务方接受请求"></a>服务方接受请求</h4><p>由于 Envoy 代理会拦截所有流量，这个请求会最先到达 service-lua 服务实例的 Envoy 代理上，查看 Envoy 代理监听了哪些地址和端口。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config listener $(kubectl get pod -l app=service-lua -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>)</span><br><span class="line">ADDRESS           PORT      TYPE</span><br><span class="line">10.244.1.15       80        HTTP</span><br><span class="line">10.99.91.255      443       TCP</span><br><span class="line">10.99.91.255      8060      TCP</span><br><span class="line">10.111.27.172     42422     TCP</span><br><span class="line">10.96.0.1         443       TCP</span><br><span class="line">10.110.93.233     443       TCP</span><br><span class="line">10.97.150.161     443       TCP</span><br><span class="line">10.99.91.255      31400     TCP</span><br><span class="line">10.101.237.88     15011     TCP</span><br><span class="line">10.96.0.10        53        TCP</span><br><span class="line">10.99.91.255      15011     TCP</span><br><span class="line">10.99.91.255      853       TCP</span><br><span class="line">10.105.42.173     443       TCP</span><br><span class="line">0.0.0.0           9091      HTTP</span><br><span class="line">0.0.0.0           8060      HTTP</span><br><span class="line">0.0.0.0           15010     HTTP</span><br><span class="line">0.0.0.0           8080      HTTP</span><br><span class="line">0.0.0.0           80        HTTP</span><br><span class="line">0.0.0.0           9093      HTTP</span><br><span class="line">0.0.0.0           15030     HTTP</span><br><span class="line">0.0.0.0           15031     HTTP</span><br><span class="line">0.0.0.0           15004     HTTP</span><br><span class="line">0.0.0.0           15001     TCP</span><br></pre></td></tr></table></figure><p>从上面的监听器可以看出，请求 service-lua 服务实例的流量会匹配到 10.244.1.15:80 监听器。查看具体监听器的信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config listener $(kubectl get pod -l app=service-lua -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) --<span class="built_in">type</span> HTTP --port 80 --address 10.244.1.15 -o json</span><br><span class="line">...</span><br><span class="line"><span class="string">"virtual_hosts"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"domains"</span>: [</span><br><span class="line">            <span class="string">"*"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"inbound|http|80"</span>,</span><br><span class="line">        <span class="string">"routes"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                ...</span><br><span class="line">                <span class="string">"route"</span>: &#123;</span><br><span class="line">                    <span class="string">"cluster"</span>: <span class="string">"inbound|80||service-lua.default.svc.cluster.local"</span>,</span><br><span class="line">                    <span class="string">"max_grpc_timeout"</span>: <span class="string">"0.000s"</span>,</span><br><span class="line">                    <span class="string">"timeout"</span>: <span class="string">"0.000s"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>从上面的路由规则可以看出，10.244.1.15:80 监听器会使用名为 “inbound|80||service-lua.default.svc.cluster.local” 的服务实例集群，查看服务实例集群的信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config cluster $(kubectl get pod -l app=service-lua -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) --fqdn=service-lua.default.svc.cluster.local --direction inbound -o json</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"inbound|80||service-lua.default.svc.cluster.local"</span>,</span><br><span class="line">        <span class="string">"connectTimeout"</span>: <span class="string">"1.000s"</span>,</span><br><span class="line">        <span class="string">"hosts"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"socketAddress"</span>: &#123;</span><br><span class="line">                    <span class="string">"address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">                    <span class="string">"portValue"</span>: 80</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"circuitBreakers"</span>: &#123;</span><br><span class="line">            <span class="string">"thresholds"</span>: [</span><br><span class="line">                &#123;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>从上面的服务实例集群信息可以看出，请求 service-lua 服务的流量最终地址为 127.0.0.1:80 。 service-lua 服务实例的 Envoy 代理请求本址地址获取响应结果后，返回给服务调用方的 Envoy 代理，再由调用方的 Envoy 代理返回数据给服务调用方。</p><h3 id="TCP-协议的请求"><a href="#TCP-协议的请求" class="headerlink" title="TCP 协议的请求"></a>TCP 协议的请求</h3><p>以 service-go 服务访问 redis 服务为例。</p><h4 id="DNS-解析-1"><a href="#DNS-解析-1" class="headerlink" title="DNS 解析"></a>DNS 解析</h4><p>当 service-go 服务要访问 redis 服务时，需要先通过 kube-dns 找到要访问的服务的 IP 地址，也就是 redis 服务的 cluster ip，执行如下的命令可以看到 DNS 解析得到的 redis  服务的 IP 地址。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> $(kubectl get pod -l app=service-go -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) -c service-go -- ping -c 1 redis</span><br><span class="line">PING redis (10.96.84.23): 56 data bytes</span><br><span class="line">64 bytes from 10.96.84.23: seq=0 ttl=64 time=0.066 ms</span><br><span class="line"></span><br><span class="line">--- redis ping statistics ---</span><br><span class="line">1 packets transmitted, 1 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.066/0.066/0.066 ms</span><br></pre></td></tr></table></figure><h4 id="调用方发起请求-1"><a href="#调用方发起请求-1" class="headerlink" title="调用方发起请求"></a>调用方发起请求</h4><p>当 service-go 服务拿到 redis 服务的 IP 地址后，发送请求给服务对应的 IP 和端口。由于 Envoy 代理会拦截所有流量，这个请求会最先到达 service-go 服务实例的 Envoy 代理上，查看 Envoy 代理监听了哪些地址和端口。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config listener $(kubectl get pod -l app=service-go -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>)</span><br><span class="line">ADDRESS           PORT      TYPE</span><br><span class="line">10.244.2.8        80        HTTP</span><br><span class="line">10.99.91.255      443       TCP</span><br><span class="line">10.96.0.1         443       TCP</span><br><span class="line">10.97.150.161     443       TCP</span><br><span class="line">10.105.42.173     443       TCP</span><br><span class="line">10.99.91.255      31400     TCP</span><br><span class="line">10.99.91.255      8060      TCP</span><br><span class="line">10.96.0.10        53        TCP</span><br><span class="line">10.110.93.233     443       TCP</span><br><span class="line">10.111.27.172     42422     TCP</span><br><span class="line">10.101.237.88     15011     TCP</span><br><span class="line">10.99.91.255      15011     TCP</span><br><span class="line">10.99.91.255      853       TCP</span><br><span class="line">0.0.0.0           15030     HTTP</span><br><span class="line">0.0.0.0           15010     HTTP</span><br><span class="line">0.0.0.0           8080      HTTP</span><br><span class="line">0.0.0.0           8060      HTTP</span><br><span class="line">0.0.0.0           15031     HTTP</span><br><span class="line">0.0.0.0           9091      HTTP</span><br><span class="line">0.0.0.0           15004     HTTP</span><br><span class="line">0.0.0.0           9093      HTTP</span><br><span class="line">0.0.0.0           80        HTTP</span><br><span class="line">0.0.0.0           15001     TCP</span><br><span class="line">10.96.84.23       6379      TCP</span><br></pre></td></tr></table></figure><p>从上面的监听器可以看出，由于 service-go 服务访问 redis 服务使用是 TCP 协议并且是6379端口，所有会匹配到 10.96.84.23:6379 监听器。查看具体监听器的信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config listener $(kubectl get pod -l app=service-go -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) --<span class="built_in">type</span> TCP --port 6379 --address 10.96.84.23 -o json</span><br><span class="line">...</span><br><span class="line"><span class="string">"filters"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"envoy.tcp_proxy"</span>,</span><br><span class="line">        <span class="string">"config"</span>: &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="string">"cluster"</span>: <span class="string">"outbound|6379||redis.default.svc.cluster.local"</span>,</span><br><span class="line">            <span class="string">"stat_prefix"</span>: <span class="string">"outbound|6379||redis.default.svc.cluster.local"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>从上面的监听器信息可以看出，对于请求 redis 服务的流量使用了名为 “outbound|6379||redis.default.svc.cluster.local” 的服务实例集群，查看服务实例集群的信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config cluster $(kubectl get pod -l app=service-go -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) --fqdn=redis.default.svc.cluster.local -o json</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"outbound|6379||redis.default.svc.cluster.local"</span>,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"EDS"</span>,</span><br><span class="line">        <span class="string">"edsClusterConfig"</span>: &#123;</span><br><span class="line">            <span class="string">"edsConfig"</span>: &#123;</span><br><span class="line">                <span class="string">"ads"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"serviceName"</span>: <span class="string">"outbound|6379||redis.default.svc.cluster.local"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"connectTimeout"</span>: <span class="string">"1.000s"</span>,</span><br><span class="line">        <span class="string">"circuitBreakers"</span>: &#123;</span><br><span class="line">            <span class="string">"thresholds"</span>: [</span><br><span class="line">                &#123;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>从上面的服务实例集群信息可以看出，请求 redis 服务的流量最终都转发到了名为 “outbound|6379||redis.default.svc.cluster.local” 的 endpoint 上，查看 endpoint  信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config endpoint $(kubectl get pod -l app=service-go -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) --cluster <span class="string">"outbound|6379||redis.default.svc.cluster.local"</span></span><br><span class="line">ENDPOINT             STATUS      CLUSTER</span><br><span class="line">10.244.2.12:6379     HEALTHY     outbound|6379||redis.default.svc.cluster.local</span><br></pre></td></tr></table></figure><p>从上面的 endpoint 信息可以看出，请求 redis 服务的流量最终到达 10.244.2.12:6379 地址上，而这个地址其实就是 Kubernetes 中 redis 服务实例的 pod 的 IP 地址。查看 redis 服务实例的 pod IP 地址。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -l app=redis -o wide</span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE   IP            NODE   NOMINATED NODE</span><br><span class="line">redis-v1-7d56d758f5-5bx5w   2/2     Running   0          22m   10.244.2.12   lab2   &lt;none&gt;</span><br></pre></td></tr></table></figure><p>调用方的 Envoy 代理，在获取到具体的服务实例地址后，对相应的地址发起请求。</p><h4 id="服务方接受请求-1"><a href="#服务方接受请求-1" class="headerlink" title="服务方接受请求"></a>服务方接受请求</h4><p>由于 Envoy 代理会拦截所有流量，这个请求会最先到达 redis 服务实例的 Envoy 代理上，查看 Envoy 代理监听了哪些地址和端口。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config listener $(kubectl get pod -l app=redis -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>)</span><br><span class="line">ADDRESS           PORT      TYPE</span><br><span class="line">10.244.2.12       6379      TCP</span><br><span class="line">10.111.27.172     42422     TCP</span><br><span class="line">10.96.0.10        53        TCP</span><br><span class="line">10.110.93.233     443       TCP</span><br><span class="line">10.99.91.255      443       TCP</span><br><span class="line">10.99.91.255      8060      TCP</span><br><span class="line">10.97.150.161     443       TCP</span><br><span class="line">10.99.91.255      15011     TCP</span><br><span class="line">10.96.84.23       6379      TCP</span><br><span class="line">10.99.91.255      31400     TCP</span><br><span class="line">10.99.91.255      853       TCP</span><br><span class="line">10.101.237.88     15011     TCP</span><br><span class="line">10.96.0.1         443       TCP</span><br><span class="line">10.105.42.173     443       TCP</span><br><span class="line">0.0.0.0           9093      HTTP</span><br><span class="line">0.0.0.0           15031     HTTP</span><br><span class="line">0.0.0.0           15010     HTTP</span><br><span class="line">0.0.0.0           80        HTTP</span><br><span class="line">0.0.0.0           15004     HTTP</span><br><span class="line">0.0.0.0           8080      HTTP</span><br><span class="line">0.0.0.0           8060      HTTP</span><br><span class="line">0.0.0.0           15030     HTTP</span><br><span class="line">0.0.0.0           9091      HTTP</span><br><span class="line">0.0.0.0           15001     TCP</span><br></pre></td></tr></table></figure><p>从上面的监听器可以看出，请求 redis 服务实例的流量会匹配到 10.244.2.12:6379 监听器。查看具体监听器的信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config listener $(kubectl get pod -l app=redis -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) --<span class="built_in">type</span> TCP --port 6379 --address 10.244.2.12 -o json</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"envoy.tcp_proxy"</span>,</span><br><span class="line">    <span class="string">"config"</span>: &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">"cluster"</span>: <span class="string">"inbound|6379||redis.default.svc.cluster.local"</span>,</span><br><span class="line">        <span class="string">"stat_prefix"</span>: <span class="string">"inbound|6379||redis.default.svc.cluster.local"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>从上面的路由规则可以看出，10.244.2.12:6379 监听器会使用名为 “inbound|6379||redis.default.svc.cluster.local” 的服务实例集群，查看服务实例集群的信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl proxy-config cluster $(kubectl get pod -l app=redis -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) --fqdn=redis.default.svc.cluster.local --direction inbound -o json</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"inbound|6379||redis.default.svc.cluster.local"</span>,</span><br><span class="line">        <span class="string">"connectTimeout"</span>: <span class="string">"1.000s"</span>,</span><br><span class="line">        <span class="string">"hosts"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"socketAddress"</span>: &#123;</span><br><span class="line">                    <span class="string">"address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">                    <span class="string">"portValue"</span>: 6379</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"circuitBreakers"</span>: &#123;</span><br><span class="line">            <span class="string">"thresholds"</span>: [</span><br><span class="line">                &#123;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>从上面的服务实例集群信息可以看出，请求 redis 服务的流量最终地址为 127.0.0.1:6379 。 redis 服务实例的 Envoy 代理请求本地地址获取响应结果后，返回给服务调用方的 Envoy 代理，再由 Envoy 代理返回数据给服务调用方。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li>Istio入门与实战</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务网格 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> service mesh </tag>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clean agile 敏捷读书笔记</title>
      <link href="/posts/55/"/>
      <url>/posts/55/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这本书既适合程序员也适合非程序员。它不是技术性的。没有代码。它旨在提供敏捷软件开发的原始意图的概述，而不涉及任何编程、测试和管理的深入技术细节。</p><p>这是一本小书。那是因为这个话题不大。敏捷是一个关于小型编程团队做小事情的小问题的小想法。敏捷不是关于大型编程团队做大事情的大问题的大想法。大事情不会由大团队来完成，大事情是由许多小团队协作完成的。</p><p>在过去的几年中，敏捷所传达的简单而微小的信息已经变得模糊不清。它混合了精益、看板、LeSS、SAFe、Modern、Skilled 等概念。这些想法还不错，但它们不是最初敏捷表达的信息。是时候记住敏捷到底是什么了。</p><p>在这本书中，你不会发现什么特别的新东西，没有什么令人吃惊的东西，没有什么革命性的东西打破常规。你会发现它是敏捷的一个重述，就像它在 2000 年被告知的那样。在过去的 20 年里，我们学到了一些东西，我将把它们包括在内。但总的来说，这本书传达的信息是 2001 年和 1950 年的信息。</p><p>这是一个古老的信息。这是一个真实的信息。它给了我们一个小的解决方案，解决小的软件团队做一些小事情碰到的小问题。</p><a id="more"></a><h3 id="什么是敏捷"><a href="#什么是敏捷" class="headerlink" title="什么是敏捷"></a>什么是敏捷</h3><p>2001 年 2 月，在犹他州的 Snowbird 这个地方，由 17 位软件专家组成的小组谈论软件的糟糕状况发展。当时，大多数软件是使用低效的，繁重的，高礼节性的流程所构建的，例如 Waterfall 和 Rational Unified Process（RUP）。这 17 位专家的目标是创建一份宣言，介绍一种更有效、更轻量级的方法。</p><p>这绝非易事。这 17 个人有着不同的经历和强烈的不同观点。期望这样一个团体达成共识是不可能的。然而，尽管困难重重，大家还是达成了共识，并撰写了敏捷宣言，并且诞生了软件领域最具影响力和最持久的运动之一。</p><p>这样的运动在软件行业遵循可预测的路径。一开始有一小部分热情的支持者，另一部分热情的反对者，还有绝大多数的人并不关心。许多运动在那个阶段结束，或者至少永远不会结束。想想面向切面编程、逻辑编程或 CRC 卡。然而，有些跨越了鸿沟，变得格外受欢迎，也引起了争议。有些人甚至设法将争议抛诸脑后，而只是成为主流思想的一部分。面向对象就是后者的一个例子。敏捷也是如此。</p><p>不幸的是，一旦一个运动变得流行起来，它的名字就会因为误解和篡夺而变得模糊不清。与实际运动无关的产品和方法会借用名称，利用名称的知名度和重要性来赚钱。敏捷也是如此。</p><p>这本书是在 Snowbird 会议发生近 20 年后写的，其目的是澄清事实。这本书用尽可能务实的方式描述敏捷，没有废话，没有不确定的表述，没有不确定的术语。</p><p>这本书介绍了敏捷的基础。许多人美化和扩展了这些想法，这并没有错。然而，这些扩展和修饰都不是敏捷的。它们是敏捷加上其他的东西。你将在这里读到敏捷是什么，敏捷过去是什么，以及敏捷将不可避免地永远是什么。</p><h4 id="敏捷历史"><a href="#敏捷历史" class="headerlink" title="敏捷历史"></a>敏捷历史</h4><p>Winston Royce 在 1970 年写了一篇论文，在其中描述了自己对如何管理大规模软件开发项目的想法。论文中包含了如下的一张图。</p><p><img src="/posts/55/waterfall.png" alt="Winston Royce 论文中的图"></p><p>由于这个图和瀑布很像，因此这种技术被人们以“瀑布”命名所熟知。</p><p>瀑布软件开发模式源自于科学管理，它通过分析、制定详细的计划、执行计划来完成软件开发。Winston Royce 并没有推荐瀑布软件开发模式，人们从他的论文中拿走了瀑布软件开发模式的概念，然后瀑布软件开发模式统治了接下来的 30 年软件开发模式。</p><p>由于软件开发的特殊性，我们几乎不可能在开始就做好软件需求分析，软件架构设计，因为需求一直在发生变化。</p><p>在 1994 年，我第一次见到了 Kent Beck ，在 1999 年我再次见到了 Kent Beck ，在这之后我了解到了 Kent Beck 的极限编程，然后被极限编程所吸引。极限编程中的想法很有颠覆性。我在自己的公司引入了极限编程的训练营。在 2000 年的夏天 Kent Beck 邀请极限编程社区和设计模式社区一起组织会议，称之为极限编程领导会议（XP Leadership），讨论接下来极限编程应该如何发展，其中有一个想法是围绕极限编程创建一个非盈利性的组织。我同意这个想法，但是其他人不太同意这个想法。我有点受挫的离开了那个会议，Martin Fowler 也跟了出来，建议我们可以之后在芝加哥再开会讨论，我同意了。</p><p>在 2000 年的秋天，我和 Martin 见面讨论决定组织一个轻量级工作流程会议（Light Weight Process Summit），我们决定邀请了很多人。在我们的受邀人中，Alistair Cockburn 告诉我说他也在准备组织类似的会议，他把他的邀请人和我们的邀请人进行了合并。如果我们同意在 Snowbird 滑雪场组织会议，他愿意为组织会议做跑腿活。所以会议就定在了 Snowbird 举行。</p><h4 id="Snowbird"><a href="#Snowbird" class="headerlink" title="Snowbird"></a>Snowbird</h4><p>2001 年 17 位软件开发人员聚集在一起探讨寻找更好的软件开发方法，他们讨论得出了敏捷软件开发方法，并提出了如下的敏捷宣言：</p><ul><li>个体和互动高于流程和工具。（Individuals and interactions over processes and tools）</li><li>工作的软件高于详尽的文档。（Working software over comprehensive documentation）</li><li>客户合作高于合同谈判。（Customer collaboration over contract negotiation）</li><li>响应变化高于遵循计划。（Responding to change over following a plan）</li></ul><h4 id="敏捷软件开发概览"><a href="#敏捷软件开发概览" class="headerlink" title="敏捷软件开发概览"></a>敏捷软件开发概览</h4><h5 id="项目管理铁十字原则"><a href="#项目管理铁十字原则" class="headerlink" title="项目管理铁十字原则"></a>项目管理铁十字原则</h5><p>任何项目都只能从好、快、便宜、完成四个方面中选择三个。</p><p>现实中，好的项目管理者知道这四个方面可以有不同的系数，好的管理者带领着项目朝着足够好，足够快，足够便宜并且只完成必须功能的方向前进，他们不会把这四方面的系数都设置为 100%，这也是敏捷软件开发想要实现的管理方法。</p><p>敏捷软件开发就是这样一个帮助开发者和管理者执行这种实用项目管理的框架。</p><h5 id="敏捷软件开发提供数据，管理者在做决策时需要的数据"><a href="#敏捷软件开发提供数据，管理者在做决策时需要的数据" class="headerlink" title="敏捷软件开发提供数据，管理者在做决策时需要的数据"></a>敏捷软件开发提供数据，管理者在做决策时需要的数据</h5><p><strong>团队速率图</strong></p><p>团队速率图表示团队每个迭代完成的用户故事点数</p><p><img src="/posts/55/team-velocity.png" alt="团队速率图"></p><p><strong>燃尽图</strong></p><p>燃尽图表示项目用户故事点数的变化情况</p><p><img src="/posts/55/burn-down.png" alt="燃尽图"></p><h5 id="传统软件开发"><a href="#传统软件开发" class="headerlink" title="传统软件开发"></a>传统软件开发</h5><p>老板确定了项目的截止日期。开会决定分析阶段所需时间、设计阶段所需时间、实现阶段所需时间。</p><p>分析阶段是一个很轻松欢乐的阶段，我们上上网，与客户聊聊天，当计划的时间结束时，我们结束了分析，“神奇”的完成了分析阶段。</p><p>设计阶段我们把项目分成多个模块，并设计它们之间的接口。当然，不可预知的事情也会发生，新的需求被添加进来，老的需求被移除或者修改，我们很想重新分析这些改变，但是由于时间紧迫，我们只能把这些改变 hack 进设计，当计划的时间结束，我们结束了设计，设计阶段也神奇的完成了。</p><p>实现阶段有明确的标准，我们没有办法来假装我们已经把实现阶段的工作做完了。在实现阶段，需求也在持续改变，新的需求会加入，旧的需求会被移除或修改。我们很想回去重新进行分析、重新设计这些改变，但是由于所剩时间不多，我们只能把这些改变一个接一个的 hack 进代码里。当我们回头把这些代码与设计对比时，发现我们的代码与设计与之前的设想已经相差甚远，但是我们已经没有时间去担心这些东西了。在与计划的交付日期还有两个星期时，我们告诉利益相关人（可能是经理、产品负责人、客户等），我们不能如期交付软件。你可以想像下利益相关人会作何反应。</p><p>最后我们压力倍增，继续完成未完成工作，这个阶段被称为死亡行军阶段（The Death March Phase）。我们告诉自己之后再也不会像这样一样做项目，下一次我们会做更多的分析，更多的设计。结果还是一样，因为我们的方法错了。</p><p><strong>瀑布开发模式并不会摧毁每一个项目，但是它仍然是一种灾难性的软件项目开发方式。</strong></p><h5 id="敏捷软件开发"><a href="#敏捷软件开发" class="headerlink" title="敏捷软件开发"></a>敏捷软件开发</h5><p>项目开始于分析，但是分析从来都不会停止，我们把时间分隔正常的增量的小段，我们称它为迭代（iterations）或者冲刺（sprints），右侧是截止时间。迭代通常为一周或者二周。</p><p><img src="/posts/55/the-whole-project.png" alt="完整项目图"></p><p>第一个迭代通常被称为迭代 0，用来产生需求列表，被称作用户故事。迭代 0 也用来建立开发环境，评估用户故事，制定初步计划，该计划只是将故事分配给最初的几个迭代。最后，迭代 0 被开发人员和架构师用来根据暂定的故事清单来构想系统的初始暂定设计，编写用户故事，评估用户故事，计划用户故事和架构设计永远不会停止。每一个迭代的任何时间，都会有一些分析、设计与实现，在敏捷软件开发中，我们一直在分析和设计。迭代并不是一个小瀑布。</p><p>迭代 1 从评估本次迭代计划完成多少用户故事开始，然后团队开始工作，完成用户故事。在迭代结束时，我们完成了部分用户故事，这是我们对一次迭代中可以完成数量的首次测量，这是真实的数据，如果我们假定我们每一个迭代都相似，然后我们就可以调整我们的原始项目计划，重新计算一个新的项目完成日期。这可能会严重超过我们之前计划的截止时间，但这至少是真实数据，但是也不用太过认真，因为这仅仅是第一次迭代数据，随着迭代的进行，团队完成的点数，可能会变化，我们的调整可能会持续进行，直到它非常的稳定。</p><p>让他们失去希望是敏捷软件开发的主要目标，我们采用敏捷的目的就是为了在希望杀死项目之前摧毁希望，因为希望会导致团队误导管理者看不到项目的真实进度。敏捷软件开发引导项目走向最好的可能结果，可能这并不是最想要的结果，但这就是最好的可能结果。</p><p><strong>管理铁十字原则</strong></p><p>项目管理者需要决定项目应该多好，多快，多便宜和完成多少功能。通常管理者可以调整范围、时间、人员和质量。</p><p>改变时间，但有时因为商业原因，时间并不能更改。</p><p>增加人员，有数据表明增加人员的前几周并不能提高生产力，反而会降低生产力，后面生产力会逐渐增加。你只能寄希望于后面会补上前面丢失的生产力，并且增加人员，通常会增加预算。</p><p><img src="/posts/55/add-more-member.png" alt="增加成员效率图"></p><p>降低质量，我们都知道通过停止写测试、停止做代码评审、停止做重构，仅仅写生产代码，可以加快速度。但是事实并不是这样的，不做这些看似没用的事情，不仅不会加快速度，反而会降低速度。如果你想走的更快，你应该先走好。如果你想减少项目时间，唯一的选项就是提高质量。</p><p>改变范围，有些需求可能并不需要在截止时间内完成。</p><p><strong>业务价值优先级</strong></p><p>我们会问利益相关者下一个我们应该实现的需求，我们只做利益相关者要求我们做的需求</p><p>上面描述的只是敏捷软件开发的大概，但这是敏捷的要点。每一个迭代的输出都是可以衡量的，用于持续评估时间表，需求按业务价值的顺序来实现，质量保持尽量的高，时间表主要靠改变需求范围来调整，这就是敏捷。</p><h4 id="Circle-of-Life"><a href="#Circle-of-Life" class="headerlink" title="Circle of Life"></a>Circle of Life</h4><p>XP（Extreme Programming）中文被译为极限编程。它最符合敏捷软件开发的要求。Ron Jeffries 总结了 XP 的实践图，这个图被亲切的称为 “Circle of Life” 。</p><p><img src="/posts/55/the-circle-of-life.png" alt=""></p><p>外圈的环是面向业务的实践，本质上相当于 Scrum 。它提供了软件开发人员与业务人员的沟通框架，并且还提供了软件开发人员和业务人员管理项目的原则。</p><p>中间的环是面向团队的实践，这些实践提供了开发团队内部沟通和自我管理的原则和框架。</p><p>内圈的环代表了技术实践，指导和限制程序员保证尽可能高的技术质量。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>敏捷就是用小的纪律帮助小团队管理小项目。</p><h3 id="为什么要采用敏捷"><a href="#为什么要采用敏捷" class="headerlink" title="为什么要采用敏捷"></a>为什么要采用敏捷</h3><p>在我们深入讨论敏捷开发的细节之前，我想先解释一下其中的利害关系。敏捷开发不仅对软件开发很重要，而且对我们的行业、社会和最终的文明都很重要。</p><p>开发人员和管理人员常常因为一些短暂的原因而被敏捷开发所吸引。他们可能会尝试，因为他们只是觉得这样做是对的，或者他们可能会相信速度和质量的承诺。这些原因是无形的，模糊的，很容易挫败。许多人放弃敏捷开发仅仅是因为他们没有立即体验到他们认为的敏捷承诺的结果。</p><p>这些稍纵即逝的理由并不是敏捷开发重要的原因。敏捷开发对于更深层次的哲学和伦理原因非常重要。这些原因与我们的专业和客户的合理期望有关。</p><h4 id="专业主义"><a href="#专业主义" class="headerlink" title="专业主义"></a>专业主义</h4><p>软件已经遍布我们生活的方方面面，我们统治了世界，我们的软件错误可能会给其他人带来灾难，我们应该更专业。</p><h4 id="合理的期望"><a href="#合理的期望" class="headerlink" title="合理的期望"></a>合理的期望</h4><ul><li>我们不制作质量不合格的软件。</li><li>软件一直处于技术就绪状态，软件可以随时发布。</li><li>稳定的软件生产效率，我们开发软件的速率稳定。</li><li>廉价的适应性，软件应该易修改。</li><li>持续改进，软件应该是持续改进的。</li><li>无所畏惧的能力，当我们修改代码时，我们需要有机制给我们足够的信心。</li><li>QA 应该找不到任何 BUG，当 QA 检查软件时，开发团队应该让 QA 找不出任何 BUG。</li><li>测试应该自动化。</li><li>开发人员之间的工作应该可以随时交换，保证每个人的工作都可以交由其他人来完成，防止突发情况。</li><li>诚实的用户故事时间评估。</li><li>在必要时说不，我们是专业的，我们应该在不合理的地方说不。</li><li>持续积极的学习。</li><li>指导别人，与别人一起相互指导学习。</li></ul><h4 id="权力法案"><a href="#权力法案" class="headerlink" title="权力法案"></a>权力法案</h4><h5 id="客户权利法案"><a href="#客户权利法案" class="headerlink" title="客户权利法案"></a>客户权利法案</h5><ul><li>你有权利制定一个全面的计划，知道什么时候可以完成什么事情，要付出什么代价。</li><li>你有权从每个迭代中获得最大可能的价值。</li><li>你有权查看正在运行的系统的进展，并通过指定的可重复测试来验证其有效性。</li><li>你有权利改变你的想法，替换功能，改变优先级而不付出过高的成本。</li><li>你有权获知日程安排和评估变更，及时选择如何缩小范围以满足所需日期。你可以随时取消项目，并留下一个有用的可工作的系统，反映投资到目前为止的软件。</li></ul><h5 id="开发者权利法案"><a href="#开发者权利法案" class="headerlink" title="开发者权利法案"></a>开发者权利法案</h5><ul><li>你有权利知道什么需求是需要的，并带有明确描述与优先级。</li><li>你有权在任何时候都做出高质量的作品，业务不能强迫你降低质量。</li><li>你有权向同事、经理和客户寻求帮助并接受他们的帮助。</li><li>你有权作出和更新自己的评估，你可以在发现新因素时更改估算值，评估并不是承诺。</li><li>你有权利接受你的责任，而不是被分配给你，你有权力拒绝。</li></ul><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>敏捷是一个支持专业软件开发的纪律框架。敏捷不是一个流程，也不是时尚，也不仅仅是一些规则的集合。敏捷是一组权力、期望和纪律，它们构成了职业道德的基础。</p><h3 id="业务实践"><a href="#业务实践" class="headerlink" title="业务实践"></a>业务实践</h3><p>为了取得成功，开发必须遵循大量面向业务的实践。这些包括计划、小版本发布、验收测试和团队协作。</p><h4 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h4><h5 id="项目时间评估"><a href="#项目时间评估" class="headerlink" title="项目时间评估"></a>项目时间评估</h5><p>如果你想要一个准确而又精确的项目时间评估，你就需要把项目逐步分解，分解到越小越好，你甚至可以分解到单独的实现代码行数。你做这些的时间就是项目的精确预估时间，因为你所做的这些就是在开发实现一个软件。</p><p>评估就是猜测，我们想在不实际开发这个软件的情况下，猜测项目会花费的时间，所以这肯定是不精确的，想更精确，你花费在评估上的时间就要更多，这需要我们自己选择。</p><p>关于评估我们可以了解三变量评估和 PERT 评估方法。</p><h5 id="用户故事与点数"><a href="#用户故事与点数" class="headerlink" title="用户故事与点数"></a>用户故事与点数</h5><p>用户故事是从用户的角度描述系统特性的简短描述，例如：作为一名汽车司机，为了提高我的速度，我会更用力地踩油门踏板。（As the driver of a car, in order to increase my velocity, I will press my foot harder on the accelerator pedal）</p><p>通常，我们把故事写在索引卡上，不一定非要使用软件工具。</p><h5 id="ATM-用户故事示例"><a href="#ATM-用户故事示例" class="headerlink" title="ATM 用户故事示例"></a>ATM 用户故事示例</h5><p><strong>用户故事</strong></p><ul><li>取钱（Withdrawal）</li><li>存钱（Deposit）</li><li>转账（Transfer）</li><li>登录（Login）</li><li>登出（Logout）</li></ul><p>在迭代 0，我们团队写出了以上的 5 个用户故事， 我们也讨论了这些用户故事的细节，比如用户使用密码登录等，但是我们不相信这些细节，我们没有把他们写在故事卡上，我们在故事卡上只写了上面简短的单词。</p><p><strong>用户故事评估</strong></p><p>现在有了用户故事，开发、测试、项目管理或其他利益相关者一起开会来进行用户故事的评估，这样的会议会很多，每当有新的用户故事或者对之前的用户故事有了新的理解时，我们就会开用户故事评估相关的会议，这个会议是非正式的，每个迭代都会进行。</p><p>由于这是第一次用户故事评估，我们选择一个我们认为复杂度平均的用户故事来开始进行评估，我们选择登录用户故事，我们要求利益相关者回顾之前讨论的细节，这样我们就都能了解上下文，之后我们为这个用户故事选择一个数字 3，为什么是 3 呢？登录用户故事是一个平均故事，所以我们给它一个平均的数字，如果我们选择 1 到 6 来表用户故事评估，那 3 就是那个平均数字。</p><p>登录用户故事现在是我们的 Golden Story，之后所有的用户故事都会与之比较来进行评估，因此我们得出如下评估，登出 1、取钱 6、存钱 5、转账 3，我们把用户故事评估写在用户故事卡上。</p><p>用户故事的评估的数字并不表示周、天、时等其他时间单位，它只是个相对数字，只是表示需要付出努力的单位，和实际时间没有关系，可能有的人需要一天，有的人需要两天。</p><p><strong>计划迭代 1</strong></p><p>迭代以迭代计划会议（Iteration Planning Meeting (IPM)）开始，这个会议应该花费大约整个迭代 1/20 的时间，所有的团队成员都需要参加这个 IPM 会议，包括利益相关者、程序员、测试、项目经理。利益相关者查看用户故事，并按业务价值给它们排序。</p><p>利益相关者的主要工作是选出程序员和测试人员在这个迭代将要完成的用户故事，因此，他们需要知道程序员认为他们能完成多少，这个数字就是速率，由于这是第一个迭代，我们并不知道速率，所以我们随便猜一个数字，比如：30。</p><p>必须要说明的是，速率并不是承诺，他们甚至不是试着去完成 30 点，它只是个猜测。</p><p><strong>投资回报</strong></p><p>ROI （return on investment）和用户故事优先级评估。</p><p><img src="/posts/55/the-four-quadrant-game.png" alt=""></p><p><strong>中点检查</strong></p><p>在迭代的时间中点，我们发现我们只完成了 10 点，那利益相关者就需要从迭代中去除 10 点的用户故事。</p><p>到迭代结束可能只完成了 18 点，但这并不表示这个迭代失败了，一个迭代的目的是为了给管理者产生数据。</p><p><strong>昨天的天气</strong></p><p>现在我们知道了我们一个迭代可以完成 18 点，在下一个迭代我们应该计划 18 点。</p><p>今天天气的最佳预报是昨天的天气，迭代进展的最佳预测器是前一个迭代。</p><p>在 IPM 会议上，利益相关者选择 18 点的用户故事，这一次可能奇怪的事情发生了，在这个迭代，中点检查时发现已经完成了 12 点，因此利益相关者又增加了 6 点用户故事，总计划 24 点，可能结果我们完成了 22 点，因此下一个迭代就设置为 22 点。</p><p><strong>项目结束</strong></p><p>随着迭代持续进行，速率被持续增加到速率图中，每个人都知道我们有多快。</p><p>可能到了某个阶段，项目并没有实现所有的用户故事，但是项目却结束了，因为根据 ROI 原则，已经没有更多的用户故事值得去实现了，最早被写出来的用户故事的重要性可能早已消失不见了。</p><h5 id="用户故事"><a href="#用户故事" class="headerlink" title="用户故事"></a>用户故事</h5><p>用户故事应该遵循 INVEST 原则：</p><ul><li>I: Independent 独立，用户故事之间应该相互独立，这表示他们不需要以特定的顺序实现，登出不能要求登录先实现。</li><li>N: Negotiable 可协商，开发者可以和业务协商具体细节。</li><li>V: Valuable 有价值，用户故事必须对业务具有清晰和可量化的价值。</li><li>E: Estimable 可评估，用户故事必须具体到开发者可以评估。</li><li>S: Small 足够小，用户故事不应该大到需要一到两个开者一个单独迭代还不能实现。</li><li>T: Testable 可测试，业务应该能够清晰地写测试，以证明故事已经完成。</li></ul><h5 id="用户故事评估"><a href="#用户故事评估" class="headerlink" title="用户故事评估"></a>用户故事评估</h5><p><strong>方法 1：Flying Fingers</strong></p><p>开发者坐围着桌子坐，阅读用户故事并与利益相关者讨论（如果需要的话），然后开发者在背后伸出手指数量，然后所有开发者同时亮出手指，某个人统计所有开发者表示的点数，如果分歧很小并且有一个明显的平均值，记录下用户故事的评估，如果不统一，再次讨论，再次进行打分。</p><ul><li>大拇指向下表达 0</li><li>大拇指向上表达 ∞</li><li>打开手掌表达 ?</li></ul><p><strong>方法 2：Planning Poker</strong></p><p>通常使用斐波那契数列，?, 0, ½, 1, 2, 3, 5, 8, 13, 20, 40, 100, ∞。</p><ul><li>0 表示太过琐碎无法评估，可以把几个用户故事合并。</li><li>∞ 表示太大无法评估，用户故事应该被拆分。</li><li>? 表示你不知道，你需要一个 spike。</li></ul><p><strong>Spike</strong></p><p>一个 spike 是一个元故事，或者更确切地说，是一个用来估计一个故事的故事。你需要先去了解这个技术，然后才能对当前的故事做出评估，例如：你可以写一个用户故事为评估打印 PDF。</p><h5 id="管理迭代"><a href="#管理迭代" class="headerlink" title="管理迭代"></a>管理迭代</h5><p>每一个迭代的目的是通过完成用户故事来产生数据，团队应该着力于用户故事，而不是用户故事里的任务，完成了 80% 的用户故事，远好于把每个用户故事都完成了 80%。</p><p>管理者不要分配用户故事，而应该让他们自己来协商选择用户故事。</p><p>验收测试应该尽早写，尽量在迭代中点之前完成所有验收测试代码，QA 应该和程序员紧密配合。</p><p>真正的完成就是验收测试通过。</p><h4 id="小版本发布"><a href="#小版本发布" class="headerlink" title="小版本发布"></a>小版本发布</h4><p>小步快跑，才能跑的更快。把发布和部署分开，发布表示软件已经准备就绪，可以部署，部署只是业务方面的决定。</p><h4 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h4><p>验收测试是最少被理解、最少被使用、最混乱的敏捷实践。其基本思想非常简单：需求应该由业务来指定。</p><p>验收测试是一种规范，它也是一个测试，例如：当用户输入有效的用户名和密码，然后单击登录，系统将显示欢迎页面。</p><p><strong>工具和方法</strong></p><ul><li>FitNesse, JBehave, SpecFlow, Cucumber</li><li>BDD(Behavior-Driven Development)</li></ul><p><strong>实践</strong></p><p>验收测试由业务分析人员和 QA 在迭代中点之前编写。开发人员把这些测试集成进持续构建。这些测试就是用户故事完成的定义，只有通过这些测试才表示用户故事完成。</p><p>业务分析人员指定正常业务路径，QA 编写异常业务路径，开发者与业务分析人员和 QA 一起确保从技术角度来看这些测试是有意义的。</p><p>QA 不在是在最后阶段才进入保证质量，他们在每一个迭代的开始就介入开发团队来阻止错误和遗漏，最后他们来决定软件是否可以部署。</p><p>运行测试的工作应该由程序员来做，只有运行测试通过才表示他们的用户故事完成了，当然程序员可以通过持续构建来自动化这一测试过程。</p><h4 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h4><ul><li>团队所有成员应该坐在一起工作。</li><li>保证团队可以随时面对面交流。</li><li>远程办公也是可以的，只要能实时面对面沟通即可。</li></ul><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>敏捷想打破业务和开发团队之间的鸿沟，让业务和开发能更好的合作，面向业务的实践在满足这个目标方面扮演了重要的角色。通过遵循这些实践，业务和开发有了一种简单而明确的沟通方式。这种交流产生了信任。</p><h3 id="团队实践"><a href="#团队实践" class="headerlink" title="团队实践"></a>团队实践</h3><p>Ron Jeffries 的 Circle of Life 中间部分由敏捷团队实践组成。这些实践控制着团队成员之间以及他们所创建的产品之间的关系。我们将讨论的实践包括隐喻、可持续的速度、集体所有制和持续集成。</p><p>然后，我们将简要讨论所谓的站立会议（Standup Meetings）。</p><h4 id="隐喻"><a href="#隐喻" class="headerlink" title="隐喻"></a>隐喻</h4><p>寻找可以形象比喻项目或者项目中模块组件的词语，然后团队使用这个词语交流。领域驱动设计（Domain-Driven Design）使用统一语言（Ubiquitous Language）方便团队交流。</p><h4 id="可持续的速度"><a href="#可持续的速度" class="headerlink" title="可持续的速度"></a>可持续的速度</h4><ul><li>开发团队可持续的开发速度很重要。</li><li>通过加班来提高开发速度不可持续，可能会在加班期间做错误的决定，写错误的代码，最后反而会起反效果。</li><li>软件开发是一个马拉松过程，我们不能在早期就把体力用的过快，我们要维持可持续的速度。</li><li>开发工作不是体力劳动，加班并不能说明你工作努力且专业。</li><li>要保证有足够的睡眠。</li><li>偶尔加班是可以的，但这不能是常态。</li></ul><h4 id="集体所有制"><a href="#集体所有制" class="headerlink" title="集体所有制"></a>集体所有制</h4><p>代码集体所有，任何人随时都可以查看获取修改代码。</p><h4 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h4><ul><li>尽早的进行代码集成，尽早的发现错误，修改错误。</li><li>持续集成的极致是每次的代码提交都进行集成。</li><li>当持续集成失败时，所有人都不能提交代码，直到持续集成被修复。</li><li>当持续集成失败时，可以发报警邮件，甚至可以设置报警灯和报警声音。</li></ul><h4 id="每日站会"><a href="#每日站会" class="headerlink" title="每日站会"></a>每日站会</h4><p><strong>指导原则</strong></p><ul><li>会议是可选的。</li><li>可以不用每天都开，有意义时才需要开。</li><li>会议应该小 10 分钟，即使大团队。</li></ul><p><strong>发言规则</strong></p><ul><li>上次会议到现在我做了什么。</li><li>到下次会议之前我会做什么。</li><li>我碰到了什么困难。</li></ul><p>会议上不允许讨论，不允许深入解释。每个人都可以发言，包括经理等，只要他们遵守规则。你也可以在会议是感谢给你帮助的其他人。</p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p>敏捷就是一组原则、实践和纪律，帮助小的团队构建小的软件项目，本章节的实践帮助小团队表现的像一个真正的团队。帮助团队构建他们的交流语言，以及团队成员如何对待彼此和他们正在构建的项目的期望。</p><h3 id="技术实践"><a href="#技术实践" class="headerlink" title="技术实践"></a>技术实践</h3><p>本章中描述的实践与过去 70 年中大多数程序员的行为方式大不相同。它们强制执行一组深刻的、以分钟为单位的、以秒为单位的行为，大多数程序员最初都会认为这是荒谬的仪式性行为。因此，许多程序员试图在没有这些实践的情况下实现敏捷。然而，他们失败了，因为这些实践是敏捷的核心。没有 TDD，没有重构，没有简单设计，甚至没有结对编程，敏捷就变成了一个没有效率的松散外壳。</p><h4 id="测试驱动开发（Test-Driven-Development）"><a href="#测试驱动开发（Test-Driven-Development）" class="headerlink" title="测试驱动开发（Test-Driven Development）"></a>测试驱动开发（Test-Driven Development）</h4><p>先写测试代码，然后编写生产代码让测试通过，然后重构改善代码。</p><p>当使用 TDD 时，每一个需要的行为都被输入了两次，一次作为测试，一次作为使测试通过的生产代码，它们是互补的，当一起执行的时候，产生 0 结果，0 个测试失败。</p><p><strong>TDD 三原则</strong></p><ul><li>在编写失败的测试代码之前，不要写任何生产代码。</li><li>在有测试失败的情况下不要再写测试代码，编译失败也是失败的测试。</li><li>只编写足够的生产代码来让测试通过。</li></ul><p>没有经过数月练习 TDD 的程序员可能觉得这些原则有些怪异，甚至无法接受。</p><p>使用 TDD 的程序员很少 Debugging，因为新的代码都是几分前引入的，那么错误也就是这段时间引入的，很容易找到出错的代码。</p><p>如果你遵循了 TDD 原则，你写的测试可能就是软件最好的文档，测试里有软件或者库的多种使用方式。</p><p>每一个新测试都是一个挑战，每一次你写代码让测试通过，你就完成了一个挑战，这样一直下去你会感觉这不像忙碌的工作，感觉像让东西工作起来。</p><p>遵守三原则会给你一个完善的测试套件，但是这并不是 100% 完整的，并不是只有达到 100% 代码覆盖率才能进行软件部署，90% 的覆盖率已经很不错了，不要把代码覆盖率当作目标和管理指标。</p><p>由于先编写测试，你需要让你们代码更容易测试，因为松耦合的代码更容易测试，所以你需要解耦代码，这样你的代码设计也会更好。</p><p>由于测试比较完整，当你看到需要改善的代码时，你可以放心的修改它，因为有测试代码帮你验证，你的改动有没有影响到之前的功能。</p><h4 id="重构（Refactoring）"><a href="#重构（Refactoring）" class="headerlink" title="重构（Refactoring）"></a>重构（Refactoring）</h4><p>在不改变软件外在行为的情况下，改善代码的内部设计。</p><p>重构与 TDD 密切相关，为了不害怕重构代码，我们需要完整的测试来给我们非常高的信心，以保证我们的修改不会破坏之前的功能。</p><p><strong>红绿重构</strong></p><p><img src="/posts/55/red-green-refactor.png" alt=""></p><ul><li>首先，我们创建一个失败的测试。</li><li>然后，我们编写代码让测试通过。</li><li>然后， 我们重构让代码变的整洁。</li><li>回到开始的步骤。</li></ul><p>我们不预留时间来进行大的重构，我们以一次一小步的方式的迁移代码，同时继续添加新功能，这个改变可能会持续数天、数周甚至数月，在这期间，系统可以一直通过测试，并且可以部署到生产环境。</p><h4 id="简单设计（Simple-Design）"><a href="#简单设计（Simple-Design）" class="headerlink" title="简单设计（Simple Design）"></a>简单设计（Simple Design）</h4><p><strong>Kent Beck 的简单设计原则</strong></p><ul><li>通过所有测试：完成所有功能。</li><li>表明意图：之后要考虑重构让代码能表达程序员的意图，代码要易于阅读，自描述。</li><li>去除重复：之后要考虑重构去除重复代码，可能会使用到设计模式等。</li><li>减少元素：最后考虑减少代码元素，比如类、函数、变量等。</li></ul><p><strong>设计的重量</strong></p><p>设计越复杂，程序员的认知负担就越大，程序员就越难理解和操作系统，这就是设计的重量。程序员持续重构系统来保持需求与简单设计的平衡，保持最大的生产力。</p><h4 id="结对编程（Pair-Programming）"><a href="#结对编程（Pair-Programming）" class="headerlink" title="结对编程（Pair Programming）"></a>结对编程（Pair Programming）</h4><p>两个人在同一个编程问题上工作，他们可能分享屏幕、键盘和鼠标，只要他们看和操作同一块的代码即可。结对编程有时会用不同的角色。</p><ul><li>一个是司机，一个是导航员，司机有键盘和鼠标，导航员会有更长远的视角并给出建议。</li><li>一个程序员写测试代码，别一个程序员写生产代码让测试通过，然后交换角色继续。</li><li>最常见的情况是根本没有角色。程序员只是以协作的方式共享鼠标和键盘的作者。</li></ul><p>结对编程不是按期进行的，程序员根据自己的偏好来决定。结对编程是短期的，一次结对编程可能持续一天，但是通常情况下不会多于一到两个小时。</p><p>用户故事不是分配给结对编程的，用户故事是分配给独立的开发者的。</p><p>在一周的时间内，每个程序员将花费大约一半的结对时间来完成自己的任务，并寻求其他几个人的帮助。另一半的配对时间将用于帮助其他人完成任务。</p><p>高级程序员应该注意与低级程序员结对编程，而不是与其他高级程序员结对编程。低级程序员应该更多地请求高级程序员的帮助。</p><p>具有专业技能的程序员应该花费大量的结对时间与他们专业以外的程序员一起工作。目的是传播和交换知识，防止形成知识简仓、知识孤岛。</p><p>结对编程是在团队成员之间共享知识和防止知识孤岛形成的最佳方式。</p><p>结对编程能减少了错误并提高设计质量。</p><p>结对编程是另一种形式的代码评审。</p><p>结对编程可能会多花 15% 的编码时间，一个简单的计算表明，一个团队 50% 的时间是结对的，那么它的生产力就会降低 8% 以下。另一方面，如果结对的实践代替了代码评审，那么很可能根本不会降低生产率。</p><p>结对编程并不只能有两个人。</p><p>管理者不要干涉结对编程，相信程序员。程序员也永远不要向管理者请求结对、测试和重构的时间，你是专家，你应该自己决定。</p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p>敏捷的技术实践是任何敏捷工作中最重要的组成部分。任何没有技术实践的敏捷实践尝试都注定要失败。原因很简单，敏捷是一种高效的机制，可以在很短的时间内把事情搞得一团糟。如果没有技术实践来保持高技术质量，团队的生产力将很快衰退并开始一个不可避免的死亡螺旋。</p><h3 id="实施敏捷"><a href="#实施敏捷" class="headerlink" title="实施敏捷"></a>实施敏捷</h3><p>当我第一次学习 XP 时，我想，还有什么比这更容易的呢？只需遵循一些简单的原则和实践。仅此而已。</p><p>然而，基于尝试敏捷却失败的组织的数量，成为敏捷肯定是非常非常困难的。也许所有这些失败的原因是许多组织都错误的认识了敏捷，他们认为的敏捷和敏捷原本的思想不同。</p><h4 id="敏捷价值"><a href="#敏捷价值" class="headerlink" title="敏捷价值"></a>敏捷价值</h4><p><strong>勇气</strong></p><p>部署最小的特性集需要勇气，维护高代码质量和高质量纪律也需要勇气。认为质量和纪律可以提高速度的信念是一种勇敢的信念，因为它将不断受到有权势但天真的人的挑战。</p><p><strong>沟通</strong></p><p>团队各成员可以更方便的面对面的、非正式的、人际间的对话。一个坐在一起并且交流频繁的团队可以创造奇迹。</p><p><strong>反馈</strong></p><p>敏捷原则实际上都是为那些需要做出重要决策的人提供快速的反馈。它们使我们能够尽早判断出什么时候出了问题，以便及时纠正。敏捷团队在反馈中茁壮成长。反馈是使团队高效工作的因素，也是推动项目取得有益成果的因素。</p><p><strong>简单</strong></p><p>简单性是指代码的直接性，以及沟通和行为的直接性。在代码中，一定数量的间接是必要的。间接是我们减少相互依赖复杂性的机制。在团队中，更少的间接是必要的。大多数时候，你想要尽可能的直接。保持代码简单，让团队更简单。</p><h4 id="怪物博物馆"><a href="#怪物博物馆" class="headerlink" title="怪物博物馆"></a>怪物博物馆</h4><p>众多的敏捷方法可能让你眼花缭乱，无论选择哪种方法，最终都将调整它以满足自己团队的需要。我所能给你的最有力的建议是充分采纳 Circle of Life，尤其是技术实践。选择一个方法，或者不选。确保你充分采纳了 Circle of Life。让团队同意。然后开始，记住勇气、沟通、反馈和简单，并定期调整规则和行为。不要请求许可。不要强调要把事情做好。只要在问题出现时解决它们，并继续将项目推向最佳结果。</p><h4 id="转型"><a href="#转型" class="headerlink" title="转型"></a>转型</h4><p>敏捷的价值观与中层管理的职责完全相反，高管也常常被敏捷的冒险、直接、交流的价值观所驱动。这是他们试图转型的原因之一。障碍是中间的管理层。这些人被雇佣来不承担风险，避免直接，以最少的沟通来遵循和执行命令链。这就是组织的困境。组织的顶层和底层重视敏捷思维，但是中间层反对它。</p><p>敏捷团队能够存在于一个拥有强大的反对敏捷的中层管理层的组织中吗？我曾见过这种情况。一些软件开发团队悄悄地使用敏捷价值来驱动他们的开发，同时也遵从中层管理强加给他们的严格要求。只要中层管理人员对他们遵循的过程和标准感到满意，他们就可以让开发团队自行处理。团队在幕后执行敏捷，同时提供满足中级管理层的一切。这些团队并没有与中层管理者进行一场徒劳的战斗，而是在敏捷之上增加了一层，使得敏捷看起来更安全，更符合中层管理者的需求。</p><p>敏捷转型在小的组织中更容易成功。</p><h4 id="教练"><a href="#教练" class="headerlink" title="教练"></a>教练</h4><p>敏捷培训师教导团队如何以敏捷的方式管理自己，他们经常是从企业外部人员或者团队外部人员。他们的任期应该很短。每个由十几个开发人员组成的团队应该只需要一到两周的培训。其他的一切他们需要学习的都要自学，不管敏捷培训师说什么或做什么。</p><p>敏捷教练不是培训师。他们是团队的成员，他们的角色是在团队中维护流程。在开发的高峰期，开发人员可能会不遵守敏捷流程。也许他们无意中停止了结对，停止了重构，或者忽略了连续构建中的失败。教练的工作就是看到这一点并把它指出来。教练作为团队的良心，总是提醒团队他们对自己的承诺和他们同意持有的价值观。</p><p>在一个团队转变的早期，培训师可能会临时填补教练的角色，但这是一个临时的情况。这个角色应该尽快在团队中选择，该角色通常根据需要按照非正式的时间表从一个团队成员轮换到下一个成员。一个成熟的团队稳步前进不需要教练。另一方面，一个团队在某种压力下，无论是日程安排、业务，还是人际关系，可能会决定让某个人暂时填补这个角色。</p><p>教练不是经理。教练不负责预算或时间表。教练不指导团队，也不向管理层代表团队的利益。教练不是客户和开发者之间的联络人。教练的角色是团队内部的。经理和客户都不知道教练是谁，甚至不知道现在是否有教练。</p><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><p>现有的敏捷认证完全是一个笑话，完全是荒谬的。不要把认证当回事。伴随认证项目的培训通常是值得的。然而，培训不应该专注于一个特定的角色，它应该适合团队中的每个人。</p><p>一个真正的敏捷认证项目应该是什么样的?这将是一个学期的课程，包括敏捷培训和一个小型敏捷项目的监督开发。这门课将被评分，学生们将被严格要求。认证人员将确保学生理解敏捷的价值，并在执行敏捷规程方面表现出熟练。</p><h4 id="大型敏捷"><a href="#大型敏捷" class="headerlink" title="大型敏捷"></a>大型敏捷</h4><p>敏捷团队只是众多需要在大型项目中协调的团队之一。不同团队的整合是一个已经解决的问题。我没有看到任何迹象表明软件团队的唯一性会过度地影响到他们对大型团队的集成。</p><p>在大范围内不存在敏捷这样的事情。敏捷是组织小型软件团队的必要创新。但是一旦组织起来，这些团队就适应了大型组织使用了数千年的结构。</p><h4 id="敏捷工具"><a href="#敏捷工具" class="headerlink" title="敏捷工具"></a>敏捷工具</h4><p>充分了解工具，才能用好工具，使用不当的工具甚至会对项目及其操作者造成伤害。</p><p>好的工具应该有如下特性：</p><ul><li>帮助人们实现他们的目标。</li><li>能很快学好。</li><li>对用户透明。</li><li>允许适配和扩展。</li><li>可负担得起。</li></ul><p>物理敏捷工具。敏捷使用者以使用白板、胶带、索引卡、记号笔和各种大小的便利贴(小的和翻页的)来对工作进行可视化管理而闻名。这些简单的手工工具具备所有伟大工具的品质：</p><ul><li>它们有助于使正在进行的工作可见并易于管理。</li><li>它们是符合直觉的，不需要训练。</li><li>它们只需要微不足道的认知开销。你可以在专注于其他任务时轻松地使用它们。</li><li>它们都不是专享的。这些工具都不是专门为管理软件开发而设计的。</li><li>它们适应性好。你可以用胶带或油灰粘在上面，把图片或图标夹在上面，把其他的指示符粘在上面，通过新颖的自定义颜色和图标来增加意义上的细微差别。</li><li>它们都很便宜，很容易买到。</li></ul><p>使用自动化工具的压力：</p><ul><li>软件工具提供了一种帮助确保以一致的形式捕获数据的好方法。</li><li>使用一致捕获的数据，您可以轻松地获得看起来很专业的报告、图表和图形。</li><li>提供历史记录和安全存储很容易。</li><li>你可以立即与每个人共享信息，无论他们居住在哪里。</li><li>使用在线电子表格之类的工具，你甚至可以让一个完全分布式的团队实时协作。</li></ul><p>考虑到大多数 ALM（Agile Lifecycle Management） 工具的当前状态，从物理工具开始可能更安全、更明智。之后，你可以考虑使用 ALM 工具。确保学习速度快，日常使用透明，容易适应，并在你的能力范围内获得和运行。最重要的是，确保它支持您的团队的工作方式，并为您的投资提供积极的回报。</p><h4 id="教练（另一种观点）"><a href="#教练（另一种观点）" class="headerlink" title="教练（另一种观点）"></a>教练（另一种观点）</h4><p>敏捷教练带领团队走向敏捷。</p><h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h4><p>在很多方面，这一章更多的是关于不做什么，而不是做什么。也许这是因为我见过太多不去敏捷的例子。但是，我仍然认为，就像我 20 年前想的那样，还有什么比这更容易的呢?只需遵循一些简单的原则和实践。仅此而已。</p><h3 id="匠艺"><a href="#匠艺" class="headerlink" title="匠艺"></a>匠艺</h3><p>兴奋。这就是许多开发人员第一次听说敏捷时的感受。对于我们大多数来自软件工厂和瀑布思想的开发人员来说，敏捷是解放的希望。我们希望在一个协作的环境中工作，我们的意见能够得到倾听和尊重。我们将有更好的工作流程和实践。我们将在小的迭代和短的反馈循环中工作。我们将定期将应用程序发布到生产环境中。我们会与用户互动并得到他们的反馈。我们会不断地检查和调整。</p><p>一开始，我们觉得敏捷好得让人难以置信。我们认为我们的公司永远不会接受敏捷思维，更不用说敏捷实践了。但他们大多数人都这么做了，我们对此感到非常惊讶。突然，一切都变了。我们有产品 backlog 和用户故事，而不是需求文档。我们有物理看板和燃尽图，而不是甘特图。我们有便利贴，我们每天早上根据进度来移动它们。这些便利贴有一种强大的力量，它能引发一种深深的心理瘾。他们是我们敏捷性的代表。我们贴在墙上的便签越多，我们就越觉得自己敏捷。我们变成了一个 Scrum 团队，而不是一个构建团队。我们再也没有项目经理了。我们被告知我们不需要管理，我们的经理将成为产品所有者，我们将自我管理。我们被告知，产品所有者和开发人员将作为一个单独的团队密切协作。从现在开始，作为 Scrum 团队，我们不仅被授权做出技术决策，还被授权做出与项目相关的决策。我们是这么想的。</p><p>敏捷席卷了软件行业。但是，就像在中国的耳语游戏中一样，最初的敏捷思想被扭曲和简化了，在公司看来，这是一个更快交付软件的过程的承诺。对于使用瀑布或 RUP 的公司和管理人员来说，这就是他们喜欢的音乐。经理和利益相关者都很兴奋。说到底，谁不想变得敏捷呢?谁不想更快地交付软件呢？即使是持怀疑态度的人，也不能拒绝敏捷。如果你的竞争对手在宣传他们是敏捷的，而你不是，那么这又会给你带来什么呢？你的潜在客户会怎么看你？公司不能承担不敏捷的后果。在敏捷峰会之后的几年里，全世界的公司都开始了他们的敏捷转型。敏捷转变的时代已经开始了。</p><h4 id="敏捷的宿醉"><a href="#敏捷的宿醉" class="headerlink" title="敏捷的宿醉"></a>敏捷的宿醉</h4><p>敏捷的转变过程并不容易，公司需要借助外部的帮助，敏捷教练这一职位的数量大量需要，出现了许多敏捷相关的认证，这其中的大多数证书都很容易获得。</p><p>向中层经理推销敏捷过程很容易，他们都希望软件能够更快地交付。经理们被告知，工程是容易的部分，如果我们修正了流程，工程就会被修正。这一直是人的问题。然后经理们相信了。</p><p>希望推动开发人员更快工作的管理人员正在使用过程的完全透明性来对他们进行微管理。既没有业务经验也没有技术经验的敏捷教练是在指导经理并告诉开发团队该做什么。路线图和里程碑是由经理定义的，并强制开发团队开发人员可以评估工作，但是他们很难将自己的评估纳入强加的里程碑中。在接下来的 6 到 12 个月中，经常可以看到项目的所有迭代和各自的用户场景已经被管理层定义。未能在 sprint 中交付所有的故事点意味着开发人员必须在下一个 sprint 中更加努力地工作以弥补延迟。日常的站立会议变成了开发人员必须向产品负责人和敏捷教练报告进展的会议，详细说明他们正在做什么，什么时候完成。如果产品负责人认为开发人员在自动化测试、重构或结对之类的事情上花费了太多时间，他们只会告诉团队停止这样做。战略技术工作在他们的敏捷过程中没有地位。不需要架构或设计。顺序是简单地将重点放在待办事项列表中优先级最高的项上，然后尽快完成一个又一个优先级最高的项。这种方法导致了一长串迭代的战术工作和技术债务的积累。脆弱的软件，著名的单体(或尝试微服务的团队的分布式单体)成为规范。bug 和操作问题是日常站立会议和回顾会议中的热门讨论主题。发布到产品中的频率不像业务预期的那么频繁。手工测试周期仍然需要几天(如果不是几周的话)才能完成。采用敏捷可以避免所有这些问题的希望已经破灭了。经理们指责开发人员行动不够迅速。开发人员指责管理人员不允许他们完成所需的技术和战略工作。产品负责人不认为自己是团队的一部分，当事情出错时也不承担责任。“我们对他们”的文化占据了主导地位。这就是我们所谓的敏捷宿醉。 经过多年的敏捷转型投资，公司意识到他们仍然遇到许多以前的问题。 当然，敏捷也因此而受到指责。</p><h4 id="期望不匹配"><a href="#期望不匹配" class="headerlink" title="期望不匹配"></a>期望不匹配</h4><p>纯粹关注过程的敏捷转换是部分转换。虽然敏捷教练试图通过敏捷过程来指导经理和交付团队，但是没有人帮助开发人员学习敏捷技术实践和工程。修正人们之间的协作将改进工程的假设是大错特错的。</p><p>敏捷的采用带来了一个很大的期望：开发团队应该在完成一个特性时，或者至少在每次迭代结束时，交付准备好生产的软件。对于大多数开发团队来说，这是一个重要的变化。如果不改变他们的工作方式，他们是不可能做到这一点的，这意味着学习和掌握新的实践。但也有一些问题。在敏捷转换期间，很少有用于提高开发人员技能的预算。业务部门并不期望开发人员在采用敏捷时放慢速度。大多数人甚至不知道开发人员必须学习新的实践。他们被告知，如果他们以一种更协作的方式工作，开发人员的工作速度会更快。</p><p>认为团队仅仅通过创建一个更具协作性的环境来开发这些技能是不现实的。团队在获取这些技术技能时需要支持。这种支持可以通过指导、培训、实验和自学的结合来实现。业务敏捷性与公司发展软件的速度直接相关，这意味着他们的工程技能和技术实践的发展。</p><h4 id="远离"><a href="#远离" class="headerlink" title="远离"></a>远离</h4><p>对于一些采用敏捷管理的公司，尽管公司确实比以前更好了，但是敏捷过程和工程之间的分歧仍然在伤害着他们。大多数现代敏捷教练没有足够的(如果有的话)技术技能来指导开发人员进行技术实践，而且他们很少谈论工程。多年来，开发人员开始将敏捷教练视为另一层管理：人们告诉他们做什么，而不是帮助他们更好地完成工作。</p><p>随着对技术技能的关注越来越少，敏捷是否能够显著地改进软件项目？敏捷是否仍然像敏捷宣言中所写的那样，专注于通过开发和帮助其他人来发现更好的软件开发方法?我不太确定。</p><h4 id="软件匠艺"><a href="#软件匠艺" class="headerlink" title="软件匠艺"></a>软件匠艺</h4><p>为了提高专业软件开发的标准并重新确立一些最初的敏捷目标，一组开发人员于 2008 年 11 月在芝加哥开会，创建了一个新的运动:软件工艺。在那次会议上，与 2001 年敏捷峰会期间的情况类似，他们就一套核心价值观达成了一致，并提出了一份新的宣言。</p><p>As aspiring Software Craftsmen we are raising the bar of professional software development by practicing it and helping others learn the craft. Through this work we have come to value:</p><ul><li>Not only working software, but also well-crafted software.</li><li>Not only responding to change, but also steadily adding value.</li><li>Not only individuals and interactions, but also a community of professionals.</li><li>Not only customer collaboration, but also productive partnerships.</li><li>That is, in pursuit of the items on the left we have found the items on the right to be indispensable.</li></ul><p>作为有理想的软件工匠，我们一直身体力行，提升专业软件开发的标准，并帮助他人学习此工艺。通过这些工作，我们建立了如下价值观：</p><ul><li>不仅要让软件工作，更要精益求精。</li><li>不仅要响应变化，更要稳步增加价值。</li><li>不仅要有个体与交互，更要形成专业人员的社区。</li><li>不仅要与客户合作，更要建立卓有成效的伙伴关系。</li><li>也就是说，左项固然值得追求，右项同样不可或缺。</li></ul><p>精心编写的软件意味着经过良好设计和测试的代码。我们并不害怕更改代码，正是这些代码使业务能够快速做出反应。它是既灵活又健壮的代码。</p><p>稳步增值意味着无论我们做什么，我们都应该致力于不断为客户和雇主提供增值服务。</p><p>一个由专业人士组成的社区意味着我们需要互相分享和学习，从而提高我们行业的水平。我们负责培养下一代的开发人员。</p><p>富有成效的伙伴关系意味着我们将与客户和雇主建立专业关系。我们将始终保持职业道德和尊重的态度，以最好的方式为客户和雇主提供建议和工作。我们期待相互尊重和专业的关系，即使我们需要采取主动，以身作则。</p><h4 id="思想与方法"><a href="#思想与方法" class="headerlink" title="思想与方法"></a>思想与方法</h4><p>意识形态是一种思想和理想的体系。方法学是方法和实践的系统。意识形态定义了目标的理想。一种或多种方法可以用来达到这些理想，它们是达到目的的手段。当我们看到敏捷宣言和 12 条原则时，我们可以清楚地看到它们背后的意识形态。</p><p>敏捷的主要目标是提供业务敏捷性和客户满意度，这是通过紧密协作，迭代开发，较短的反馈循环和卓越的技术来实现的。 诸如 Scrum，极限编程（XP），动态系统开发方法（DSDM），自适应软件开发（ASD），Crystal 方法，功能驱动开发（FDD）和其他敏捷方法之类的方法都是为了达到同一目的。</p><p>方法和实践就像训练轮，他们很容易带动人们。 与学习骑自行车的孩子一样，训练轮使他们能够以安全且受控的方式上手。 一旦他们更加自信，我们就会稍微抬高训练轮，以便他们练习平衡。 然后，我们将其中一个训练轮取下。 然后另一个。 此时，孩子已准备好独自行走。 但是，如果我们过多地关注训练轮的重要性，并且将其保持太长时间，则孩子会过于依赖训练轮，不希望将其卸下。 对方法论或一组实践的过分关注使团队和组织偏离了他们的实际目标。 目的是教孩子骑脚踏车，而不要使用辅助轮。</p><h4 id="软件匠艺有实践吗"><a href="#软件匠艺有实践吗" class="headerlink" title="软件匠艺有实践吗"></a>软件匠艺有实践吗</h4><p>软件匠艺社区认为 XP 是当前可用的最佳敏捷开发实践集。 TDD，重构，简单设计，持续集成和结对编程在软件匠艺社区中得到了大力倡导-但它们是 XP 的实践，而不是匠艺的实践。 它们不是唯一的做法。 匠艺还倡导清洁规范和 SOLID 原则。 它促进小提交，小发布和持续交付。 它促进了软件设计和任何自动化类型的模块化，从而消除了手动和重复的工作。 而且，它倡导任何可提高生产率，降低风险并有助于生产有价值，强大而灵活的软件的实践。</p><p>匠艺不仅仅涉及技术实践，工程和自我完善。 这也与专业精神有关，并使客户能够实现其业务目标。 这是敏捷，精益和手工艺完美融合的领域。 这三个目标都有相似的目标，但从不同但同样重要和互补的角度解决问题。</p><h4 id="关注价值，而不是实践"><a href="#关注价值，而不是实践" class="headerlink" title="关注价值，而不是实践"></a>关注价值，而不是实践</h4><p>敏捷和软件匠艺社区中的一个常见错误是推广实践而不是其提供的价值。 让我们以 TDD 为例。 在软件匠艺社区中最常见的问题之一是“我如何说服我的经理/同事/团队进行 TDD？”这是一个错误的问题。 这里的问题是我们在达成一致意见之前就提供了解决方案。 如果人们看不到价值，人们将不会改变他们的工作方式。</p><p>在讨论实践时，首先要商定要实现的目标至关重要。 唯一不应该接受的事情是拒绝实践，而不提供更好的选择。</p><h4 id="讨论实践"><a href="#讨论实践" class="headerlink" title="讨论实践"></a>讨论实践</h4><p>有关实践的讨论应在适当的级别和适当的人员进行。如果我们想采用改善业务与技术之间协作的实践，则应将业务和技术领域的人员参与其中。如果开发人员正在讨论使他们能够以更好的方式构建系统的实践，则没有理由让业务人员参与其中。仅在项目成本或项目持续时间有重大影响时，才应参与业务人员。</p><p>开发人员不应要求编写测试的授权。他们不应为单元测试或重构承担单独的任务。这些技术活动应纳入任何功能的开发之中。它们不是可选的。经理和开发人员应该只讨论将交付什么以及何时交付，而不是如何交付。每次开发人员自愿提供有关工作方式的详细信息时，他们都会邀请经理对其进行微观管理。</p><p>我们是说开发人员应该隐藏他们的工作方式吗？一点都不。开发人员应该能够向感兴趣的人清楚地描述他们的工作方式以及以这种方式工作的优势。开发人员不应该做的是让其他人决定他们的工作方式。开发人员与企业之间的对话应该是关于为什么，什么以及何时进行的，而不是如何进行的。</p><h4 id="匠艺对个人的影响"><a href="#匠艺对个人的影响" class="headerlink" title="匠艺对个人的影响"></a>匠艺对个人的影响</h4><p>人们通常将自己的生活与职业生活区分开来。诸如“离开办公室后我不想谈论工作”或“我对生活有不同的兴趣”等短语的表达方式使工作看起来像家务琐事，一件坏事或者你必须要做的事情，而不是你想要做的事情。将我们的生活分成多种生活的问题是，他们一直在发生冲突。总是有一种感觉，无论我们选择哪种生活，我们都必须牺牲另一种生活。</p><p>匠艺可以促进软件开发作为一种职业。工作和职业是有区别的。工作是我们要做的事情，但不是我们自己的一部分。专业是我们的一部分。专业是我们投资的东西。我们想要变得更好。我们希望获得更多技能，并拥有长期而充实的职业。</p><p>这并不意味着我们不会与家人在一起，也不会在生活中拥有其他利益。相反，这意味着我们将找到一种平衡所有承诺和利益的方法。有时候，我们想更加关注我们的家庭，我们的职业或我们可能有的爱好。那完全可以。我们在不同的时期有不同的需求。但是，当我们有专业时，上班不应该是一件繁琐的事。它应该是给我们带来快乐的事情，并使我们成为个人。专业赋予我们生活以意义。</p><h4 id="匠艺对行业的影响"><a href="#匠艺对行业的影响" class="headerlink" title="匠艺对行业的影响"></a>匠艺对行业的影响</h4><p>自 2008 年以来，在世界范围内组织了越来越多的软件匠艺社区和会议，吸引了成千上万的开发人员。敏捷社区侧重于软件项目的人员和流程方面，而匠艺社区则更侧重于技术方面。它们是向全球许多开发人员和公司推广 XP 和其他许多技术实践的关键。通过软件匠艺社区，许多开发人员正在学习 TDD，持续集成，结对编程，简单设计，SOLID 原理，简洁代码和重构。他们还学习如何使用微服务构建系统，如何自动化其部署管道以及如何将其系统迁移到云。他们正在学习不同的编程语言和范例。他们正在学习新技术以及测试和维护其应用程序的不同方法。匠艺社区的开发人员正在创建安全和友好的空间，在那里他们可以结识志趣相投的人并谈论他们的职业。</p><p>软件匠艺社区极为包容。从一开始，软件匠艺的主要目标之一就是将来自各个背景的软件开发人员召集在一起，以便他们可以互相学习并提高专业软件开发的水准。匠艺社区与技术无关，所有开发人员，无论其经验水平如何，均欢迎参加会议。该社区致力于培养下一代专业人员，举办各种活动，使加入我们行业的人们可以学习构建实用软件的基本实践。</p><h4 id="匠艺对公司的影响"><a href="#匠艺对公司的影响" class="headerlink" title="匠艺对公司的影响"></a>匠艺对公司的影响</h4><p>软件匠艺的采用正在增长。许多采用敏捷的公司现在都在寻求匠艺来提高其工程能力。但是，软件匠艺具有与敏捷不同的业务吸引力。 XP 仍然是许多经理不了解或不感到兴奋的东西。经理了解 Scrum，迭代，演示，回顾，协作和快速反馈循环。但是他们对与编程相关的技术并不那么感兴趣。对于大多数人而言，XP 与编程有关，而不与敏捷软件开发有关。</p><p>软件匠艺思想是许多开发人员的灵感。它给他们一种目的感，一种自豪感以及一种天生善于做事的意愿。一般而言，大多数开发人员都热衷于学习和做好事情，他们只需要支持和可以蓬勃发展的环境。拥护软件匠艺的公司通常会看到内部实践社区蓬勃发展。开发人员组织内部会议，他们在一起编码，练习 TDD 并提高他们的软件设计技能。他们对学习新技术和使他们工作的系统现代化感兴趣。他们讨论了改进代码库和消除技术借方的更好方法。软件匠艺促进了一种学习文化，使公司更具创新性和响应能力。</p><h4 id="匠艺与敏捷"><a href="#匠艺与敏捷" class="headerlink" title="匠艺与敏捷"></a>匠艺与敏捷</h4><p>创建软件匠艺运动的一些触发因素与许多开发人员对敏捷开发的挫败感有关。因此，有些人认为软件匠艺和敏捷相互矛盾。参加过敏捷运动的软件匠艺运动人士批评敏捷过分关注过程，而缺乏对工程的关注。敏捷运动中的人们批评软件匠艺的关注点太窄或缺乏对实际业务和人员问题的关注。</p><p>尽管双方都有一些合理的担忧，但大多数分歧更多是与部落主义有关，而不是实际的根本分歧。本质上，两个运动都希望实现非常相似的目标。他们俩都希望客户满意，他们都希望紧密合作，并且都重视短暂的反馈循环。两者都希望提供高质量，有价值的工作，并且都希望专业。为了实现业务敏捷性，公司不仅需要协作和迭代的过程，还需要良好的工程技能。将敏捷与软件匠艺相结合是实现这一目标的完美方法。</p><h4 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h4><p>在 2001 年的 Snowbird 会议上，Kent Beck 说，敏捷是关于治愈开发与业务之间的鸿沟。 不幸的是，当项目经理涌入敏捷社区时，最初创建敏捷社区的开发人员被剥夺了价值，并低估了他们。 因此，他们离开去参加软件匠艺运动。 因此，古老的不信任仍在继续。但是，敏捷的价值和软件匠艺的价值是高度一致的。 这两个动作不应分开。 希望有一天，他们能再聚在一起。</p><h3 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3><p>敏捷可能是我们所见过的所有关于软件过程和方法的革命中最重要、最持久的。这种重要性和坚持不懈的精神证明，2001 年 2 月，那 17 个人去犹他州的 Snowbird，开始了一场从一个很长的山上滚下来的雪球运动。骑着雪球，看着雪球越滚越大、越滚越快，看着雪球打在石头和树上，对我来说真是一件乐事。</p><p>我写这本书是因为我认为是时候有人站出来大声疾呼敏捷是什么，敏捷应该是什么。我想是时候记住这些基础知识了。</p><p>这些基本的东西过去是，现在是，将来也会是 Ron Jeffries 的 Circle of Life。这些基础就是 Kent Beck 所阐述的极限编程的价值观、原则和纪律。这些基础是 Martin Fowler 重构的动机、技术和纪律。这些基础是 Booch、DeMarco、Yourdon、Constantine、Page-Jones 和 Lister 提出的。</p><p>这些基本原则是古老的、经过考验的、正确的。不管在边缘添加了多少新的绒毛，这些基础仍然存在，仍然相关，仍然是敏捷软件开发的核心。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> agile </tag>
            
            <tag> TDD </tag>
            
            <tag> XP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个非前端开发者的CSS布局学习笔记</title>
      <link href="/posts/54/"/>
      <url>/posts/54/</url>
      
        <content type="html"><![CDATA[<p>在 Web 前端开发中，CSS 布局是非常重要的知识技能。本篇文章主要是记录我在学习 CSS 布局知识时的学习笔记，阅读之前需要你了解部分的 CSS 和 HTML 知识。</p><a id="more"></a><h3 id="几个重要的-CSS-布局相关属性"><a href="#几个重要的-CSS-布局相关属性" class="headerlink" title="几个重要的 CSS 布局相关属性"></a>几个重要的 CSS 布局相关属性</h3><h4 id="display-属性"><a href="#display-属性" class="headerlink" title="display 属性"></a>display 属性</h4><p><code>display</code>是 CSS 中非常重要的用来控制布局的属性， HTML 中每个元素都有一个默认的<code>display</code>属性，大多数元素该属性的默认值为<code>block</code>或<code>inline</code>，<code>block</code>元素被称为块级元素，<code>inline</code>元素通常被称为行内元素。<code>display</code>属性值通常有如下几种取值：</p><ul><li><code>block</code>：块级元素。它会新开始一行，HTML 中大多数元素都默认为该值，如：<code>div</code>、<code>p</code>、<code>form</code>等元素。</li><li><code>inline</code>：行内元素。它不会新开始一行，行内元素可以在段落中而不打乱段落布局。<code>span</code>、<code>a</code>等元素默认为该值。</li><li><code>inline-block</code>：它是 <code>block</code> 和 <code>inline</code> 的结合体，主要用来把块级元素变换为行内元素，方便布局。</li><li><code>flex</code>：一种新的布局方式，可以让布局更简单。</li><li><code>none</code>：设置为该值的元素会被隐藏，布局时此类型元素可以不用考虑。</li></ul><h4 id="margin-属性"><a href="#margin-属性" class="headerlink" title="margin 属性"></a>margin 属性</h4><p><code>margin</code>属性用于指定本元素距离周围元素的距离，在布局时，会经常用到。</p><h4 id="max-width-属性"><a href="#max-width-属性" class="headerlink" title="max-width 属性"></a>max-width 属性</h4><p><code>max-width</code>用于指定当前元素最大宽度，当父容器宽度变小时，元素宽度会减小，但是当父容器宽度变大时，该元素最大宽度为指定宽度。</p><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>CSS 元素由内容、内边距、边框、外边距组成，我们平时设置元素的 <code>width</code> 和 <code>height</code> 等相关属性时，默认情况下，设置的都只是内容的大小，内边距，边框、外边距都可能会增大元素的实际大小。具体内容可能参考这篇文章：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model" target="_blank" rel="noopener">CSS 基础框盒模型介绍</a>。</p><p>如下所示，两个<code>div</code>元素都设置了同样的宽度，但是设置了外边距和边框的<code>div</code>元素明显实际宽度更大一些。</p><p><img src="/posts/54/box-model.png" alt=""></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #box-model .simple &#123;</span></span><br><span class="line"><span class="undefined">        width: 500px;</span></span><br><span class="line"><span class="undefined">        margin: 20px auto;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #box-model .fancy &#123;</span></span><br><span class="line"><span class="undefined">        width: 500px;</span></span><br><span class="line"><span class="undefined">        margin: 20px auto;</span></span><br><span class="line"><span class="undefined">        padding: 50px;</span></span><br><span class="line"><span class="undefined">        border: 10px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"simple"</span>&gt;</span></span><br><span class="line">    I'm use box-sizing, My width is 500px.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fancy"</span>&gt;</span></span><br><span class="line">    I'm use box-sizing, My width is 500px.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="box-sizing-属性"><a href="#box-sizing-属性" class="headerlink" title="box-sizing 属性"></a>box-sizing 属性</h4><p>当把一个元素的 <code>box-sizing</code> 属性设置为 <code>border-box</code> 时，内边距和边框不会再增加元素的实际大小。</p><p>如下所示，两个<code>div</code>元素都设置了同样的宽度，但是设置了内边距和边框的<code>div</code>元素实际宽度没有变大。</p><p><img src="/posts/54/box-sizing.png" alt=""></p><p>代码示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #box-sizing .simple &#123;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        width: 500px;</span></span><br><span class="line"><span class="undefined">        margin: 20px auto;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #box-sizing .fancy &#123;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        width: 500px;</span></span><br><span class="line"><span class="undefined">        margin: 20px auto;</span></span><br><span class="line"><span class="undefined">        padding: 50px;</span></span><br><span class="line"><span class="undefined">        border: 10px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"simple"</span>&gt;</span></span><br><span class="line">I'm use box-sizing, My width is 500px.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fancy"</span>&gt;</span></span><br><span class="line">I'm use box-sizing, My width is 500px.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-position-布局"><a href="#使用-position-布局" class="headerlink" title="使用  position 布局"></a>使用  position 布局</h3><h4 id="position-属性"><a href="#position-属性" class="headerlink" title="position 属性"></a>position 属性</h4><p><code>position</code> 属性是 CSS 布局中常用的属性，可以有如下的取值：</p><ul><li><code>static</code>：默认值，当一个元素被设置为 <code>static</code> 时，表示元素不能被 <code>positioned</code>（主要为<code>absolute</code>服务）。</li><li><code>relative</code>：与 <code>static</code> 基本一致，区别在于元素可以被 <code>positioned</code> 。</li><li><code>fixed</code>：固定定位，元素会相对于整个视窗（可以理解为浏览器窗口）定位，即使页面发生滚动，它还是会停留在相同的位置。</li><li><code>absolute</code>：绝对定位，与 <code>fixed</code> 相似，但它的定位是相对于最近的可以被 <code>positioned</code> 的祖先元素。</li></ul><h4 id="position-布局示例"><a href="#position-布局示例" class="headerlink" title="position 布局示例"></a>position 布局示例</h4><p>使用 <code>position</code> 完成如下所示的布局：</p><p><img src="/posts/54/position-layout.png" alt=""></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #position-layout &#123;</span></span><br><span class="line"><span class="undefined">        width: 90%;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #position-layout .nav &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        top: 0px;</span></span><br><span class="line"><span class="undefined">        left: 0px;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        padding-left: 20px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #position-layout section &#123;</span></span><br><span class="line"><span class="undefined">        margin-left: 200px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid orange;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"position-layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        This is a long section too.This is a long section too.This is a long</span><br><span class="line">        section too.This is a long section too.This is a long section too.This</span><br><span class="line">        is a long section too.This is a long section too.This is a long section</span><br><span class="line">        too.This is a long section too.This is a long section too.This is a long</span><br><span class="line">        section too.This is a long section too.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-float-布局"><a href="#使用-float-布局" class="headerlink" title="使用 float 布局"></a>使用 float 布局</h3><h4 id="float-属性"><a href="#float-属性" class="headerlink" title="float 属性"></a>float 属性</h4><p>为了防止影响后续元素，在使用 <code>float</code> 时注意使用 <code>clear</code> 清除浮动。</p><p><code>float</code> 可以用于实现如下所示的文字环绕图片效果：</p><p><img src="/posts/54/float.png" alt=""></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #float &#123;</span></span><br><span class="line"><span class="undefined">        overflow: auto;</span></span><br><span class="line"><span class="undefined">        border: 2px solid orange;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #float img &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        margin: 0 1em 1em 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #float:after &#123;</span></span><br><span class="line"><span class="undefined">        content: '.';</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        height: 0;</span></span><br><span class="line"><span class="undefined">        clear: both;</span></span><br><span class="line"><span class="undefined">        visibility: hidden;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"float"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">         <span class="attr">src</span>=<span class="string">"https://cn.bing.com/th?id=OHR.RhinosOxpecker_ZH-CN6392794613_1920x1080.jpg"</span></span></span><br><span class="line"><span class="tag">         /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        犀牛（学名：Dicerorhinus）是哺乳类犀科的总称，有4属5种。是世界上最大的奇蹄目动物，</span><br><span class="line">        犀类动物腿短、体肥笨拙，体长2.2-4.5米，肩高1.2-2米，体重2000-5000千克。前后肢均三趾；</span><br><span class="line">        皮厚粗糙，并于肩腰等处成褶皱排列，毛被稀少而硬，甚或大部无毛；耳呈卵圆形，头大而长，颈短粗，长唇延长伸出；</span><br><span class="line">        头部有实心的独角或双角（有的雌性无角），起源于真皮，角脱落仍能复生；无犬齿；尾细短，身体呈黄褐、褐、黑或灰色。</span><br><span class="line">        栖息于低地或海拔2000多米的高地。夜间活动，独居或结成小群。生活区域从不脱离水源。食性因种类而异，</span><br><span class="line">        以草类为主，或以树叶、嫩枝、野果、地衣等为食物。母兽妊娠期18-19个月。寿命30-50年。</span><br><span class="line">        因犀牛角的装饰和药用价值而被大量捕捉，除白犀外均为濒危物种。分布于亚洲南部、东南亚和非洲撒哈拉以南地区</span><br><span class="line">        9月22日是“世界犀牛日”（World Rhino</span><br><span class="line">        Day）。2010年，“世界犀牛日”由南非世界自然基金会创办（WWF-South</span><br><span class="line">        Africa），现已为全世界广泛接受。该活动旨在关注全球稀有动物。</span><br><span class="line">        在渐新世出现了有史以来最大陆生哺乳动物——巨犀，它体格健壮和高大，体长约8米，身高5米。不过虽然巨犀和犀牛同属奇蹄目，但并不属于犀牛科。</span><br><span class="line">        中新世的后期，出现了独角犀牛的祖先。独角犀牛仅存爪哇犀牛和印度犀牛，均分布在亚洲。在中新世以后出现的犀牛体型与现代犀牛相接近。</span><br><span class="line">        其中有下唇比上唇略大些的大唇犀，下颌有两颗大牙向前伸出，生活在沼泽地带，以水中的植物为食。</span><br><span class="line">        上新世后期（约300万年前），双角犀牛出现。双角犀牛有苏门达腊犀、白犀牛和黑犀牛。第四纪时期人类已经出现，早期的犀牛以板齿犀、披毛犀为代表。</span><br><span class="line">        板齿犀个体巨大，5米长，身披厚甲，在额部生有大角，约2米长，牙齿的齿冠高，呈方柱状，草地上生活，</span><br><span class="line">        更新世时期在中国华北的及欧洲等地曾有板齿犀生活；披毛犀和猛犸象外形相似，巨大的身体及长着粗毛的厚皮可以抵御寒冷，长鼻上有一对巨角，</span><br><span class="line">        前面一支最长可达1米，生活在寒冷地带。这两种犀类先后在不同的时期都已经灭绝了。</span><br><span class="line">        在犀类的后代中，现仅残存有犀牛科的4属5种，主要分布在亚洲和非洲，其中分布在亚洲的犀牛已经濒临绝种。</span><br><span class="line">        主要是因为犀牛角作为药材，其实犀牛角跟指甲是一样的构造，随数量减少现在也不容易买到真正的犀牛角，</span><br><span class="line">        市场还得以购买是因为现在商贩懂得以牛角替代来获利，甚至用相似成分的猫狗爪磨成假货变换充数。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="float-布局示例"><a href="#float-布局示例" class="headerlink" title="float 布局示例"></a>float 布局示例</h4><p>使用 <code>float</code> 完成如下所示的布局：</p><p><img src="/posts/54/float-layout.png" alt=""></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #float-layout &#123;</span></span><br><span class="line"><span class="undefined">        width: 90%;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #float-layout .nav &#123;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        padding-left: 20px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #float-layout section &#123;</span></span><br><span class="line"><span class="undefined">        margin-left: 200px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid orange;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #float-layout:after &#123;</span></span><br><span class="line"><span class="undefined">        content: '.';</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        height: 0;</span></span><br><span class="line"><span class="undefined">        clear: both;</span></span><br><span class="line"><span class="undefined">        visibility: hidden;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"float-layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        This is a long section too.This is a long section too.This is a long</span><br><span class="line">        section too.This is a long section too.This is a long section too.This</span><br><span class="line">        is a long section too.This is a long section too.This is a long section</span><br><span class="line">        too.This is a long section too.This is a long section too.This is a long</span><br><span class="line">        section too.This is a long section too.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-inline-block-布局"><a href="#使用-inline-block-布局" class="headerlink" title="使用 inline-block 布局"></a>使用 inline-block 布局</h3><h4 id="使用-inline-block-的注意事项"><a href="#使用-inline-block-的注意事项" class="headerlink" title="使用 inline-block 的注意事项"></a>使用 inline-block 的注意事项</h4><ul><li><code>vertical-align</code> 属性会影响到 <code>inline-block</code> 元素，可能需要把它的值设置为 <code>top</code> 。</li><li>需要设置每一列的宽度</li><li>如果源代码中 <code>inline-block</code> 元素之间有空格或者换行，那么列之间会产生空隙。如果同行的元素使用了百分比宽度且加起来和是100%宽度，但是由于代码的换行，导致列之间有空隙，会出现元素无法排列在同一行的现象。</li></ul><h4 id="inline-block-布局示例"><a href="#inline-block-布局示例" class="headerlink" title="inline-block 布局示例"></a>inline-block 布局示例</h4><p>使用 <code>inline-block</code> 完成如下所示的布局：</p><p><img src="/posts/54/inline-block-layout.png" alt=""></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #inline-block-layout &#123;</span></span><br><span class="line"><span class="undefined">        width: 90%;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">        font-size: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #inline-block-layout .nav &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">        vertical-align: top;</span></span><br><span class="line"><span class="undefined">        width: 25%;</span></span><br><span class="line"><span class="undefined">        padding-left: 20px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        font-size: 16px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #inline-block-layout .column &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">        vertical-align: top;</span></span><br><span class="line"><span class="undefined">        width: 75%;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        font-size: 16px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #inline-block-layout .column section &#123;</span></span><br><span class="line"><span class="undefined">        border: 2px solid orange;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inline-block-layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            This is a long section.This is a long section.This is a long</span><br><span class="line">            section.This is a long section.This is a long section.This is a long</span><br><span class="line">            section.This is a long section.This is a long section.This is a long</span><br><span class="line">            section.This is a long section.This is a long section.This is a long</span><br><span class="line">            section.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            This is a long section too.This is a long section too.This is a long</span><br><span class="line">            section too.This is a long section too.This is a long section too.This</span><br><span class="line">            is a long section too.This is a long section too.This is a long</span><br><span class="line">            section too.This is a long section too.This is a long section too.This</span><br><span class="line">            is a long section too.This is a long section too.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-flexbox-布局"><a href="#使用-flexbox-布局" class="headerlink" title="使用 flexbox 布局"></a>使用 flexbox 布局</h3><p><code>flextbox</code> 是一种新的布局方式，可能会有一些旧的浏览器无法支持 <code>flexbox</code> 布局。使用<code>flexbox</code>布局可以轻松实现复杂的布局，可以非常容易的实现垂直居中和水平居中，使用起来极为方便。</p><h4 id="flexbox-简单布局示例"><a href="#flexbox-简单布局示例" class="headerlink" title="flexbox 简单布局示例"></a>flexbox 简单布局示例</h4><p>使用 <code>flexbox</code> 完成如下所示的布局：</p><p><img src="/posts/54/flexbox-layout.png" alt=""></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #flexbox-layout &#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        width: 90%;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-layout .nav &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        padding-left: 20px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-layout .column &#123;</span></span><br><span class="line"><span class="undefined">        flex: 1;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-layout .column section &#123;</span></span><br><span class="line"><span class="undefined">        border: 2px solid orange;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"flexbox-layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            This is a long section.This is a long section.This is a long</span><br><span class="line">            section.This is a long section.This is a long section.This is a long</span><br><span class="line">            section.This is a long section.This is a long section.This is a long</span><br><span class="line">            section.This is a long section.This is a long section.This is a long</span><br><span class="line">            section.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            This is a long section too.This is a long section too.This is a long</span><br><span class="line">            section too.This is a long section too.This is a long section too.This</span><br><span class="line">            is a long section too.This is a long section too.This is a long</span><br><span class="line">            section too.This is a long section too.This is a long section too.This</span><br><span class="line">            is a long section too.This is a long section too.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="flexbox-复杂布局示例"><a href="#flexbox-复杂布局示例" class="headerlink" title="flexbox 复杂布局示例"></a>flexbox 复杂布局示例</h4><p>实现如下所示四列布局方式，左边两列固定宽度，右边两列分别占剩下的空间1/3和2/3。</p><p><img src="/posts/54/flexbox-complex-layout.png" alt=""></p><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #flexbox-complex-layout &#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        width: 90%;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-complex-layout .nav &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        min-width: 100px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-complex-layout .carousel &#123;</span></span><br><span class="line"><span class="undefined">        flex: none;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-complex-layout .column1 &#123;</span></span><br><span class="line"><span class="undefined">        flex: 1;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-complex-layout .column2 &#123;</span></span><br><span class="line"><span class="undefined">        flex: 2;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"flexbox-complex-layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">        I have 200px width when the space is enough, otherwise my width is</span><br><span class="line">        100px.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel"</span>&gt;</span></span><br><span class="line">        I have 200px width whenever the space is enough or not.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column1"</span>&gt;</span></span><br><span class="line">        I have one third width of the left space.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column2"</span>&gt;</span></span><br><span class="line">        I have two third width of the left space.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="flexbox-水平与垂直居中示例"><a href="#flexbox-水平与垂直居中示例" class="headerlink" title="flexbox 水平与垂直居中示例"></a>flexbox 水平与垂直居中示例</h4><p>实现如下所示的水平与垂直方向上的居中。</p><p><img src="/posts/54/flexbox-center.png" alt=""></p><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #flexbox-easy-center &#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        width: 90%;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        align-items: center;</span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-easy-center section &#123;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"flexbox-easy-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        I'm in the middle of the container.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="媒体查询与响应式"><a href="#媒体查询与响应式" class="headerlink" title="媒体查询与响应式"></a>媒体查询与响应式</h3><p>布局随着不同大小的视窗动态调整布局，这就被称为响应式布局，响应式布局可以通过媒体查询来实现。</p><p>如下图表示，当视窗的宽度大于<code>600px</code>时，采用两栏式布局，当宽度小于<code>600px</code>时，采用单栏式布局，菜单也切换为横向菜单。</p><p><img src="/posts/54/./media-query-1.png" alt=""></p><p><img src="/posts/54/./media-query-2.png" alt=""></p><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #media-query &#123;</span></span><br><span class="line"><span class="undefined">        width: 90%;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #media-query .nav &#123;</span></span><br><span class="line"><span class="undefined">        padding-left: 20px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #media-query section &#123;</span></span><br><span class="line"><span class="undefined">        border: 2px solid orange;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    @media screen and (min-width: 600px) &#123;</span></span><br><span class="line"><span class="undefined">        #media-query .nav &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            top: 0px;</span></span><br><span class="line"><span class="undefined">            left: 0px;</span></span><br><span class="line"><span class="undefined">            width: 25%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        #media-query section &#123;</span></span><br><span class="line"><span class="undefined">            margin-left: 25%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    @media screen and (max-width: 599px) &#123;</span></span><br><span class="line"><span class="undefined">        #media-query .nav li &#123;</span></span><br><span class="line"><span class="undefined">            display: inline;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"media-query"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        This is a long section too.This is a long section too.This is a long</span><br><span class="line">        section too.This is a long section too.This is a long section too.This</span><br><span class="line">        is a long section too.This is a long section too.This is a long section</span><br><span class="line">        too.This is a long section too.This is a long section too.This is a long</span><br><span class="line">        section too.This is a long section too.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元素居中"><a href="#元素居中" class="headerlink" title="元素居中"></a>元素居中</h3><p>元素居中是常用的布局技巧，包括水平居中和垂直居中。下文的居中示例代码使用的通用CSS代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  h4 &#123;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #align-center &gt; div &#123;</span></span><br><span class="line"><span class="undefined">    margin-top: 50px;</span></span><br><span class="line"><span class="undefined">    width: 100%;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #align-center .child &#123;</span></span><br><span class="line"><span class="undefined">    height: 30px;</span></span><br><span class="line"><span class="undefined">    border: 2px solid black;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #vertical-center &gt; div &#123;</span></span><br><span class="line"><span class="undefined">    margin-top: 50px;</span></span><br><span class="line"><span class="undefined">    width: 100%;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #vertical-center .child &#123;</span></span><br><span class="line"><span class="undefined">    height: 30px;</span></span><br><span class="line"><span class="undefined">    border: 2px solid black;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="水平居中的常用方法"><a href="#水平居中的常用方法" class="headerlink" title="水平居中的常用方法"></a>水平居中的常用方法</h4><p>水平居中包括以下几种常见实现方式。水平居中效果如下图所示：</p><p><img src="/posts/54/align-center.png" alt=""></p><h5 id="子元素为inline"><a href="#子元素为inline" class="headerlink" title="子元素为inline"></a>子元素为<code>inline</code></h5><p>父元素设置<code>text-align: center</code>，代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #align-center &gt; .inline &#123;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">    border: 2px solid green;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #align-center &gt; .inline &gt; .child &#123;</span></span><br><span class="line"><span class="undefined">    display: inline;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"align-center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>I am inline<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="子元素为block并且宽度固定"><a href="#子元素为block并且宽度固定" class="headerlink" title="子元素为block并且宽度固定"></a>子元素为<code>block</code>并且宽度固定</h5><p>子元素设置<code>margin: 0 auto</code>，代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #align-center &gt; .block-width &#123;</span></span><br><span class="line"><span class="undefined">    border: 2px solid blue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #align-center &gt; .block-width &gt; .child &#123;</span></span><br><span class="line"><span class="undefined">    display: block;</span></span><br><span class="line"><span class="undefined">    width: 200px;</span></span><br><span class="line"><span class="undefined">    margin: 0 auto;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"align-center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block-width"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">      I am block with width</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="子元素为block并且宽度不固定"><a href="#子元素为block并且宽度不固定" class="headerlink" title="子元素为block并且宽度不固定"></a>子元素为<code>block</code>并且宽度不固定</h5><p>设置子元素<code>display: inline</code>，设置父元素<code>text-align: center</code>，代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #align-center &gt; .block-no-width &#123;</span></span><br><span class="line"><span class="undefined">    border: 2px solid red;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #align-center &gt; .block-no-width &gt; .child &#123;</span></span><br><span class="line"><span class="undefined">    display: inline;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"align-center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block-no-width"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">      I am block without width</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用transform"><a href="#使用transform" class="headerlink" title="使用transform"></a>使用<code>transform</code></h5><p>父元素设置<code>position: relative</code>，子元素使用绝对定位与<code>transform</code>配合实现，代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #align-center &gt; .transform &#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">    border: 2px solid orange;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #align-center &gt; .transform &gt; .child &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    transform: translate(-50%, 0);</span></span><br><span class="line"><span class="undefined">    left: 50%;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"align-center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"transform"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">      I am transform</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用flex"><a href="#使用flex" class="headerlink" title="使用flex"></a>使用<code>flex</code></h5><p>父元素设置<code>flex</code>布局与<code>justify-content: center</code>，代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #align-center &gt; .flex &#123;</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    border: 2px solid purple;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"align-center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>I am flex<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="垂直居中的常用方法"><a href="#垂直居中的常用方法" class="headerlink" title="垂直居中的常用方法"></a>垂直居中的常用方法</h4><p>垂直居中包括以下几种常见实现方式。水平居中效果如下图所示：</p><p><img src="/posts/54/vertical-center.png" alt=""></p><h5 id="子元素为block"><a href="#子元素为block" class="headerlink" title="子元素为block"></a>子元素为<code>block</code></h5><p>父元素设置<code>position: relative</code>，子元素使用绝对定位与<code>margin</code>配合实现，代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #vertical-center &gt; .block &#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">    border: 2px solid green;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #vertical-center &gt; .block &gt; .child &#123;</span></span><br><span class="line"><span class="undefined">    display: block;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    margin: auto;</span></span><br><span class="line"><span class="undefined">    top: 0;</span></span><br><span class="line"><span class="undefined">    bottom: 0;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vertical-center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>I am block<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="子元素为inline-1"><a href="#子元素为inline-1" class="headerlink" title="子元素为inline"></a>子元素为<code>inline</code></h5><p>父元素设置<code>line-height</code>与<code>height</code>值相等，代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #vertical-center &gt; .inline &#123;</span></span><br><span class="line"><span class="undefined">    border: 2px solid blue;</span></span><br><span class="line"><span class="undefined">    line-height: 100px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #vertical-center &gt; .inline &gt; .child &#123;</span></span><br><span class="line"><span class="undefined">    display: inline;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vertical-center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>I am inline<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="子元素为inline-block"><a href="#子元素为inline-block" class="headerlink" title="子元素为inline-block"></a>子元素为<code>inline-block</code></h5><p>父元素添加<code>after</code>伪元素，子元素设置<code>vertical-align: middle</code>，代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #vertical-center &gt; .inline-block &#123;</span></span><br><span class="line"><span class="undefined">    border: 2px solid red;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #vertical-center &gt; .inline-block:after &#123;</span></span><br><span class="line"><span class="undefined">    content: '';</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">    display: inline-block;</span></span><br><span class="line"><span class="undefined">    vertical-align: middle;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #vertical-center &gt; .inline-block &gt; .child &#123;</span></span><br><span class="line"><span class="undefined">    display: inline-block;</span></span><br><span class="line"><span class="undefined">    vertical-align: middle;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vertical-center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>I am inline-block<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用transform-1"><a href="#使用transform-1" class="headerlink" title="使用transform"></a>使用<code>transform</code></h5><p>父元素设置<code>position: relative</code>，子元素使用绝对定义配合<code>transform</code>实现，代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #vertical-center &gt; .transform &#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">    border: 2px solid orange;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #vertical-center &gt; .transform &gt; .child &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    transform: translate(0, -50%);</span></span><br><span class="line"><span class="undefined">    top: 50%;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vertical-center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"transform"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>I am transform<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用flex-1"><a href="#使用flex-1" class="headerlink" title="使用flex"></a>使用<code>flex</code></h5><p>父元素设置<code>flex</code>布局与<code>align-items: center</code>，代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #vertical-center &gt; .flex &#123;</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">    border: 2px solid purple;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vertical-center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>I am flex<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://zh.learnlayout.com/" target="_blank" rel="noopener">https://zh.learnlayout.com/</a></li><li><a href="https://louiszhai.github.io/2016/03/12/css-center/" target="_blank" rel="noopener">https://louiszhai.github.io/2016/03/12/css-center/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你听说过测试驱动开发吗？</title>
      <link href="/posts/53/"/>
      <url>/posts/53/</url>
      
        <content type="html"><![CDATA[<h3 id="TDD-是什么"><a href="#TDD-是什么" class="headerlink" title="TDD 是什么"></a>TDD 是什么</h3><p>根据维基百科的定义，测试驱动开发（Test-driven development 简称为 TDD）是一种软件开发过程，这种软件开发过程依赖于对一个非常短的开发循环周期的重复执行。先把需求转换成非常具体的测试用例，然后对软件进行编码让测试用例通过，最后对软件进行改进重构，消除代码的重复，保持代码整洁。没有测试验证的功能，不为会为其编写代码。</p><p>TDD 是由多个非常短的开发循环周期组成，一个 TDD 开发循环包括如下的3个步骤：</p><ol><li>编写测试，让测试运行失败，此时代码处于红色状态。</li><li>编写生产代码，让测试通过，此时代码处于绿色状态。</li><li>重构代码，消除重复，此时代码处于重构状态。</li></ol><p>这3个步骤就是人们常说的红、绿、重构循环，这就是一个完整的 TDD 开发循环周期。</p><p>TDD 起源于极限编程中的测试先行编程原则，最早由 Kent Beck 提出。TDD 是一种编程技巧，TDD 的主要目标是让代码整洁简单无 Bug。世界著名的软件大师 Kent Beck、Martin Fowler、Robert C. Martin 均表示支持 TDD 开发模式，他们甚至和 David Heinemeier Hansson 就 TDD 本身以及 TDD 对软件设计开发的影响有过深入的讨论：<a href="https://martinfowler.com/articles/is-tdd-dead/" target="_blank" rel="noopener">Is TDD Dead?</a></p><a id="more"></a><h3 id="TDD-的优点"><a href="#TDD-的优点" class="headerlink" title="TDD 的优点"></a>TDD 的优点</h3><p>TDD 的优点有很多，下面列出几点我认为比较重要的优点：</p><ul><li>开发人员更了解业务，更懂得任务分解：由于测试用例需要从用户或者使用者的角度来进行描述，这就要求开发人员能更加充分的了解业务，只有更充分的了解业务，才能写好测试用例，而且由于测试应该尽量小，这也就会促使我们把开发任务分解的更小，只有把任务分解的更小，我们才能达到 TDD 理想的小步快跑的状态。</li><li>代码测试覆盖率高，bug 少：由于先写测试，然后才能写生产代码，只有所有测试通过开发人员才能提交代码，这就会使得代码的测试覆盖率非常高，代码测试覆盖率高能表明我们的代码是经过充分测试的，这样生产中会碰到的 bug 就会相对少许多。</li><li>更自信的重构：由于代码的测试覆盖率高，每个功能都有对应的测试代码，开发人员可以更大胆进行重构，因为有充分的测试代码，当我们重构时，如果破坏了原有的功能，测试就会马上失败，这可以让开发人员在开发阶段就能发现问题，问题越早发现，修复的成本就越低。开发人员不会因为修改代码导致其他功能的损坏却不能及时发现，引发生产 bug 而变得畏手畏脚，开发人员重构代码也会变得非常自信。</li><li>代码整洁易扩展：由于 TDD 开发循环中，我们在不断重构代码，消除代码的坏味道，这会让我们得到更加整洁的代码，为了让软件更加容易测试，这会让我们更深入地思考评估我们的软件架构，从而改善优化我们的软件架构，让软件更加的灵活易扩展。</li><li>不会出现生产无用的代码：由于我们先把需求转换成测试用例，并且我们只为通过测试来编写最少的代码，这样我们几乎不会编写出生产无用的代码，我们所有的代码都是为相应的需求来服务的。</li></ul><h3 id="TDD-开发循环"><a href="#TDD-开发循环" class="headerlink" title="TDD 开发循环"></a>TDD 开发循环</h3><p>一个完整的 TDD 开发循环如下图所示：</p><p><img src="/posts/53/TDD-flow.png" alt=""></p><ol><li>编写测试，测试应该尽量小。运行测试，测试会失败，编译不通过也是一种失败，如果测试没有失败，这表明这个测试没有任何意义，因为这个测试既没有帮助我们实现需求，也没有帮助我们修复 bug 完善代码。这可能是如下的原因导致的：<ul><li>我们在上一次 TDD 循环中，生产代码编写的太多，已经把这次的测试需要测试的功能实现了。</li><li>我们在之前的测试中忽略了这一次测试中应该测试的部分。</li></ul></li><li>编写最少的代码让测试通过。为了尽量脱离测试无法通过的状态中，此步骤中可以使用特殊的方法，比如使用伪实现直接返回常量结果值，然后在重构阶段逐渐替换常量为真正的实现。</li><li>重构代码，减少代码中的重复代码，清除代码中的坏味道。清除生产代码与测试间的重复设计。这一步骤非常的重要，没有这一步骤的 TDD 开发是没有灵魂的 TDD 开发模式，并且可能导致你得到一个比不使用 TDD 开发模式开发出来的还要糟糕的软件。</li><li>重复上述步骤。</li></ol><h3 id="TDD-开发原则"><a href="#TDD-开发原则" class="headerlink" title="TDD 开发原则"></a>TDD 开发原则</h3><p><strong>TDD 三定律</strong></p><ol><li>在编写不能通过的单元测试前，不可编写生产代码。这是 TDD 开发最重要的原则，是 TDD 得以实行的重要指导原则，这条原则包含两层含义：<ul><li>测试先行，在编写生产代码之前要先编写测试代码。</li><li>只有在编写的测试失败的情况下，才能进行生产代码的编写。</li></ul></li><li>只可编写刚好无法通过的单元测试，不能编译也算是不通过。这条原则指导我们在编写测试时，也应该把测试尽量的拆分的小一些，不要指望一个测试就能完整的测试一整个功能。</li><li>只可编写刚好足以通过当前失败测试的生产代码。这条原则告诉我们要编写尽量少的生产代码，尽快脱离测试失败的状态，这里的尽量少的代码并不是表示让你使用语法糖来达到使用少的代码行数，处理更多的事情的目标，这里尽量少的代码的意思是，只需要编写能通过测试的代码即可，不需要处理所有情况，比如异常情况等。这可以通过后面的测试来驱动我们来写这些处理异常情况的代码。</li></ol><p><strong>TDD 开发策略</strong></p><ol><li>伪实现，直接返回常量，并在重构阶段使用变量逐渐替换常量。</li><li>明显实现，由于代码逻辑简单，可以直接写出代码实现。</li><li>三角法，通过添加测试使用其失败，逐渐驱动我们朝目标前进。</li></ol><p>根据错误的情况，伪实现和明显实现可以交替进行，当开发进行顺畅时，可以使用明显实现，当开发过程中经常碰到错误时，可以使用伪实现，慢慢找回自信，然后再使用明显实现进行开发。当完全没有实现思路或者实现思路不清晰时， 可以使用三角法来驱动我们开发，逐渐理清思路。</p><h3 id="TDD-的难点"><a href="#TDD-的难点" class="headerlink" title="TDD 的难点"></a>TDD 的难点</h3><ul><li>任务分解到底需要多细？我们需要把功能分解成多小的任务才合适呢？然后把测试分解多小才合适呢？这是一个比较难的问题，没有人能确切给出答案，一切都需要你自己去体会，去练习，去不断的尝试，去学习，去积累经验。</li><li>到底要测试什么？如果我们测试写的不好，很容易造成测试代码需要跟着生产代码被频繁的修改，这样测试不仅没有给我们的代码带来好处，反而给我们的重构带来很多的额外的负担。关于要测试什么，有一句正确但却无法给你具体建议名言：“测试行为，不要测试实现”，这也是需要长时间的去学习，去练习，去体会的。简单来说你应该测试所有公开给别人使用的接口，类，函数等，而内部私有的你可以选择性的测试，具体的关于应该如何写测试，可以观看如下的关于如何测试的公开演讲视频：<ul><li><a href="https://dave.cheney.net/2019/04/03/absolute-unit-test" target="_blank" rel="noopener">https://dave.cheney.net/2019/04/03/absolute-unit-test</a></li><li><a href="https://www.youtube.com/watch?v=EZ05e7EMOLM" target="_blank" rel="noopener">https://www.youtube.com/watch?v=EZ05e7EMOLM</a></li></ul></li></ul><h3 id="TDD-开发示例"><a href="#TDD-开发示例" class="headerlink" title="TDD 开发示例"></a>TDD 开发示例</h3><p>我们使用 Go 语言来开发一个简单的 http 服务来演示 TDD 开发模式。服务支持如下的两种功能：</p><ul><li><code>GET /users/{name}</code> 会返回用户使用 POST 方法 调用 API 的次数。</li><li><code>POST /users/{name}</code> 会记录用户的一次 API 调用，把之前的 API 调用次数加1。</li></ul><p>TDD 示例代码仓库地址 <a href="https://github.com/mgxian/tdd-example" target="_blank" rel="noopener">https://github.com/mgxian/tdd-example</a></p><h4 id="任务分解"><a href="#任务分解" class="headerlink" title="任务分解"></a>任务分解</h4><ul><li>实现 GET 请求<ul><li>验证响应码</li><li>验证返回 API 调用次数</li><li>验证不存在的用户</li></ul></li><li>实现 POST 请求<ul><li>验证响应码</li><li>验证是否调用了记录函数</li><li>验证调用记录是否正确</li></ul></li><li>集成测试</li><li>完善主程序</li></ul><h4 id="实现-GET-请求"><a href="#实现-GET-请求" class="headerlink" title="实现 GET 请求"></a>实现 GET 请求</h4><h5 id="先写测试"><a href="#先写测试" class="headerlink" title="先写测试"></a>先写测试</h5><p>测试获取 will 的 API 调用次数，并验证响应码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"return will's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">request, _ := http.NewRequest(http.MethodGet, <span class="string">"/users/will"</span>, <span class="literal">nil</span>)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">UserServer(response, request)</span><br><span class="line">got := response.Code</span><br><span class="line">want := http.StatusOK</span><br><span class="line"><span class="keyword">if</span> got != want &#123;</span><br><span class="line">t.Errorf(<span class="string">"got %d, want %d"</span>, got, want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试你会得到如下所示的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\user_test.go:13:3: undefined: UserServer</span><br></pre></td></tr></table></figure><h5 id="编写最少的代码让测试能运行并检查失败的测试输出"><a href="#编写最少的代码让测试能运行并检查失败的测试输出" class="headerlink" title="编写最少的代码让测试能运行并检查失败的测试输出"></a>编写最少的代码让测试能运行并检查失败的测试输出</h5><p>现在让我们添加对<code>UserServer</code>函数的定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserServer</span><span class="params">()</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>再次运行测试你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.\user_test.go:13:13: too many arguments in call to UserServer</span><br><span class="line">        have (*httptest.ResponseRecorder, *http.Request)</span><br><span class="line">        want ()</span><br></pre></td></tr></table></figure><p>现在让我们给函数添加相应的参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserServer</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>再次运行测试，测试通过了。</p><h5 id="先写测试-1"><a href="#先写测试-1" class="headerlink" title="先写测试"></a>先写测试</h5><p>测试响应数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"return will's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">request, _ := http.NewRequest(http.MethodGet, <span class="string">"/users/will"</span>, <span class="literal">nil</span>)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">UserServer(response, request)</span><br><span class="line">got := response.Code</span><br><span class="line">want := http.StatusOK</span><br><span class="line"><span class="keyword">if</span> got != want &#123;</span><br><span class="line">t.Errorf(<span class="string">"got %d, want %d"</span>, got, want)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gotCount := response.Body.String()</span><br><span class="line">wantCount := <span class="string">"6"</span></span><br><span class="line"><span class="keyword">if</span> gotCount != wantCount &#123;</span><br><span class="line">t.Errorf(<span class="string">"got % q, want % q"</span>, gotCount, wantCount)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_test.go:23: got &quot;&quot;, want &quot;6&quot;</span><br></pre></td></tr></table></figure><h5 id="编写足够的代码让测试通过"><a href="#编写足够的代码让测试通过" class="headerlink" title="编写足够的代码让测试通过"></a>编写足够的代码让测试通过</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserServer</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprint(w, <span class="string">"6"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在测试通过，但是你肯定会想骂人了，你这是写的啥，直接给写死了返回值？说好的不要写死呢？先别着急，由于我们没有存储数据的地方，现在返回一个固定值让测试通过，也不能说不是一个好办法，后面我们会来解决这个问题的。</p><h5 id="完成主程序的结构"><a href="#完成主程序的结构" class="headerlink" title="完成主程序的结构"></a>完成主程序的结构</h5><p>我们尽量早的把经过验证的生产代码，放到主程序中，这样我们可以尽快的得到一个可运行的软件，而且后续的程序结构的改动，可以及时发现。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">handler := http.HandlerFunc(UserServer)</span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":5000"</span>, handler); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"could not listen on port 5000 %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="先写测试-2"><a href="#先写测试-2" class="headerlink" title="先写测试"></a>先写测试</h5><p>现在让我们再尝试获取 mgxian 的 API 调用数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">t.Run(<span class="string">"return mgxian's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">request, _ := http.NewRequest(http.MethodGet, <span class="string">"/users/mgxian"</span>, <span class="literal">nil</span>)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">UserServer(response, request)</span><br><span class="line">got := response.Code</span><br><span class="line">want := http.StatusOK</span><br><span class="line"><span class="keyword">if</span> got != want &#123;</span><br><span class="line">t.Errorf(<span class="string">"got %d, want %d"</span>, got, want)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gotCount := response.Body.String()</span><br><span class="line">wantCount := <span class="string">"8"</span></span><br><span class="line"><span class="keyword">if</span> gotCount != wantCount &#123;</span><br><span class="line">t.Errorf(<span class="string">"got % q, want % q"</span>, gotCount, wantCount)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在运行测试，你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_test.go:40: got &quot;6&quot;, want &quot;8&quot;</span><br></pre></td></tr></table></figure><h5 id="编写足够的代码让测试通过-1"><a href="#编写足够的代码让测试通过-1" class="headerlink" title="编写足够的代码让测试通过"></a>编写足够的代码让测试通过</h5><p>现在让我们来修复这个错误，为了能让我们能根据 user 的不同来响应不同的内容，我们需要从 URL 中获取到 user ，测试驱动着我们完成接下来的工作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserServer</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line"><span class="keyword">if</span> user == <span class="string">"will"</span> &#123;</span><br><span class="line">fmt.Fprint(w, <span class="string">"6"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user == <span class="string">"mgxian"</span> &#123;</span><br><span class="line">fmt.Fprint(w, <span class="string">"8"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试通过。</p><h5 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h5><p>根据 user 来响应不同内容的逻辑我们可以放在一个单独的函数中去。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserServer</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line">apiCallCount := GetUserAPICallCount(user)</span><br><span class="line">fmt.Fprint(w, apiCallCount)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserAPICallCount</span><span class="params">(user <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> user == <span class="string">"will"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"6"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user == <span class="string">"mgxian"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"8"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重构之后，运行测试，测试通过，我们观察到我们的测试程序有部分代码是重复的，我们也可以进行重构，不仅生产代码需要重构，测试代码也需要重构。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"return will's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"will"</span></span><br><span class="line">request := newGetUserAPICallCountRequest(user)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">UserServer(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"6"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"return mgxian's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"mgxian"</span></span><br><span class="line">request := newGetUserAPICallCountRequest(user)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">UserServer(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"8"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newGetUserAPICallCountRequest</span><span class="params">(user <span class="keyword">string</span>)</span> *<span class="title">http</span>.<span class="title">Request</span></span> &#123;</span><br><span class="line">request, _ := http.NewRequest(http.MethodGet, fmt.Sprintf(<span class="string">"/users/%s"</span>, user), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">return</span> request</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assertStatus</span><span class="params">(t *testing.T, got, want <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">t.Helper()</span><br><span class="line"><span class="keyword">if</span> got != want &#123;</span><br><span class="line">t.Errorf(<span class="string">"wrong status code got %d, want %d"</span>, got, want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assertCount</span><span class="params">(t *testing.T, got, want <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">t.Helper()</span><br><span class="line"><span class="keyword">if</span> got != want &#123;</span><br><span class="line">t.Errorf(<span class="string">"got % q, want % q"</span>, got, want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，测试通过，测试代码重构完成。现在让我们进一步的思考，我们的 UserServer 相当于 MVC 模式中的 Controller ，GetUserAPICallCount 相当于 Model ，我们应该让它们之间通过 Interface UserStore 来交流，隔离关注点。为了能让 UserServer 使用 UserStore 我们应该把 UserServer 定义为 struct 类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UserStore <span class="keyword">interface</span> &#123;</span><br><span class="line">GetUserAPICallCount(user <span class="keyword">string</span>) <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserServer <span class="keyword">struct</span> &#123;</span><br><span class="line">store UserStore</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line">apiCallCount := u.store.GetUserAPICallCount(user)</span><br><span class="line">fmt.Fprint(w, apiCallCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main.go:9:30: type UserServer is not an expression</span><br></pre></td></tr></table></figure><p>修改 main 函数新创建的 UserServer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server := &amp;UserServer&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":5000"</span>, server); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"could not listen on port 5000 %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改测试使用新创建的 UserServer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">server := &amp;UserServer&#123;&#125;</span><br><span class="line">t.Run(<span class="string">"return will's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"will"</span></span><br><span class="line">request := newGetUserAPICallCountRequest(user)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"6"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"return mgxian's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"mgxian"</span></span><br><span class="line">request := newGetUserAPICallCountRequest(user)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"8"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行测试你会得到如下的错误，这是由于我们并没有传递 UserStore 给 UserServer 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">panic: runtime error: invalid memory address or nil pointer dereference [recovered]</span><br><span class="line">        panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class="line">[signal 0xc0000005 code=0x0 addr=0x18 pc=0x66575f]</span><br></pre></td></tr></table></figure><p>编写一个 stub 类型的 mock 来模拟测试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StubUserStore <span class="keyword">struct</span> &#123;</span><br><span class="line">apiCallCounts <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StubUserStore)</span> <span class="title">GetUserAPICallCount</span><span class="params">(user <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.apiCallCounts[user]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改测试使用我们 mock 出来的 StubUserStore</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">store := StubUserStore&#123;</span><br><span class="line">apiCallCounts: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"will"</span>:   <span class="number">6</span>,</span><br><span class="line"><span class="string">"mgxian"</span>: <span class="number">8</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">server := &amp;UserServer&#123;&amp;store&#125;</span><br><span class="line">t.Run(<span class="string">"return will's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"will"</span></span><br><span class="line">request := newGetUserAPICallCountRequest(user)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"6"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"return mgxian's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"mgxian"</span></span><br><span class="line">request := newGetUserAPICallCountRequest(user)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"8"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行测试，测试全部通过。</p><p>为了使我们的主程序能正常运行，我们需要实现一个假的 UserStore</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> InMemoryUserStore <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *InMemoryUserStore)</span> <span class="title">GetUserAPICallCount</span><span class="params">(user <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">666</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">store := InMemoryUserStore&#123;&#125;</span><br><span class="line">server := &amp;UserServer&#123;&amp;store&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":5000"</span>, server); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"could not listen on port 5000 %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="先写测试-3"><a href="#先写测试-3" class="headerlink" title="先写测试"></a>先写测试</h5><p>测试一个不存在的用户</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t.Run(<span class="string">"return 404 on unknown user"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"unknown"</span></span><br><span class="line">request := newGetUserAPICallCountRequest(user)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusNotFound)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行测试得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_test.go:52: wrong status code got 200, want 404</span><br></pre></td></tr></table></figure><h5 id="编写足够的代码让测试通过-2"><a href="#编写足够的代码让测试通过-2" class="headerlink" title="编写足够的代码让测试通过"></a>编写足够的代码让测试通过</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line">apiCallCount := u.store.GetUserAPICallCount(user)</span><br><span class="line"><span class="keyword">if</span> apiCallCount == <span class="number">0</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusNotFound)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprint(w, apiCallCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，测试通过。</p><h4 id="实现-POST-请求"><a href="#实现-POST-请求" class="headerlink" title="实现 POST 请求"></a>实现 POST 请求</h4><h5 id="先写测试-4"><a href="#先写测试-4" class="headerlink" title="先写测试"></a>先写测试</h5><p>测试记录 API 调用次数，验证响应码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStoreAPICalls</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">store := StubUserStore&#123;</span><br><span class="line"><span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">server := &amp;UserServer&#123;&amp;store&#125;</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"return accepted on POST"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">request, _ := http.NewRequest(http.MethodPost, <span class="string">"/users/will"</span>, <span class="literal">nil</span>)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line">assertStatus(t, response.Code, http.StatusAccepted)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_test.go:67: wrong status code got 404, want 202</span><br></pre></td></tr></table></figure><h5 id="编写足够的代码让测试通过-3"><a href="#编写足够的代码让测试通过-3" class="headerlink" title="编写足够的代码让测试通过"></a>编写足够的代码让测试通过</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">method := r.Method</span><br><span class="line"><span class="keyword">if</span> method == http.MethodPost &#123;</span><br><span class="line">w.WriteHeader(http.StatusAccepted)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line">apiCallCount := u.store.GetUserAPICallCount(user)</span><br><span class="line"><span class="keyword">if</span> apiCallCount == <span class="number">0</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusNotFound)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprint(w, apiCallCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试通过。</p><h5 id="重构-1"><a href="#重构-1" class="headerlink" title="重构"></a>重构</h5><p>把处理 post 和 get  请求的业务逻辑封装到单独的函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> r.Method &#123;</span><br><span class="line"><span class="keyword">case</span> http.MethodGet:</span><br><span class="line">u.showAPICallCount(w, r)</span><br><span class="line"><span class="keyword">case</span> http.MethodPost:</span><br><span class="line">u.processAPICall(w, r)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">showAPICallCount</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line">apiCallCount := u.store.GetUserAPICallCount(user)</span><br><span class="line"><span class="keyword">if</span> apiCallCount == <span class="number">0</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusNotFound)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprint(w, apiCallCount)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">processAPICall</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusAccepted)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试通过。</p><h5 id="先写测试-5"><a href="#先写测试-5" class="headerlink" title="先写测试"></a>先写测试</h5><p>验证当使用 POST 方法时，UserStore 是否被调用记录 API 请求</p><p>给我们之前实现的 StubUserStore 添加 RecordAPICall 函数，记录并验证函数的调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StubUserStore <span class="keyword">struct</span> &#123;</span><br><span class="line">apiCallCounts <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">apiCalls      []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StubUserStore)</span> <span class="title">GetUserAPICallCount</span><span class="params">(user <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.apiCallCounts[user]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StubUserStore)</span> <span class="title">RecordAPICall</span><span class="params">(user <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">s.apiCalls = <span class="built_in">append</span>(s.apiCalls, user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加测试验证调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStoreAPICalls</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">store := StubUserStore&#123;</span><br><span class="line"><span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">server := &amp;UserServer&#123;&amp;store&#125;</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"record api call when POST"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">request, _ := http.NewRequest(http.MethodPost, <span class="string">"/users/will"</span>, <span class="literal">nil</span>)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line">assertStatus(t, response.Code, http.StatusAccepted)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(store.apiCalls) != <span class="number">1</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"got %d calls to RecordAPICall want %d"</span>, <span class="built_in">len</span>(store.apiCalls), <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_test.go:63:17: too few values in StubUserStore literal</span><br></pre></td></tr></table></figure><h5 id="编写最少的代码让测试能运行并检查失败的测试输出-1"><a href="#编写最少的代码让测试能运行并检查失败的测试输出-1" class="headerlink" title="编写最少的代码让测试能运行并检查失败的测试输出"></a>编写最少的代码让测试能运行并检查失败的测试输出</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStoreAPICalls</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">store := StubUserStore&#123;</span><br><span class="line"><span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br><span class="line">server := &amp;UserServer&#123;&amp;store&#125;</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"record api call when POST"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">request, _ := http.NewRequest(http.MethodPost, <span class="string">"/users/will"</span>, <span class="literal">nil</span>)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line">assertStatus(t, response.Code, http.StatusAccepted)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(store.apiCalls) != <span class="number">1</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"got %d calls to RecordAPICall want %d"</span>, <span class="built_in">len</span>(store.apiCalls), <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_test.go:76: got 0 calls to RecordAPICall want 1</span><br></pre></td></tr></table></figure><h5 id="编写足够的代码让测试通过-4"><a href="#编写足够的代码让测试通过-4" class="headerlink" title="编写足够的代码让测试通过"></a>编写足够的代码让测试通过</h5><p>给 UserStore 添加相应的函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UserStore <span class="keyword">interface</span> &#123;</span><br><span class="line">GetUserAPICallCount(user <span class="keyword">string</span>) <span class="keyword">int</span></span><br><span class="line">RecordAPICall(user <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于编译器报错，我需要 InMemoryUserStore 实现相应的函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *InMemoryUserStore)</span> <span class="title">RecordAPICall</span><span class="params">(user <span class="keyword">string</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>编写代码调用 RecordAPICall</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">processAPICall</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">u.store.RecordAPICall(<span class="string">"bob"</span>)</span><br><span class="line">w.WriteHeader(http.StatusAccepted)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，测试通过。</p><h5 id="先写测试-6"><a href="#先写测试-6" class="headerlink" title="先写测试"></a>先写测试</h5><p>验证 API 调用的用户记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStoreAPICalls</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">store := StubUserStore&#123;</span><br><span class="line"><span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br><span class="line">server := &amp;UserServer&#123;&amp;store&#125;</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"record api call when POST"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"will"</span></span><br><span class="line">request, _ := http.NewRequest(http.MethodPost, fmt.Sprintf(<span class="string">"/users/%s"</span>, user), <span class="literal">nil</span>)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line">assertStatus(t, response.Code, http.StatusAccepted)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(store.apiCalls) != <span class="number">1</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"got %d calls to RecordAPICall want %d"</span>, <span class="built_in">len</span>(store.apiCalls), <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> store.apiCalls[<span class="number">0</span>] != user &#123;</span><br><span class="line">t.Errorf(<span class="string">"did not record correct api call user got %q want %q"</span>, store.apiCalls[<span class="number">0</span>], user)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_test.go:81: did not record correct api call user got &quot;bob&quot; want &quot;will&quot;</span><br></pre></td></tr></table></figure><h5 id="编写足够的代码让测试通过-5"><a href="#编写足够的代码让测试通过-5" class="headerlink" title="编写足够的代码让测试通过"></a>编写足够的代码让测试通过</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">processAPICall</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line">u.store.RecordAPICall(user)</span><br><span class="line">w.WriteHeader(http.StatusAccepted)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试通过。</p><h5 id="重构-2"><a href="#重构-2" class="headerlink" title="重构"></a>重构</h5><p>从请求中获取 user 的代码重复，提取到调用方，以参数形式传递。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line"><span class="keyword">switch</span> r.Method &#123;</span><br><span class="line"><span class="keyword">case</span> http.MethodGet:</span><br><span class="line">u.showAPICallCount(w, user)</span><br><span class="line"><span class="keyword">case</span> http.MethodPost:</span><br><span class="line">u.processAPICall(w, user)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">showAPICallCount</span><span class="params">(w http.ResponseWriter, user <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">apiCallCount := u.store.GetUserAPICallCount(user)</span><br><span class="line"><span class="keyword">if</span> apiCallCount == <span class="number">0</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusNotFound)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprint(w, apiCallCount)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">processAPICall</span><span class="params">(w http.ResponseWriter, user <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">u.store.RecordAPICall(user)</span><br><span class="line">w.WriteHeader(http.StatusAccepted)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，测试通过，重构完成。</p><h4 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h4><p>两个功能已经分别开发完成，我们现在进行集成测试，由于集成测试不容易写，出错后不易查找，并且由于可能会使用真实的组件如数据库，所以可能会运行缓慢。因此集成测试应该尽量少写。</p><h5 id="先写测试-7"><a href="#先写测试-7" class="headerlink" title="先写测试"></a>先写测试</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRecordAPICallsAndGetThem</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">store := InMemoryUserStore&#123;&#125;</span><br><span class="line">server := UserServer&#123;&amp;store&#125;</span><br><span class="line">user := <span class="string">"will"</span></span><br><span class="line"></span><br><span class="line">request, _ := http.NewRequest(http.MethodPost, fmt.Sprintf(<span class="string">"/users/%s"</span>, user), <span class="literal">nil</span>)</span><br><span class="line">server.ServeHTTP(httptest.NewRecorder(), request)</span><br><span class="line">server.ServeHTTP(httptest.NewRecorder(), request)</span><br><span class="line">server.ServeHTTP(httptest.NewRecorder(), request)</span><br><span class="line"></span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">request = newGetUserAPICallCountRequest(user)</span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"3"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，你会得到如下 的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_integration_test.go:25: got &quot;666&quot;, want &quot;3&quot;</span><br></pre></td></tr></table></figure><h5 id="编写足够的代码让测试通过-6"><a href="#编写足够的代码让测试通过-6" class="headerlink" title="编写足够的代码让测试通过"></a>编写足够的代码让测试通过</h5><p>为 InMemoryUserStore 编写具体实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> InMemoryUserStore <span class="keyword">struct</span> &#123;</span><br><span class="line">store <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *InMemoryUserStore)</span> <span class="title">GetUserAPICallCount</span><span class="params">(user <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> i.store[user]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *InMemoryUserStore)</span> <span class="title">RecordAPICall</span><span class="params">(user <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">i.store[user]++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewInMemoryUserStore</span><span class="params">()</span> *<span class="title">InMemoryUserStore</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;InMemoryUserStore&#123;</span><br><span class="line">store: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>集成测试使用 InMemoryUserStore </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRecordAPICallsAndGetThem</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">store := NewInMemoryUserStore()</span><br><span class="line">server := UserServer&#123;store&#125;</span><br><span class="line">user := <span class="string">"will"</span></span><br><span class="line"></span><br><span class="line">request, _ := http.NewRequest(http.MethodPost, fmt.Sprintf(<span class="string">"/users/%s"</span>, user), <span class="literal">nil</span>)</span><br><span class="line">server.ServeHTTP(httptest.NewRecorder(), request)</span><br><span class="line">server.ServeHTTP(httptest.NewRecorder(), request)</span><br><span class="line">server.ServeHTTP(httptest.NewRecorder(), request)</span><br><span class="line"></span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">request = newGetUserAPICallCountRequest(user)</span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"3"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行测试，测试通过。</p><h4 id="完善主程序"><a href="#完善主程序" class="headerlink" title="完善主程序"></a>完善主程序</h4><p>修改主程序使用 NewInMemoryUserStore 函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">store := NewInMemoryUserStore()</span><br><span class="line">server := &amp;UserServer&#123;store&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":5000"</span>, server); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"could not listen on port 5000 %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此一个使用内存来记录查询用户 API 调用次数的程序已经完成，后续步骤你可选择其他数据存储来替换内存存储进行数据的持久化。只需要实现 UserStore 接口即可。</p><h3 id="TDD-总结"><a href="#TDD-总结" class="headerlink" title="TDD 总结"></a>TDD 总结</h3><p>当你学习了 TDD 之后，你就学会了这种小步快跑的开发方法，你可以把它应用在你没有太大自信的关键核心组件的开发中，TDD 能帮助你以小步快跑的方式向目标前进，TDD 只是给了你一种小步快跑的能力，你可以只在关键的时候才使用这种能力。学习 TDD 并不是为了让你在所有涉及到编码的地方全部使用 TDD 开发模式。</p><p>TDD 的关键在于驱动（driven），要让测试驱动我们来进行功能开发，每写一个测试，都驱动我们写更多的生产代码，都在向实现我们的功能的方向前进。</p><p>重构是 TDD 中重要的环节，如果没有重构，你得到的可能只是由一堆零乱代码组合的勉强凑合工作的软件。只有注重重构才能让我们的代码更整洁，更利于后续 TDD 开发模式的正常执行。</p><p>TDD 开发模式减轻人开发人员的心智负担，通过红、绿、重构循环，开发人员每一个阶段都只有一个特定的目标，这使得开发人员每个阶段的关注点只有一个，注意力集中。</p><p>TDD 开发模式能让开发人员更自信，由于我们的任务分解的小，开发循环比较短，我们可以在很短时间内获得测试的反馈，我们几乎随时都有可运行的软件，这给我们开发人员带来很强的安全感，这给了我们自信心。</p><p>TDD 不是银弹，不是所有项目开发都可以使用 TDD 开发模式来进行开发，在测试成本比较高的情况下就不太适合使用 TDD 开发模式，比如在前端（Web、iOS、Android）的项目开发中，检查页面中的元素的位置及大小等操作比较麻烦，就不太适合使用 TDD 开发模式，但是我们可以尽量减少 UI 部分的业务逻辑，UI 只根据其他模块处理后的数据来做简单直接的展示，把 TDD 应用在其他为 UI 提供数据的模块开发中。</p><p>TDD 并非要求我们非常严格的遵循 TDD 三定律，我们可以根据特殊情况，做适当的小调整，但是整体流程与节奏不能有偏离，TDD 三定律并不是为了给你加上了无法挣脱的枷锁，它只是给了我们一个整体指导原则。</p><p>要想流畅的使用 TDD 需要不断的练习，掌握 TDD 的节奏是流畅使用 TDD 关键。想要真正学会使用 TDD ，只能练习、练习、再练习。</p><h3 id="后续学习"><a href="#后续学习" class="headerlink" title="后续学习"></a>后续学习</h3><ul><li><a href="https://book.douban.com/subject/1230036/" target="_blank" rel="noopener">测试驱动开发</a></li><li><a href="https://book.douban.com/subject/30468597/" target="_blank" rel="noopener">重构</a></li><li><a href="https://book.douban.com/subject/30333919/" target="_blank" rel="noopener">架构整洁之道</a></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><p><a href="https://book.douban.com/subject/1230036/" target="_blank" rel="noopener">https://book.douban.com/subject/1230036/</a></p></li><li><p><a href="https://quii.gitbook.io/learn-go-with-tests/build-an-application/http-server" target="_blank" rel="noopener">https://quii.gitbook.io/learn-go-with-tests/build-an-application/http-server</a></p></li><li><p>Https://mgxian.dev/posts/52/</p></li><li><p><a href="https://juejin.im/post/5c3e73876fb9a049d37f5db1" target="_blank" rel="noopener">https://juejin.im/post/5c3e73876fb9a049d37f5db1</a></p></li><li><p><a href="https://www.guru99.com/test-driven-development.html" target="_blank" rel="noopener">https://www.guru99.com/test-driven-development.html</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Test-driven_development</a></p></li><li><p><a href="https://blog.testlodge.com/what-is-tdd/" target="_blank" rel="noopener">https://blog.testlodge.com/what-is-tdd/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> tdd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在测试中更好地使用mock</title>
      <link href="/posts/52/"/>
      <url>/posts/52/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注意：本文大部分内容为翻译 Bob 大叔的文章，原文链接可以在文章底部的参考文档处找到。</p></blockquote><h3 id="什么是-mock"><a href="#什么是-mock" class="headerlink" title="什么是 mock"></a>什么是 mock</h3><p>mock 作为名词时表示 mock 对象，在维基百科的解释中如下：</p><blockquote><p>在面向对象程序设计中，<strong>模拟对象</strong>（英语：mock object，也译作<strong>模仿对象</strong>）是以可控的方式模拟真实对象行为的假的对象。程序员通常创造模拟对象来测试其他对象的行为。</p></blockquote><p>mock 作为动词时表示编写使用 mock 对象。</p><p>mock 多用于测试代码中，对于不容易构造或者不容易获取的对象，使用一个虚拟的对象来方便测试。</p><h3 id="mock-的分类"><a href="#mock-的分类" class="headerlink" title="mock 的分类"></a>mock 的分类</h3><a id="more"></a><p>为了使用示例说明各个mock 种类的区别与联系，文章使用 go 语言作为示例，如下为示例的基础代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Authorizer <span class="keyword">interface</span> &#123;</span><br><span class="line">    authorize(username, password <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> System <span class="keyword">struct</span> &#123;</span><br><span class="line">    authorizer Authorizer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSystem</span><span class="params">(authorizer Authorizer)</span> *<span class="title">System</span></span> &#123;</span><br><span class="line">    system = <span class="built_in">new</span>(System)</span><br><span class="line">    system.authorizer = authorizer</span><br><span class="line">    <span class="keyword">return</span> system</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *System)</span> <span class="title">loginCount</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// skip</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *System)</span> <span class="title">login</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s.authorizer.authorize(username, password) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> errors.New(<span class="string">"username or password is not right"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dummy"><a href="#dummy" class="headerlink" title="dummy"></a>dummy</h4><p>当你不关心传入的参数被如何使用时，你就应该使用 dummy 类型的 mock，一般用于作为其他对象的初始化参数。示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DummyAuthorizer <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DummyAuthorizer)</span> <span class="title">authorize</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">// return nil</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSystem</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    system := NewSystem(<span class="built_in">new</span>(DummyAuthorizer))</span><br><span class="line">    got := system.loginCount()</span><br><span class="line">    want := <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> got != want &#123;</span><br><span class="line">        t.Errorf(<span class="string">"got %d, want %d"</span>, got, want)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的测试示例代码中，DummyAuthorizer 的作为只是为了初始化 System 对象的需要，后续测试中并没有使用该 DummyAuthorizer 对象。</p><blockquote><p>注意：此处的 authorize 方法原文返回了 null ，由于 go 语言不允许为 bool 返回 nil ，因此此处返回了 false</p></blockquote><h4 id="stub"><a href="#stub" class="headerlink" title="stub"></a>stub</h4><p>当你只关心方法的返回结果，并且需要特定返回值的时候，这时候你就可以使用 stub 类型的 mock 。比如我们需要测试系统中某些功能是否能正确处理用户登录和不登录的情况，而登录功能我们已经在其他地方经过测试，而且使用真实的登录功能调用又比较的麻烦，我们就可以直接返回已登录或者未登录状态来进行其他功能的验证。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AcceptingAuthorizerStub <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(aas *AcceptingAuthorizerStub)</span> <span class="title">authorize</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RefusingAuthorizerStub <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ras *RefusingAuthorizerStub)</span> <span class="title">authorize</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="spy"><a href="#spy" class="headerlink" title="spy"></a>spy</h4><p>当你不只是只关心方法的返回结果，还需要检查方法是否真正的被调用了，方法的调用次数等，或者需要记录方法调用过程中的信息。这个时候你就应该使用 spy 类型的 mock ，调用结束后你需要自己检查方法是否被调用，检查调用过程中记录的其他信息。但是请注意，这将会使你的测试代码和被测试方法相耦合，测试需要知道被测试方法的内部实现细节。使用时需要谨慎一些，不要过渡使用，过渡使用可能导致测试过于脆弱。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AcceptingAuthorizerSpy <span class="keyword">struct</span> &#123;</span><br><span class="line">    authorizeWasCalled <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(aas *AcceptingAuthorizerSpy)</span> <span class="title">authorize</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    aas.authorizeWasCalled = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSystem</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    authorizer := <span class="built_in">new</span>(AcceptingAuthorizerSpy)</span><br><span class="line">    system := NewSystem(authorizer)</span><br><span class="line">    got := system.login(<span class="string">"will"</span>, <span class="string">"will"</span>)</span><br><span class="line">    <span class="keyword">if</span> got != <span class="literal">nil</span> &#123;</span><br><span class="line">        t.Errorf(<span class="string">"login failed with error %v"</span>, got)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> authorizer.authorizeWasCalled != <span class="literal">true</span> &#123;</span><br><span class="line">        t.Errorf(<span class="string">"authorize was not called"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mock"><a href="#mock" class="headerlink" title="mock"></a>mock</h4><p>mock 类型的 mock 可以算作是真正的 ”mock“ 。把 spy 类型的 mock 在测试代码中的断言语句移动到 mock 对象中，这使它更关注于测试行为。这种类型的 mock 对方法的返回值并不是那么的感兴趣，它更关心的是哪个方法被使用了什么参数在什么时间被调用了，调用的频率等。这种类型的 mock 使得编写 mock 相关的工具更加的简单，mock 工具可以帮助你在运行时创建 mock 对象。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AcceptingAuthorizerVerificationMock <span class="keyword">struct</span> &#123;</span><br><span class="line">    authorizeWasCalled <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(aavm *AcceptingAuthorizerVerificationMock)</span> <span class="title">authorize</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    aavm.authorizeWasCalled = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(aavm *AcceptingAuthorizerVerificationMock)</span> <span class="title">verify</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> aavm.authorizeWasCalled</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fake"><a href="#fake" class="headerlink" title="fake"></a>fake</h4><p>fake 类型的 mock 与其他类型的 mock 最大的区别是它包含了真实的业务逻辑。当以不同的数据调用时，你会得到不同的结果。随着业务逻辑的改变，它可能也会越来越复杂，最终你也需要为这种类型的 mock 编写单元测试，甚至最后它可能成为了一个真实的业务系统。如果不是必须，请不要使用 fake 类型的 mock 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AcceptingAuthorizerFake <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(aas *AcceptingAuthorizerFake)</span> <span class="title">authorize</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">"will"</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>mock 是 spy 的一种类型，spy 又是 stub 的一种类型，而 stub 又是 dummy 的一种类型，但是 fake 与其他所有 mock 类型不同，fake 包含了真实的业务逻辑，而其他类型的 mock 都不包含真实的业务逻辑。</p><p>根据 Bob 大叔的实践来看，他使用最多的是 spy 和 stub 类型的 mock ，并且他不会经常使用 mock 工具，很少使用 dummy 类型的 mock ，只有在使用 mock 工具时才会使用 mock 类型的 mock 。现在的编程 IDE 中，只需要你定义好接口，IDE 就可以帮你轻松的实现他们，你只需要简单的修改就可以实现 spy 和 stub 类型的 mock ，因此 Bob 大叔很少使用 mock 工具。</p><h3 id="mock-的使用时机"><a href="#mock-的使用时机" class="headerlink" title="mock 的使用时机"></a>mock 的使用时机</h3><p>mock 对象是一个强大的工具，但是 mock 对象也有两面性，如果使用不正确也可能会带来强大的破坏力。</p><h4 id="完全不使用-mock"><a href="#完全不使用-mock" class="headerlink" title="完全不使用 mock"></a>完全不使用 mock</h4><p>如果我们完全不使用 mock ，直接使用真实的对象进行测试，这会带来什么问题呢？</p><ul><li>测试将会运行缓慢。我们使用真实的数据库，真实的上游服务，由于这些都需要通过网络来进行通信，这会将比程序内部的函数调用慢上几个数量级。当我们修改一行简单的代码，进行测试时，可能需要等待数分钟，数小时，甚至可能要几天才能把测试运行结束。</li><li>代码的测试覆盖率可能会降低很多。一些错误和异常在没有使用 mock 的情况下可能根本无法进行测试，例如网络协议的异常。一些危险的测试用例，比如删除文件、删除数据库表很难进行安全的测试。</li><li>测试变得异常的脆弱。与测试无关的其他问题可能会导致测试失败，例如由于机器负载导致的网络时延问题，数据库表的结构不正确，配置文件被错误修改等问题。</li></ul><p>在完全不使用 mock 对象的情况下，我们的测试会变得缓慢、不完整、脆弱。</p><h4 id="过度使用-mock"><a href="#过度使用-mock" class="headerlink" title="过度使用 mock"></a>过度使用 mock</h4><p>如果过度使用 mock 对象，所有的测试都使用 mock 对象，这会带来什么问题呢？</p><ul><li>测试将会运行缓慢。一些 mock 工具强依赖反射机制，因此会使得测试变慢。</li><li>mock 所有类之间的交互，会导致你必须创建返回其他 mock 类的 mock 类，你可能需要 mock 整个交互链路上所有的类，这将会导致你的测试异常的复杂，并且所有交互链路上的 mock 类可能都耦合在了一起，当其中一个修改时，可能会导致整个测试失败。</li><li>暴露本不需要暴露的接口。由于需要 mock 每一个类之间的交互，就需要为每一个类之间的交互创建接口，这将会导致你需要创建出许多只用于 mock 对象的接口，这是一种过度抽象和可怕的设计损坏。</li></ul><p>过度使用 mock 对象，将会使用测试变得缓慢、脆弱、复杂，并且有可能损坏你的软件设计。</p><h4 id="mock-的使用建议"><a href="#mock-的使用建议" class="headerlink" title="mock 的使用建议"></a>mock 的使用建议</h4><p><strong>在架构的重要边界使用 mock ，不要在边界内部使用 mock</strong></p><p>例如可以在数据库、web服务器等所有第三方服务的边界处使用 mock 。可以参考如下的整洁架构图：</p><p><img src="/posts/52/clean-architecture-1.jpg" alt=""></p><p>可以在最外环的边界处使用 mock 隔离外部依赖，方便测试，这样做可以得到如下的好处：</p><ul><li>测试运行速度快。</li><li>测试不会因为外部依赖的错误而失败。</li><li>更容易的模拟测试外部依赖的所有异常情况。</li><li>横跨边界的有限状态机的每条路径都可以被测试。</li><li>mock 不在需要相互耦合依赖，代码会更整洁。</li></ul><p>另一个比较大的好处是它强迫你思考找出软件的重要边界，并且为它们定义接口，这使得你的软件不会强耦合依赖于边界外的组件。因此你可以独立开发部署边界两边的组件。像这样去分离架构关注点是一个很好的软件设计原则。</p><p><strong>使用你自己的 mock</strong></p><p>mock 工具有它们自己的领域语言，在使用它们之前你必须先学习它。通过前面的 mock 类型介绍，我们已经知道用的最多的 mock 是 stub 和 spy 类型，而由于现在的 IDE 可以很方便的生成这些 mock 代码，我们只需要稍作修改就可以直接使用，所以综合来看，我们一般情况下是不需要使用 mock 工具的。</p><p>由于你自己写 mock 时不会使用反射，这将会让你的测试代码运行速度更快。如果你决定使用 mock 工具，请尽量少的使用它。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>mock 对象既不能完全不使用，也不能过度使用。我们应该在软件的重要边界处使用 mock ，要尽量少的使用 mock 工具，使用 mock 工具时不要过度依赖它，我们应该尽量使用轻量级的 stub 和 spy 的 mock 类型，并且我们应该自己手写这些简单的 mock 类型。如果你这样做了，你会发现你的测试运行速度更快，更稳定，并且还会有更高的测试覆盖率，你的软件架构设计也会越来越好。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://blog.cleancoder.com/uncle-bob/2014/05/14/TheLittleMocker.html" target="_blank" rel="noopener">https://blog.cleancoder.com/uncle-bob/2014/05/14/TheLittleMocker.html</a></li><li><a href="https://blog.cleancoder.com/uncle-bob/2014/05/10/WhenToMock.html" target="_blank" rel="noopener">https://blog.cleancoder.com/uncle-bob/2014/05/10/WhenToMock.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mock </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何简单的给静态博客网站用上HTTPS</title>
      <link href="/posts/51/"/>
      <url>/posts/51/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>谷歌浏览器已经把没有使用HTTPS协议的网站全部标记为不安全，为了让浏览器不把我们的网站标记为不安全，为了让访问者能更安心的浏览我们的网站，我们只能为我们的网站开启HTTPS协议支持，由于 Let’s Encrypt 可以为我们提供免费证书使用，我们就可以免费的为我们的网站申请证书，但是由于证书有效期只有3个月，当证书快过期时，我们需要重新续签。为此有不少工具能帮助我们完成自助的申请证书以及续签。但是这仍然需要不少的配置。这时一个名为 Caddy 的跨开台开源软件出现了，Caddy 能自动帮我们申请证书，当证书快过期时自动续签，只需一次配置，后续基本不需要再做其他配置，非常的方便，完全可以代替 Nginx 与 Apache 。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>去 Caddy 的 Github 发布页下载对应平台的二进制压缩包</strong></p><p><a href="https://github.com/caddyserver/caddy/releases" target="_blank" rel="noopener">https://github.com/caddyserver/caddy/releases</a></p><p><strong>解压安装</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xf caddy_v1.0.3_linux_amd64.tar.gz</span><br><span class="line">mv caddy /usr/<span class="built_in">local</span>/bin</span><br><span class="line">caddy -version</span><br></pre></td></tr></table></figure><p><strong>配置 Caddy</strong> </p><p>把如下的配置文件写入名为 <code>Caddyfile</code> 的文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mgxian.dev &#123;</span><br><span class="line">    root /data/blog/mgxian</span><br><span class="line">    gzip</span><br><span class="line">    log ./access.log</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">www.mgxian.dev &#123;</span><br><span class="line">    redir https://mgxian.dev&#123;uri&#125;</span><br><span class="line">    log ./access.log</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1-5 为 mgxian.dev 域名的相关配置，指定根目录为 /data/blog/mgxian ，开启 gzip 压缩，并把访问日志记录在当前目录的 access.log 文件中。</p><p>7-10 为 <a href="http://www.mgxian.dev" target="_blank" rel="noopener">www.mgxian.dev</a> 域名的相关配置，表示当访问 <a href="http://www.mgxian.dev" target="_blank" rel="noopener">www.mgxian.dev</a> 域名的相关资源时，将会自动跳转到 mgxian.dev 域名。</p><p><strong>启动 Caddy</strong></p><p>启动 Caddy 之后会自动申请 HTTPS 的证书，并自动开启对 HTTP2 协议的支持，启动过程中可能会提示你输入邮箱接受证书相关的提醒。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">caddy -conf Caddyfile</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ol><li>在配置使用 Caddy 之前请确保 DNS 解析配置正常，请把你需要配置的域名解析到你安装配置 Caddy 机器的外网 IP 上。</li><li>如果需要申请支持通配符的证书，如为 <code>*.mgxian.dev</code> 申请证书，需要使用 DNS Challenge 的方式来申请证书，具体详细文档可参考<a href="https://caddyserver.com/docs/automatic-https#dns-challenge" target="_blank" rel="noopener"> DNS Challenge</a> 。</li><li>Caddy 不仅可以作为一个像 Apache 与 Nginx 一样的 Web Server ，也可以配置为反向代理，代理后端 Apache 与 Nginx 等应用。</li></ol><p><strong>访问测试</strong></p><p>启动完成后，使用 cURL 访问你的网站域名进行测试。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl -I https://mgxian.dev/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 64846</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Etag: <span class="string">"pwsec41e1a"</span></span><br><span class="line">Last-Modified: Sun, 25 Aug 2019 09:57:40 GMT</span><br><span class="line">Server: Caddy</span><br><span class="line">Date: Sun, 25 Aug 2019 09:59:27 GMT</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/caddyserver/caddy" target="_blank" rel="noopener">https://github.com/caddyserver/caddy</a></li><li><a href="https://caddyserver.com/docs" target="_blank" rel="noopener">https://caddyserver.com/docs</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxy </tag>
            
            <tag> caddy </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个可供参考的 git commit message 规范</title>
      <link href="/posts/50/"/>
      <url>/posts/50/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mubu.com/doc/24oUKrcwhi" target="_blank" rel="noopener">一个可供参考的 git commit message 规范</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7升级内核</title>
      <link href="/posts/49/"/>
      <url>/posts/49/</url>
      
        <content type="html"><![CDATA[<h3 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装yum源</span></span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看列表</span></span><br><span class="line">yum --disablerepo=* --enablerepo=elrepo-kernel repolist</span><br><span class="line">yum --disablerepo=* --enablerepo=elrepo-kernel list kernel*</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="安装最新版本的kernel"><a href="#安装最新版本的kernel" class="headerlink" title="安装最新版本的kernel"></a>安装最新版本的kernel</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml-devel kernel-ml -y</span><br></pre></td></tr></table></figure><h3 id="设置为默认内核"><a href="#设置为默认内核" class="headerlink" title="设置为默认内核"></a>设置为默认内核</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置生成新的grub</span></span><br><span class="line">grub2-set-default 0</span><br><span class="line">grub2-mkconfig -o /etc/grub2.cfg</span><br></pre></td></tr></table></figure><h3 id="安装新版本工具包（可省略）"><a href="#安装新版本工具包（可省略）" class="headerlink" title="安装新版本工具包（可省略）"></a>安装新版本工具包（可省略）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除旧版本</span></span><br><span class="line">yum remove kernel-tools-libs.x86_64 kernel-tools.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装新版本</span></span><br><span class="line">yum --disablerepo=* --enablerepo=elrepo-kernel install -y kernel-ml-tools.x86_64</span><br></pre></td></tr></table></figure><h3 id="重启查看内核版本"><a href="#重启查看内核版本" class="headerlink" title="重启查看内核版本"></a>重启查看内核版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内核版本</span></span><br><span class="line">uname -sr</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.tecmint.com/install-upgrade-kernel-version-in-centos-7/" target="_blank" rel="noopener">https://www.tecmint.com/install-upgrade-kernel-version-in-centos-7/</a></li><li><a href="https://www.centos.bz/2017/08/upgrade-centos-7-6-kernel-to-4-12-4/" target="_blank" rel="noopener">https://www.centos.bz/2017/08/upgrade-centos-7-6-kernel-to-4-12-4/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> centos </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s使用ceph实现动态持久化存储</title>
      <link href="/posts/48/"/>
      <url>/posts/48/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文章介绍如何使用ceph为k8s提供动态申请pv的功能。ceph提供底层存储功能，cephfs方式支持k8s的pv的3种访问模式<code>ReadWriteOnce，ReadOnlyMany ，ReadWriteMany</code> ，RBD支持<code>ReadWriteOnce，ReadOnlyMany</code>两种模式<br><a id="more"></a><br>访问模式只是能力描述，并不是强制执行的，对于没有按pvc声明的方式使用pv，存储提供者应该负责访问时的运行错误。例如如果设置pvc的访问模式为<code>ReadOnlyMany</code> ，pod挂载后依然可写，如果需要真正的不可写，申请pvc是需要指定 <code>readOnly: true</code> 参数</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="部署k8s"><a href="#部署k8s" class="headerlink" title="部署k8s"></a>部署k8s</h4><p><a href="/posts/32/">centos7使用kubeadm安装k8s-1.11版本</a></p><h4 id="部署ceph"><a href="#部署ceph" class="headerlink" title="部署ceph"></a>部署ceph</h4><p><a href="/posts/47/">centos7安装ceph分布式存储集群</a></p><h3 id="在k8s集群中配置使用ceph"><a href="#在k8s集群中配置使用ceph" class="headerlink" title="在k8s集群中配置使用ceph"></a>在k8s集群中配置使用ceph</h3><h4 id="使用Ceph-RBD"><a href="#使用Ceph-RBD" class="headerlink" title="使用Ceph RBD"></a>使用Ceph RBD</h4><h5 id="使用kubeadm安装集群的额外配置"><a href="#使用kubeadm安装集群的额外配置" class="headerlink" title="使用kubeadm安装集群的额外配置"></a>使用kubeadm安装集群的额外配置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果使用kubeadm部署的集群需要这些额外的步骤</span></span><br><span class="line"><span class="comment"># 由于使用动态存储时 controller-manager 需要使用 rbd 命令创建 image</span></span><br><span class="line"><span class="comment"># 所以 controller-manager 需要使用 rbd 命令</span></span><br><span class="line"><span class="comment"># 由于官方controller-manager镜像里没有rbd命令</span></span><br><span class="line"><span class="comment"># 如果没使用如下方式会报错无法成功创建pvc</span></span><br><span class="line"><span class="comment"># 相关 issue https://github.com/kubernetes/kubernetes/issues/38923</span></span><br><span class="line">cat &gt;external-storage-rbd-provisioner.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumes"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"delete"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumeclaims"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"storage.k8s.io"</span>]</span><br><span class="line">    resources: [<span class="string">"storageclasses"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"events"</span>]</span><br><span class="line">    verbs: [<span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"endpoints"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"services"</span>]</span><br><span class="line">    resourceNames: [<span class="string">"kube-dns"</span>]</span><br><span class="line">    verbs: [<span class="string">"list"</span>, <span class="string">"get"</span>]</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: rbd-provisioner</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [<span class="string">""</span>]</span><br><span class="line">  resources: [<span class="string">"secrets"</span>]</span><br><span class="line">  verbs: [<span class="string">"get"</span>]</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: Recreate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: rbd-provisioner</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: rbd-provisioner</span><br><span class="line">        image: <span class="string">"quay.io/external_storage/rbd-provisioner:v2.1.1-k8s1.11"</span></span><br><span class="line">        env:</span><br><span class="line">        - name: PROVISIONER_NAME</span><br><span class="line">          value: ceph.com/rbd</span><br><span class="line">      serviceAccount: rbd-provisioner</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f external-storage-rbd-provisioner.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态 等待running之后 再进行后续的操作</span></span><br><span class="line">kubectl get pod -n kube-system</span><br></pre></td></tr></table></figure><h5 id="配置-storageclass"><a href="#配置-storageclass" class="headerlink" title="配置 storageclass"></a>配置 storageclass</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在k8s集群中所有节点安装 ceph-common</span></span><br><span class="line"><span class="comment"># 需要使用kubelet使用rdb命令map附加rbd创建的image</span></span><br><span class="line">yum install -y ceph-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 osd pool 在ceph的mon或者admin节点</span></span><br><span class="line">ceph osd pool create kube 4096</span><br><span class="line">ceph osd pool ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建k8s访问ceph的用户 在ceph的mon或者admin节点</span></span><br><span class="line">ceph auth get-or-create client.kube mon <span class="string">'allow r'</span> osd <span class="string">'allow class-read object_prefix rbd_children, allow rwx pool=kube'</span> -o ceph.client.kube.keyring</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看key 在ceph的mon或者admin节点</span></span><br><span class="line">ceph auth get-key client.admin</span><br><span class="line">ceph auth get-key client.kube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 admin secret</span></span><br><span class="line"><span class="comment"># CEPH_ADMIN_SECRET 替换为 client.admin 获取到的key</span></span><br><span class="line"><span class="built_in">export</span> CEPH_ADMIN_SECRET=<span class="string">'AQBBAnRbSiSOFxAAEZXNMzYV6hsceccYLhzdWw=='</span></span><br><span class="line">kubectl create secret generic ceph-secret --<span class="built_in">type</span>=<span class="string">"kubernetes.io/rbd"</span> \</span><br><span class="line">--from-literal=key=<span class="variable">$CEPH_ADMIN_SECRET</span> \</span><br><span class="line">--namespace=kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 default 命名空间创建pvc用于访问ceph的 secret</span></span><br><span class="line"><span class="comment"># CEPH_KUBE_SECRET 替换为 client.kube 获取到的key</span></span><br><span class="line"><span class="built_in">export</span> CEPH_KUBE_SECRET=<span class="string">'AQBZK3VbTN/QOBAAIYi6CRLQcVevW5HM8lunOg=='</span></span><br><span class="line">kubectl create secret generic ceph-user-secret --<span class="built_in">type</span>=<span class="string">"kubernetes.io/rbd"</span> \</span><br><span class="line">--from-literal=key=<span class="variable">$CEPH_KUBE_SECRET</span> \</span><br><span class="line">--namespace=default</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 secret</span></span><br><span class="line">kubectl get secret ceph-user-secret -o yaml</span><br><span class="line">kubectl get secret ceph-secret -n kube-system -o yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 StorageClass</span></span><br><span class="line"><span class="comment"># 如果使用kubeadm创建的集群 provisioner 使用如下方式</span></span><br><span class="line"><span class="comment"># provisioner: ceph.com/rbd</span></span><br><span class="line">cat &gt;storageclass-ceph-rdb.yaml&lt;&lt;EOF</span><br><span class="line">kind: StorageClass</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: dynamic-ceph-rdb</span><br><span class="line">provisioner: ceph.com/rbd</span><br><span class="line"><span class="comment"># provisioner: kubernetes.io/rbd</span></span><br><span class="line">parameters:</span><br><span class="line">  monitors: 11.11.11.111:6789,11.11.11.112:6789,11.11.11.113:6789</span><br><span class="line">  adminId: admin</span><br><span class="line">  adminSecretName: ceph-secret</span><br><span class="line">  adminSecretNamespace: kube-system</span><br><span class="line">  pool: kube</span><br><span class="line">  userId: kube</span><br><span class="line">  userSecretName: ceph-user-secret</span><br><span class="line">  fsType: ext4</span><br><span class="line">  imageFormat: <span class="string">"2"</span></span><br><span class="line">  imageFeatures: <span class="string">"layering"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f storageclass-ceph-rdb.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get sc</span><br></pre></td></tr></table></figure><h5 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建pvc测试</span></span><br><span class="line">cat &gt;ceph-rdb-pvc-test.yaml&lt;&lt;EOF</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: ceph-rdb-claim</span><br><span class="line">spec:</span><br><span class="line">  accessModes:     </span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  storageClassName: dynamic-ceph-rdb</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 2Gi</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f ceph-rdb-pvc-test.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pvc</span><br><span class="line">kubectl get pv</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建 nginx pod 挂载测试</span></span><br><span class="line">cat &gt;nginx-pod.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod1</span><br><span class="line">  labels:</span><br><span class="line">    name: nginx-pod1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-pod1</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    ports:</span><br><span class="line">    - name: web</span><br><span class="line">      containerPort: 80</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: ceph-rdb</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  volumes:</span><br><span class="line">  - name: ceph-rdb</span><br><span class="line">    persistentVolumeClaim:</span><br><span class="line">      claimName: ceph-rdb-claim</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f nginx-pod.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改文件内容</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -ti nginx-pod1 -- /bin/sh -c <span class="string">'echo Hello World from Ceph RBD!!! &gt; /usr/share/nginx/html/index.html'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">POD_ID=$(kubectl get pods -o wide | grep nginx-pod1 | awk <span class="string">'&#123;print $(NF-1)&#125;'</span>)</span><br><span class="line">curl http://<span class="variable">$POD_ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f nginx-pod.yaml</span><br><span class="line">kubectl delete -f ceph-rdb-pvc-test.yaml</span><br></pre></td></tr></table></figure><h4 id="使用-CephFS"><a href="#使用-CephFS" class="headerlink" title="使用 CephFS"></a>使用 CephFS</h4><blockquote><p>linux内核需要4.10+，否则会出现无法正常使用的问题，详细issue信息 <a href="https://github.com/kubernetes-incubator/external-storage/issues/345" target="_blank" rel="noopener">https://github.com/kubernetes-incubator/external-storage/issues/345</a><br>  <a href="/posts/49/">centos7升级内核</a></p></blockquote><h5 id="在ceph集群创建CephFS"><a href="#在ceph集群创建CephFS" class="headerlink" title="在ceph集群创建CephFS"></a>在ceph集群创建CephFS</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如下操作在ceph的mon或者admin节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CephFS需要使用两个Pool来分别存储数据和元数据</span></span><br><span class="line">ceph osd pool create fs_data 128</span><br><span class="line">ceph osd pool create fs_metadata 128</span><br><span class="line">ceph osd lspools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个CephFS</span></span><br><span class="line">ceph fs new cephfs fs_metadata fs_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">ceph fs ls</span><br></pre></td></tr></table></figure><h5 id="部署cephfs-provisioner"><a href="#部署cephfs-provisioner" class="headerlink" title="部署cephfs-provisioner"></a>部署cephfs-provisioner</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方没有cephfs动态卷支持</span></span><br><span class="line"><span class="comment"># 使用社区提供的cephfs-provisioner</span></span><br><span class="line">cat &gt;external-storage-cephfs-provisioner.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumes"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"delete"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumeclaims"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"storage.k8s.io"</span>]</span><br><span class="line">    resources: [<span class="string">"storageclasses"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"events"</span>]</span><br><span class="line">    verbs: [<span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"endpoints"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"secrets"</span>]</span><br><span class="line">    verbs: [<span class="string">"create"</span>, <span class="string">"get"</span>, <span class="string">"delete"</span>]</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: cephfs-provisioner</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"secrets"</span>]</span><br><span class="line">    verbs: [<span class="string">"create"</span>, <span class="string">"get"</span>, <span class="string">"delete"</span>]</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: Recreate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: cephfs-provisioner</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: cephfs-provisioner</span><br><span class="line">        image: <span class="string">"quay.io/external_storage/cephfs-provisioner:v2.0.0-k8s1.11"</span></span><br><span class="line">        env:</span><br><span class="line">        - name: PROVISIONER_NAME</span><br><span class="line">          value: ceph.com/cephfs</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - <span class="string">"/usr/local/bin/cephfs-provisioner"</span></span><br><span class="line">        args:</span><br><span class="line">        - <span class="string">"-id=cephfs-provisioner-1"</span></span><br><span class="line">      serviceAccount: cephfs-provisioner</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f external-storage-cephfs-provisioner.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态 等待running之后 再进行后续的操作</span></span><br><span class="line">kubectl get pod -n kube-system</span><br></pre></td></tr></table></figure><p>#####配置 storageclass</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看key 在ceph的mon或者admin节点</span></span><br><span class="line">ceph auth get-key client.admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 admin secret</span></span><br><span class="line"><span class="comment"># CEPH_ADMIN_SECRET 替换为 client.admin 获取到的key</span></span><br><span class="line"><span class="comment"># 如果在测试 ceph rbd 方式已经添加 可以略过此步骤</span></span><br><span class="line"><span class="built_in">export</span> CEPH_ADMIN_SECRET=<span class="string">'AQBBAnRbSiSOFxAAEZXNMzYV6hsceccYLhzdWw=='</span></span><br><span class="line">kubectl create secret generic ceph-secret --<span class="built_in">type</span>=<span class="string">"kubernetes.io/rbd"</span> \</span><br><span class="line">--from-literal=key=<span class="variable">$CEPH_ADMIN_SECRET</span> \</span><br><span class="line">--namespace=kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 secret</span></span><br><span class="line">kubectl get secret ceph-secret -n kube-system -o yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 StorageClass</span></span><br><span class="line">cat &gt;storageclass-cephfs.yaml&lt;&lt;EOF</span><br><span class="line">kind: StorageClass</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: dynamic-cephfs</span><br><span class="line">provisioner: ceph.com/cephfs</span><br><span class="line">parameters:</span><br><span class="line">    monitors: 11.11.11.111:6789,11.11.11.112:6789,11.11.11.113:6789</span><br><span class="line">    adminId: admin</span><br><span class="line">    adminSecretName: ceph-secret</span><br><span class="line">    adminSecretNamespace: <span class="string">"kube-system"</span></span><br><span class="line">    claimRoot: /volumes/kubernetes</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f storageclass-cephfs.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get sc</span><br></pre></td></tr></table></figure><h5 id="测试使用-1"><a href="#测试使用-1" class="headerlink" title="测试使用"></a>测试使用</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建pvc测试</span></span><br><span class="line">cat &gt;cephfs-pvc-test.yaml&lt;&lt;EOF</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: cephfs-claim</span><br><span class="line">spec:</span><br><span class="line">  accessModes:     </span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  storageClassName: dynamic-cephfs</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 2Gi</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f cephfs-pvc-test.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pvc</span><br><span class="line">kubectl get pv</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建 nginx pod 挂载测试</span></span><br><span class="line">cat &gt;nginx-pod.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod1</span><br><span class="line">  labels:</span><br><span class="line">    name: nginx-pod1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-pod1</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    ports:</span><br><span class="line">    - name: web</span><br><span class="line">      containerPort: 80</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: cephfs</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  volumes:</span><br><span class="line">  - name: cephfs</span><br><span class="line">    persistentVolumeClaim:</span><br><span class="line">      claimName: cephfs-claim</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f nginx-pod.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改文件内容</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -ti nginx-pod1 -- /bin/sh -c <span class="string">'echo Hello World from CephFS!!! &gt; /usr/share/nginx/html/index.html'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">POD_ID=$(kubectl get pods -o wide | grep nginx-pod1 | awk <span class="string">'&#123;print $(NF-1)&#125;'</span>)</span><br><span class="line">curl http://<span class="variable">$POD_ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f nginx-pod.yaml</span><br><span class="line">kubectl delete -f cephfs-pvc-test.yaml</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/concepts/storage/storage-classes/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/storage-classes/</a></li><li><a href="https://docs.openshift.com/container-platform/3.5/install_config/storage_examples/ceph_rbd_dynamic_example.html" target="_blank" rel="noopener">https://docs.openshift.com/container-platform/3.5/install_config/storage_examples/ceph_rbd_dynamic_example.html</a></li><li><a href="https://ieevee.com/tech/2018/05/17/k8s-cephfs.html" target="_blank" rel="noopener">https://ieevee.com/tech/2018/05/17/k8s-cephfs.html</a></li><li><a href="https://github.com/kubernetes-incubator/external-storage/tree/master/ceph/rbd" target="_blank" rel="noopener">https://github.com/kubernetes-incubator/external-storage/tree/master/ceph/rbd</a></li><li><a href="https://github.com/kubernetes-incubator/external-storage/blob/master/ceph/rbd/deploy/README.md" target="_blank" rel="noopener">https://github.com/kubernetes-incubator/external-storage/blob/master/ceph/rbd/deploy/README.md</a></li><li><a href="https://github.com/heketi/heketi/blob/master/docs/admin/install-kubernetes.md" target="_blank" rel="noopener">https://github.com/heketi/heketi/blob/master/docs/admin/install-kubernetes.md</a></li><li><a href="https://github.com/gluster/gluster-kubernetes/blob/master/docs/setup-guide.md" target="_blank" rel="noopener">https://github.com/gluster/gluster-kubernetes/blob/master/docs/setup-guide.md</a></li><li><a href="https://github.com/gluster/gluster-kubernetes/blob/master/docs/examples/hello_world/README.md" target="_blank" rel="noopener">https://github.com/gluster/gluster-kubernetes/blob/master/docs/examples/hello_world/README.md</a></li><li><a href="https://jimmysong.io/kubernetes-handbook/practice/using-heketi-gluster-for-persistent-storage.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/practice/using-heketi-gluster-for-persistent-storage.html</a></li><li><a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/persistent-volumes/</a></li><li><a href="https://docs.openshift.com/enterprise/3.1/architecture/additional_concepts/storage.html#pv-access-modes" target="_blank" rel="noopener">https://docs.openshift.com/enterprise/3.1/architecture/additional_concepts/storage.html#pv-access-modes</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ceph安装配置</title>
      <link href="/posts/47/"/>
      <url>/posts/47/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>ceph是一个开源分布式存储系统，支持PB级别的存储，支持对象存储，块存储和文件存储，高性能，高可用，可扩展。<br><a id="more"></a></p><blockquote><p>部署网络建议架构图</p></blockquote><p><img src="/posts/47/ceph-network.png" alt=""></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><blockquote><p>部署架构图，本次实验部署jewel版本</p></blockquote><p><img src="/posts/47/ceph-deploy-arch.png" alt=""></p><h4 id="实验环境的Vagrantfile"><a href="#实验环境的Vagrantfile" class="headerlink" title="实验环境的Vagrantfile"></a>实验环境的<code>Vagrantfile</code></h4><blockquote><p>lab1节点既作admin节点又作node节点，lab2，lab3只作为node节点，lab4作为作测试使用ceph的节点</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">4</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      config.vm.define <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"11.11.11.11<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          <span class="symbol">inline:</span> <span class="string">"echo hello from node <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">          v.cpus = <span class="number">3</span></span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--name"</span>, <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span>, <span class="string">"--memory"</span>, <span class="string">"3096"</span>]</span><br><span class="line">          file_to_disk = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>_vdb.vdi"</span></span><br><span class="line">          <span class="keyword">unless</span> File.exist?(file_to_disk)</span><br><span class="line">            <span class="comment"># 50GB</span></span><br><span class="line">            v.customize [<span class="string">'createhd'</span>, <span class="string">'--filename'</span>, file_to_disk, <span class="string">'--size'</span>, <span class="number">50</span> * <span class="number">1024</span>]</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">          v.customize [<span class="string">'storageattach'</span>, <span class="symbol">:id</span>, <span class="string">'--storagectl'</span>, <span class="string">'IDE'</span>, <span class="string">'--port'</span>, <span class="number">1</span>, <span class="string">'--device'</span>, <span class="number">0</span>, <span class="string">'--type'</span>, <span class="string">'hdd'</span>, <span class="string">'--medium'</span>, file_to_disk]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="配置阿里ceph源"><a href="#配置阿里ceph源" class="headerlink" title="配置阿里ceph源"></a>配置阿里ceph源</h4><blockquote><p>在所有节点执行如下操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/yum.repos.d/ceph.repo&lt;&lt;EOF</span><br><span class="line">[ceph]</span><br><span class="line">name=ceph</span><br><span class="line">baseurl=http://mirrors.aliyun.com/ceph/rpm-jewel/el7/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=1</span><br><span class="line"></span><br><span class="line">[ceph-noarch]</span><br><span class="line">name=cephnoarch</span><br><span class="line">baseurl=http://mirrors.aliyun.com/ceph/rpm-jewel/el7/noarch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=1</span><br><span class="line"></span><br><span class="line">[ceph-source]</span><br><span class="line">name=Ceph <span class="built_in">source</span> packages</span><br><span class="line">baseurl=http://mirrors.163.com/ceph/rpm-jewel/el7/SRPMS</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line"><span class="built_in">type</span>=rpm-md</span><br><span class="line">gpgkey=http://mirrors.163.com/ceph/keys/release.asc</span><br><span class="line">priority=1</span><br><span class="line">EOF</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h4 id="在admin节点安装ceph-deploy"><a href="#在admin节点安装ceph-deploy" class="headerlink" title="在admin节点安装ceph-deploy"></a>在admin节点安装ceph-deploy</h4><blockquote><p>lab1 节点</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># 如果已经配置了上面的阿里源，不需要再配置如下的源</span></span><br><span class="line"><span class="comment"># 推荐使用阿里源，因为官方源速度太慢</span></span><br><span class="line">cat &gt;/etc/yum.repos.d/ceph.repo&lt;&lt;EOF</span><br><span class="line">[ceph-noarch]</span><br><span class="line">name=Ceph noarch packages</span><br><span class="line">baseurl=https://download.ceph.com/rpm-jewel/el7/noarch</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line"><span class="built_in">type</span>=rpm-md</span><br><span class="line">gpgkey=https://download.ceph.com/keys/release.asc</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新系统软件</span></span><br><span class="line"><span class="comment"># 此操作可省略</span></span><br><span class="line"><span class="comment"># yum update -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 ceph-deploy</span></span><br><span class="line">yum install -y ceph-deploy</span><br></pre></td></tr></table></figure><h4 id="配置admin节点连接node节点"><a href="#配置admin节点连接node节点" class="headerlink" title="配置admin节点连接node节点"></a>配置admin节点连接node节点</h4><blockquote><p> 安装之后需要配置admin节点可以ssh无密码登录每个node节点和测试节点，用户需要有sudo权限</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在每一个node节点执行</span></span><br><span class="line">useradd ceph</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'ceph'</span> | passwd --stdin ceph</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"ceph ALL = (root) NOPASSWD:ALL"</span> &gt; /etc/sudoers.d/ceph</span><br><span class="line">chmod 0440 /etc/sudoers.d/ceph</span><br><span class="line"><span class="comment"># 配置sshd可以使用password登录</span></span><br><span class="line">sed -i <span class="string">'s/PasswordAuthentication no/PasswordAuthentication yes/'</span> /etc/ssh/sshd_config</span><br><span class="line">systemctl reload sshd</span><br><span class="line"><span class="comment"># 配置sudo不需要tty</span></span><br><span class="line">sed -i <span class="string">'s/Default requiretty/#Default requiretty/'</span> /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有节点配置hosts</span></span><br><span class="line"><span class="comment"># 包括要进行ceph测试的机器</span></span><br><span class="line"><span class="comment"># 使用vagrant实验时注意</span></span><br><span class="line"><span class="comment"># 由于vagrant会自动把主机名解析为 127.0.0.1</span></span><br><span class="line"><span class="comment"># 所以在实验时如果在ceph集群内任意一台机器进行实验时</span></span><br><span class="line"><span class="comment"># 注意把本机名解析为 127.0.0.1 的行注释，如下所示</span></span><br><span class="line"><span class="comment"># 127.0.0.1lab1lab1</span></span><br><span class="line">cat &gt;&gt;/etc/hosts&lt;&lt;EOF</span><br><span class="line">11.11.11.111 lab1</span><br><span class="line">11.11.11.112 lab2</span><br><span class="line">11.11.11.113 lab3</span><br><span class="line">11.11.11.113 lab4</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在admin节点执行</span></span><br><span class="line"><span class="comment"># 创建ceph用户，配置sshkey登录</span></span><br><span class="line"><span class="comment"># 由于lab1节点作为node节点时已经创建过ceph用户</span></span><br><span class="line"><span class="comment"># 第一条命令可能会出错，忽略即可</span></span><br><span class="line">useradd ceph</span><br><span class="line">su - ceph</span><br><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id ceph@lab1</span><br><span class="line">ssh-copy-id ceph@lab2</span><br><span class="line">ssh-copy-id ceph@lab3</span><br><span class="line">ssh-copy-id ceph@lab4</span><br></pre></td></tr></table></figure><h4 id="在admin节点创建集群"><a href="#在admin节点创建集群" class="headerlink" title="在admin节点创建集群"></a>在admin节点创建集群</h4><blockquote><p>在lab1节点执行如下操作，node的主机名一定要设置正确 lab1, lab2, lab3。否则可能会无法实验成功</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不要使用sudo也不要使用root用户运行如下的命令</span></span><br><span class="line">su - ceph</span><br><span class="line">mkdir my-cluster</span><br><span class="line"><span class="built_in">cd</span> my-cluster</span><br><span class="line"><span class="comment"># 创建lab1为monitor</span></span><br><span class="line">ceph-deploy new lab1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置文件</span></span><br><span class="line">ls -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置ceph.conf</span></span><br><span class="line">[global]</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 如果有多个网卡，应该配置如下选项，</span></span><br><span class="line"><span class="comment"># public network是公共网络，负责集群对外提供服务的流量</span></span><br><span class="line"><span class="comment"># cluster network是集群网络，负载集群中数据复制传输通信等</span></span><br><span class="line"><span class="comment"># 本次实验使用同一块网卡，生境环境建议分别使用一块网卡</span></span><br><span class="line">public network = 11.11.11.0/24</span><br><span class="line">cluster network = 11.11.11.0/24</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 ceph 包</span></span><br><span class="line"><span class="comment"># 如果按照官方文档安装方法 会重新配置安装官方ceph源</span></span><br><span class="line"><span class="comment"># 由于网络问题，安装可能会出错，需要多次执行</span></span><br><span class="line"><span class="comment"># ceph-deploy install 其实只是会安装 ceph ceph-radosgw 两个包</span></span><br><span class="line"><span class="comment"># ceph-deploy install lab1 lab2 lab3</span></span><br><span class="line"><span class="comment"># 推荐使用阿里源安装，因为使用ceph-deploy安装会很慢</span></span><br><span class="line"><span class="comment"># 使用如下命令手动安装包，替代官方的 ceph-deploy install 命令</span></span><br><span class="line"><span class="comment"># 如下操作在所有node节点上执行</span></span><br><span class="line">yum install -y ceph ceph-radosgw</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署monitor和生成keys</span></span><br><span class="line">ceph-deploy mon create-initial</span><br><span class="line">ls -l *.keyring</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制文件到node节点</span></span><br><span class="line">ceph-deploy admin lab1 lab2 lab3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署manager （luminous+）12及以后的版本需要部署</span></span><br><span class="line"><span class="comment"># 本次部署 jewel 版本 ，不需要执行如下命令</span></span><br><span class="line"><span class="comment"># ceph-deploy mgr create lab1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加osd 以磁盘方式</span></span><br><span class="line"><span class="comment"># 本次实验采用此种方法</span></span><br><span class="line"><span class="comment"># sdb 为虚拟机添加的磁盘设置名</span></span><br><span class="line">ceph-deploy osd create lab1:sdb lab2:sdb lab3:sdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在node节点创建目录</span></span><br><span class="line">rm -rf /data/osd1</span><br><span class="line">mkdir -pv /data/osd1</span><br><span class="line">chmod 777 -R /data/osd1</span><br><span class="line">chown ceph.ceph -R /data/osd1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加osd 以文件目录方式</span></span><br><span class="line">ceph-deploy osd prepare lab1:/data/osd1 lab2:/data/osd1 lab3:/data/osd1</span><br><span class="line">ceph-deploy osd activate lab1:/data/osd1 lab2:/data/osd1 lab3:/data/osd1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">ssh lab1 sudo ceph health</span><br><span class="line">ssh lab1 sudo ceph -s</span><br></pre></td></tr></table></figure><h4 id="清理集群"><a href="#清理集群" class="headerlink" title="清理集群"></a>清理集群</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果安装过程出错，使用如下命令清理之后重新开始</span></span><br><span class="line">ceph-deploy purge lab1 lab2 lab3</span><br><span class="line">ceph-deploy purgedata lab1 lab2 lab3</span><br><span class="line">ceph-deploy forgetkeys</span><br><span class="line">rm ceph.*</span><br></pre></td></tr></table></figure><h3 id="扩展集群"><a href="#扩展集群" class="headerlink" title="扩展集群"></a>扩展集群</h3><h4 id="提高可用性"><a href="#提高可用性" class="headerlink" title="提高可用性"></a>提高可用性</h4><blockquote><ul><li>在lab1上运行metadata server 为后续使用cephfs</li><li>在lab2,lab3运行monitor和manager提高集群可用性</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为了使用CephFS，必须启动 metadata server</span></span><br><span class="line">ceph-deploy mds create lab1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加monitor</span></span><br><span class="line">ceph-deploy mon add lab2</span><br><span class="line">ceph-deploy mon add lab3</span><br><span class="line">ssh lab1 sudo ceph -s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在monitor节点查看状态（需要以root用户或者sudo查看）</span></span><br><span class="line">ceph quorum_status --format json-pretty</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加manager （luminous+）12及以后的版本需要部署</span></span><br><span class="line"><span class="comment"># 本次部署 jewel 版本 ，不需要执行如下命令</span></span><br><span class="line"><span class="comment"># ceph-deploy mgr create lab2 lab3</span></span><br></pre></td></tr></table></figure><h4 id="部署RGW使用Ceph-Object-Gateway"><a href="#部署RGW使用Ceph-Object-Gateway" class="headerlink" title="部署RGW使用Ceph Object Gateway"></a>部署RGW使用Ceph Object Gateway</h4><blockquote><p>提供S3/Swift存储功能，实现S3和Swift兼容的接口，可以使用S3或Swift的命令行工具或SDK来使用ceph<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 rgw</span></span><br><span class="line">ceph-deploy rgw create lab1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置 /etc/ceph/ceph.conf</span></span><br><span class="line"><span class="comment"># 使用 rgw 监听在 80 端口</span></span><br><span class="line"><span class="comment"># lab1 为启动 rgw 的主机名</span></span><br><span class="line">[client.rgw.lab1]</span><br><span class="line">rgw_frontends = <span class="string">"civetweb port=80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 rgw</span></span><br><span class="line">systemctl restart ceph-radosgw@rgw.lab1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">curl -I http://11.11.11.111/</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="使用ceph存储"><a href="#使用ceph存储" class="headerlink" title="使用ceph存储"></a>使用ceph存储</h3><blockquote><p>应用存储使用架构图</p></blockquote><p><img src="/posts/47/ceph-use-1.jpg" alt=""></p><p><img src="/posts/47/ceph-use-2.jpg" alt=""></p><h4 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装ceph</span></span><br><span class="line">yum install -y ceph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制相关文件到要使用ceph-client的机器</span></span><br><span class="line">ceph-deploy admin lab4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 存储文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello ceph oject storage'</span> &gt; testfile.txt</span><br><span class="line">ceph osd pool create mytest 8</span><br><span class="line">rados put <span class="built_in">test</span>-object-1 testfile.txt --pool=mytest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看读取文件</span></span><br><span class="line">rados -p mytest ls</span><br><span class="line">rados get <span class="built_in">test</span>-object-1 testfile.txt.1 --pool=mytest</span><br><span class="line">cat testfile.txt.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件位置</span></span><br><span class="line">ceph osd map mytest <span class="built_in">test</span>-object-1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">rados rm <span class="built_in">test</span>-object-1 --pool=mytest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除pool</span></span><br><span class="line">ceph osd pool rm mytest mytest --yes-i-really-really-mean-it</span><br></pre></td></tr></table></figure><h4 id="块存储"><a href="#块存储" class="headerlink" title="块存储"></a>块存储</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装ceph</span></span><br><span class="line">yum install -y ceph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制相关文件到要使用ceph-client的机器</span></span><br><span class="line">ceph-deploy admin lab4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建块设备镜像</span></span><br><span class="line">rbd create foo --size 4096 --image-feature layering</span><br><span class="line">rbd info foo</span><br><span class="line">rados -p rbd ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 映射镜像到块设备</span></span><br><span class="line">sudo rbd map foo --name client.admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用块设备创建文件系统</span></span><br><span class="line">sudo mkfs.ext4 -m0 /dev/rbd/rbd/foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载使用</span></span><br><span class="line">sudo mkdir /mnt/ceph-block-device</span><br><span class="line">sudo mount /dev/rbd/rbd/foo /mnt/ceph-block-device</span><br><span class="line"><span class="built_in">cd</span> /mnt/ceph-block-device</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello ceph block storage'</span> &gt; testfile.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">sudo umount -lf /mnt/ceph-block-device</span><br><span class="line">sudo rbd unmap foo</span><br><span class="line">rbd remove foo</span><br><span class="line">rados -p rbd ls</span><br></pre></td></tr></table></figure><h4 id="S3对象存储"><a href="#S3对象存储" class="headerlink" title="S3对象存储"></a>S3对象存储</h4><blockquote><p>11.11.11.111 为安装了 RGW 的机器</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y ceph ceph-radosgw</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制相关文件到要使用ceph-client的机器</span></span><br><span class="line">ceph-deploy admin lab4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建S3所需要的pool</span></span><br><span class="line">ceph osd pool create .rgw 128 128</span><br><span class="line">ceph osd pool create .rgw.root 128 128</span><br><span class="line">ceph osd pool create .rgw.control 128 128</span><br><span class="line">ceph osd pool create .rgw.gc 128 128</span><br><span class="line">ceph osd pool create .rgw.buckets 128 128</span><br><span class="line">ceph osd pool create .rgw.buckets.index 128 128</span><br><span class="line">ceph osd pool create .rgw.buckets.extra 128 128</span><br><span class="line">ceph osd pool create .<span class="built_in">log</span> 128 128</span><br><span class="line">ceph osd pool create .intent-log 128 128</span><br><span class="line">ceph osd pool create .usage 128 128</span><br><span class="line">ceph osd pool create .users 128 128</span><br><span class="line">ceph osd pool create .users.email 128 128</span><br><span class="line">ceph osd pool create .users.swift 128 128</span><br><span class="line">ceph osd pool create .users.uid 128 128</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">rados lspools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">curl -I http://11.11.11.111/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建S3用户</span></span><br><span class="line"><span class="comment"># 保存如下命令返回的 user access_key secret_key</span></span><br><span class="line">radosgw-admin user create --uid=foo --display-name=foo --email=foo@foo.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建admin用户</span></span><br><span class="line">radosgw-admin user create --uid=admin --display-name=admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许admin读写users信息</span></span><br><span class="line">radosgw-admin caps add --uid=admin --caps=<span class="string">"users=*"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许admin读写所有的usage信息</span></span><br><span class="line">radosgw-admin caps add --uid=admin --caps=<span class="string">"usage=read,write"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装s3测试工具</span></span><br><span class="line">yum install -y s3cmd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置s3cmd, 只需指定Access Key和Secret Key，其他默认即可</span></span><br><span class="line">s3cmd --configure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修该生成的配置文件</span></span><br><span class="line">vim <span class="variable">$HOME</span>/.s3cfg</span><br><span class="line">host_base = 11.11.11.111</span><br><span class="line">host_bucket = 11.11.11.111/%(bucket)</span><br><span class="line">use_https = False</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Bucket</span></span><br><span class="line">s3cmd mb s3://mybucket</span><br><span class="line">s3cmd ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传Object</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello ceph block storage s3'</span> &gt; hello.txt</span><br><span class="line">s3cmd put hello.txt s3://mybucket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Object</span></span><br><span class="line">s3cmd ls s3://mybucket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载Object</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">s3cmd get s3://mybucket/hello.txt</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除bucket下所有对象</span></span><br><span class="line">s3cmd del -rf s3://mybucket/</span><br><span class="line">s3cmd ls -r s3://mybucket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除Bucket</span></span><br><span class="line">s3cmd mb s3://mybucket1</span><br><span class="line">s3cmd rb s3://mybucket1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除S3用户</span></span><br><span class="line">radosgw-admin user rm --uid=foo</span><br><span class="line">radosgw-admin user rm --uid=admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除pool</span></span><br><span class="line">ceph osd pool delete .rgw .rgw --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .rgw.root .rgw.root --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .rgw.control .rgw.control --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .rgw.gc .rgw.gc --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .rgw.buckets .rgw.buckets --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .rgw.buckets.index .rgw.buckets.index --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .rgw.buckets.extra .rgw.buckets.extra --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .<span class="built_in">log</span> .<span class="built_in">log</span> --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .intent-log .intent-log --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .usage .usage --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .users .users --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .users.email .users.email --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .users.swift .users.swift --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .users.uid .users.uid --yes-i-really-really-mean-it</span><br></pre></td></tr></table></figure><h4 id="CephFS存储"><a href="#CephFS存储" class="headerlink" title="CephFS存储"></a>CephFS存储</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装ceph</span></span><br><span class="line">yum install -y ceph ceph-fuse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制相关文件到要使用ceph-client的机器</span></span><br><span class="line">ceph-deploy admin lab4</span><br><span class="line"></span><br><span class="line"><span class="comment"># CephFS需要使用两个Pool来分别存储数据和元数据</span></span><br><span class="line">ceph osd pool create fs_data 128</span><br><span class="line">ceph osd pool create fs_metadata 128</span><br><span class="line">ceph osd lspools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个CephFS</span></span><br><span class="line">ceph fs new cephfs fs_metadata fs_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">ceph fs ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用内核提供的功能 挂载CephFS</span></span><br><span class="line"><span class="comment"># 由于可能会有bug，建议使用 4.0 以上的内核</span></span><br><span class="line"><span class="comment"># 优点是性能比使用ceph-fuse更好</span></span><br><span class="line"><span class="comment"># name，secret 为 /etc/ceph/ceph.client.admin.keyring 里的内容</span></span><br><span class="line">mkdir /mnt/mycephfs</span><br><span class="line">mount -t ceph lab1:6789,lab2:6789,lab3:6789:/ /mnt/mycephfs -o name=admin,secret=AQBoclRaiilZJBAACLjqg2OUOOB/FNa20UJXYA==</span><br><span class="line">df -h</span><br><span class="line"><span class="built_in">cd</span> /mnt/mycephfs</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello ceph CephFS'</span> &gt; hello.txt</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">umount -lf /mnt/mycephfs</span><br><span class="line">rm -rf /mnt/mycephfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ceph-fuse 挂载CephFS</span></span><br><span class="line">mkdir /mnt/mycephfs</span><br><span class="line">ceph-fuse -m lab1:6789 /mnt/mycephfs</span><br><span class="line">df -h</span><br><span class="line"><span class="built_in">cd</span> /mnt/mycephfs</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello ceph CephFS'</span> &gt; hello.txt</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">umount -lf /mnt/mycephfs</span><br><span class="line">rm -rf /mnt/mycephfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line"><span class="comment"># 停止 metadata server</span></span><br><span class="line"><span class="comment"># 本次部署在lab1，去lab1停止服务</span></span><br><span class="line">systemctl stop ceph-mds@lab1</span><br><span class="line">ceph fs rm cephfs --yes-i-really-mean-it</span><br><span class="line">ceph osd pool delete fs_data fs_data --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete fs_metadata fs_metadata --yes-i-really-really-mean-it</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 metadata server</span></span><br><span class="line"><span class="comment"># 方便以后使用 cephfs</span></span><br><span class="line">systemctl start ceph-mds@lab1</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://docs.ceph.com/docs/master/cephfs/best-practices/" target="_blank" rel="noopener">http://docs.ceph.com/docs/master/cephfs/best-practices/</a></li><li><a href="http://docs.ceph.com/docs/master/start/" target="_blank" rel="noopener">http://docs.ceph.com/docs/master/start/</a></li><li><a href="http://docs.ceph.org.cn/start/" target="_blank" rel="noopener">http://docs.ceph.org.cn/start/</a></li><li><a href="http://docs.ceph.com/docs/master/start/quick-rbd/" target="_blank" rel="noopener">http://docs.ceph.com/docs/master/start/quick-rbd/</a></li><li><a href="http://www.xuxiaopang.com/2016/10/13/easy-ceph-RBD/" target="_blank" rel="noopener">http://www.xuxiaopang.com/2016/10/13/easy-ceph-RBD/</a></li><li><a href="http://docs.ceph.com/docs/master/start/quick-rgw/" target="_blank" rel="noopener">http://docs.ceph.com/docs/master/start/quick-rgw/</a></li><li><a href="https://blog.frognew.com/tags/ceph.html" target="_blank" rel="noopener">https://blog.frognew.com/tags/ceph.html</a></li><li><a href="https://www.centos.bz/2017/10/%E7%94%A8ceph-deploy%E5%AE%89%E8%A3%85ceph%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9B%86%E7%BE%A4/" target="_blank" rel="noopener">https://www.centos.bz/2017/10/%E7%94%A8ceph-deploy%E5%AE%89%E8%A3%85ceph%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9B%86%E7%BE%A4/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storage </tag>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio-1.0微服务实验</title>
      <link href="/posts/46/"/>
      <url>/posts/46/</url>
      
        <content type="html"><![CDATA[<p>由于1.0版本和0.8版本没有改动api，可以直接使用<a href="/posts/31/">0.8版本的微服务实验</a></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> service mesh </tag>
            
            <tag> istio </tag>
            
            <tag> k8s </tag>
            
            <tag> microservice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s日志收集实战</title>
      <link href="/posts/45/"/>
      <url>/posts/45/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文主要介绍在k8s中收集应用的日志方案，应用运行中日志，一般情况下都需要收集存储到一个集中的日志管理系统中，可以方便对日志进行分析统计，监控，甚至用于机器学习，智能分析应用系统问题，及时修复应用所存在的问题。</p><p>在k8s集群中应用一般有如下日志输出方式</p><ul><li>直接遵循docker官方建议把日志输出到标准输出或者标准错误输出</li><li>输出日志到容器内指定目录中</li><li>应用直接发送日志给日志收集系统</li></ul><p>本文会综合部署上述日志收集方案。<br><a id="more"></a><br>日志收集组件说明</p><ul><li>elastisearch 存储收集到的日志</li><li>kibana 可视化收集到的日志</li><li>logstash 汇总处理日志发送给elastisearch 存储</li><li>filebeat 读取容器或者应用日志文件处理发送给elastisearch或者logstash，也可用于汇总日志</li><li>fluentd 读取容器或者应用日志文件处理发送给elastisearch，也可用于汇总日志</li><li>fluent-bit 读取容器或者应用日志文件处理发送给elastisearch或者fluentd</li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><blockquote><p>本次实验使用了3台虚拟机做k8s集群，每台虚拟机3G内存</p></blockquote><h4 id="部署前的准备"><a href="#部署前的准备" class="headerlink" title="部署前的准备"></a>部署前的准备</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取文件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/mgxian/k8s-log.git</span><br><span class="line"><span class="built_in">cd</span> k8s-log</span><br><span class="line">git checkout v1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 logging namespace</span></span><br><span class="line">kubectl apply -f logging-namespace.yaml</span><br></pre></td></tr></table></figure><h4 id="部署elastisearch"><a href="#部署elastisearch" class="headerlink" title="部署elastisearch"></a>部署elastisearch</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次部署虽然使用 StatefulSet 但是没有使用pv进行持久化数据存储</span></span><br><span class="line"><span class="comment"># pod重启之后，数据会丢失，生产环境一定要使用pv持久化存储数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f elasticsearch.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods,svc -n logging -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待所有pod变成running状态 </span></span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line"><span class="comment"># 如果测试都有数据返回代表部署成功</span></span><br><span class="line">kubectl run curl -n logging --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup elasticsearch-logging</span><br><span class="line">curl <span class="string">'http://elasticsearch-logging:9200/_cluster/health?pretty'</span></span><br><span class="line">curl <span class="string">'http://elasticsearch-logging:9200/_cat/nodes'</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理测试</span></span><br><span class="line">kubectl delete deploy curl -n logging</span><br></pre></td></tr></table></figure><h4 id="部署kibana"><a href="#部署kibana" class="headerlink" title="部署kibana"></a>部署kibana</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f kibana.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods,svc -n logging -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line"><span class="comment"># 浏览器访问下面输出的地址 看到 kibana 界面代表正常</span></span><br><span class="line"><span class="comment"># 11.11.11.112 为集群中某个 node 节点ip</span></span><br><span class="line">KIBANA_NODEPORT=$(kubectl get svc -n logging | grep kibana-logging | awk <span class="string">'&#123;print $(NF-1)&#125;'</span> | awk -F[:/] <span class="string">'&#123;print $2&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://11.11.11.112:<span class="variable">$KIBANA_NODEPORT</span>/"</span></span><br></pre></td></tr></table></figure><h4 id="部署fluentd收集日志"><a href="#部署fluentd收集日志" class="headerlink" title="部署fluentd收集日志"></a>部署fluentd收集日志</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fluentd 以 daemoset 方式部署</span></span><br><span class="line"><span class="comment"># 在每个节点上启动fluentd容器，收集k8s组件，docker以及容器的日志</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给每个需要启动fluentd的节点打相关label</span></span><br><span class="line"><span class="comment"># kubectl label node lab1 beta.kubernetes.io/fluentd-ds-ready=true</span></span><br><span class="line">kubectl label nodes --all beta.kubernetes.io/fluentd-ds-ready=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f fluentd-es-configmap.yaml</span><br><span class="line">kubectl apply -f fluentd-es-ds.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods,svc -n logging -o wide</span><br></pre></td></tr></table></figure><h4 id="kibana查看日志"><a href="#kibana查看日志" class="headerlink" title="kibana查看日志"></a>kibana查看日志</h4><blockquote><p>创建<code>index fluentd-k8s-*</code>，由于需要拉取镜像启动容器，可能需要等待几分钟才能看到索引和数据</p></blockquote><p><img src="/posts/45/k8s-log-kibana-create-index.png" alt=""></p><p><img src="/posts/45/k8s-log-kibana-create-index-2.png" alt=""></p><blockquote><p>查看日志</p></blockquote><p><img src="/posts/45/k8s-log-kibana-discover-1.png" alt=""></p><h3 id="应用日志收集测试"><a href="#应用日志收集测试" class="headerlink" title="应用日志收集测试"></a>应用日志收集测试</h3><h4 id="应用日志输出到标准输出测试"><a href="#应用日志输出到标准输出测试" class="headerlink" title="应用日志输出到标准输出测试"></a>应用日志输出到标准输出测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动测试日志输出</span></span><br><span class="line">kubectl run <span class="built_in">echo</span>-test --image=radial/busyboxplus:curl -- sh -c <span class="string">'count=1;while true;do echo log to stdout $count;sleep 1;count=$(($count+1));done'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令行查看日志</span></span><br><span class="line">ECHO_TEST_POD=$(kubectl get pods | grep <span class="built_in">echo</span>-test | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">kubectl logs -f <span class="variable">$ECHO_TEST_POD</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新 kibana 查看是否有新日志进入</span></span><br></pre></td></tr></table></figure><p><img src="/posts/45/k8s-log-kibana-discover-2.png" alt=""></p><h4 id="应用日志输出到容器指定目录-filebeat收集"><a href="#应用日志输出到容器指定目录-filebeat收集" class="headerlink" title="应用日志输出到容器指定目录(filebeat收集)"></a>应用日志输出到容器指定目录(filebeat收集)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f <span class="built_in">log</span>-contanier-file-filebeat.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br></pre></td></tr></table></figure><blockquote><p>添加<code>index filebeat-k8s-*</code> 查看日志</p></blockquote><p><img src="/posts/45/k8s-log-kibana-discover-3.png" alt=""></p><h4 id="应用日志输出到容器指定目录-fluent-bit收集"><a href="#应用日志输出到容器指定目录-fluent-bit收集" class="headerlink" title="应用日志输出到容器指定目录(fluent-bit收集)"></a>应用日志输出到容器指定目录(fluent-bit收集)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f <span class="built_in">log</span>-contanier-file-fluentbit.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br></pre></td></tr></table></figure><blockquote><p>添加<code>index fluentbit-k8s-*</code> 查看日志</p></blockquote><p><img src="/posts/45/k8s-log-kibana-discover-4.png" alt=""></p><h4 id="应用直接发送日志到日志系统"><a href="#应用直接发送日志到日志系统" class="headerlink" title="应用直接发送日志到日志系统"></a>应用直接发送日志到日志系统</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次测试应用直接输出日志到 elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f <span class="built_in">log</span>-contanier-es.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br></pre></td></tr></table></figure><blockquote><p>添加<code>index k8s-app-*</code> 查看日志</p></blockquote><p><img src="/posts/45/k8s-log-kibana-discover-5.png" alt=""></p><h4 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f <span class="built_in">log</span>-contanier-es.yaml</span><br><span class="line">kubectl delete -f <span class="built_in">log</span>-contanier-file-fluentbit.yaml</span><br><span class="line">kubectl delete -f <span class="built_in">log</span>-contanier-file-filebeat.yaml</span><br><span class="line">kubectl delete deploy <span class="built_in">echo</span>-test</span><br></pre></td></tr></table></figure><h3 id="日志收集系统总结"><a href="#日志收集系统总结" class="headerlink" title="日志收集系统总结"></a>日志收集系统总结</h3><blockquote><p>本小节的图表以ELK技术栈展示说明，实际使用过程中可以使用EFK技术栈，使用<code>fluentd</code>代替<code>logstash</code>，使用<code>fluent-bit</code>代替<code>filebeat</code>。由于<code>fluentd</code>在内存占用和性能上有更好的优势，推荐使用<code>fluentd</code>替代<code>logstash</code> ，<code>fluent-bit</code>和<code>filebeat</code>性能和内存占用相差不大</p></blockquote><h4 id="k8s集群日志通用收集方案"><a href="#k8s集群日志通用收集方案" class="headerlink" title="k8s集群日志通用收集方案"></a>k8s集群日志通用收集方案</h4><ul><li>集群内相关组件日志使用<code>fluentd/filebeat</code>收集</li><li>应用输出到标准输出或标准错误输出的日志使用<code>fluentd/filebeat</code>收集</li><li>应用输出到容器中指定文件日志使用<code>fluent-bit/filebeat</code>收集</li></ul><h4 id="通用日志收集系统"><a href="#通用日志收集系统" class="headerlink" title="通用日志收集系统"></a>通用日志收集系统</h4><blockquote><p>通用日志收集系统架构</p></blockquote><p><img src="/posts/45/通用应用日志收集架构图.png" alt=""></p><p>架构说明</p><ul><li>日志收集与处理解耦</li><li>由于收集和处理过程间加入了队列，当日志出现暴增时，可以避免分析处理节点被打垮，给分析处理节点足够时间消化日志数据</li><li>日志分析处理节点可以动态伸缩</li></ul><h4 id="大流量日志收集系统"><a href="#大流量日志收集系统" class="headerlink" title="大流量日志收集系统"></a>大流量日志收集系统</h4><blockquote><p>大流量日志收集系统架构图</p></blockquote><p><img src="/posts/45/大流量应用日志收集架构图.png" alt=""></p><p>架构说明</p><ul><li>当日志流量过大时，如果每一个日志收集节点都直连队列写数据，由于有很多分散的连接及写请求，会给队列造成压力。如果日志都发送到logstash收集节点，再集中写入队列，会减轻队列压力。</li></ul><h4 id="应用日志收集实验-ELK技术栈"><a href="#应用日志收集实验-ELK技术栈" class="headerlink" title="应用日志收集实验(ELK技术栈)"></a>应用日志收集实验(ELK技术栈)</h4><p>以收集<code>nginx</code>日志为例，进行日志收集分析实验， 复用之前实验创建的<code>elasticsearch，kibana</code>应用。实验采用大流量日志收集架构</p><h5 id="部署redis队列"><a href="#部署redis队列" class="headerlink" title="部署redis队列"></a>部署redis队列</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f redis.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n logging</span><br></pre></td></tr></table></figure><h5 id="部署indexer分析日志"><a href="#部署indexer分析日志" class="headerlink" title="部署indexer分析日志"></a>部署indexer分析日志</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f logstash-indexer.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n logging</span><br></pre></td></tr></table></figure><h5 id="部署shipper集中日志"><a href="#部署shipper集中日志" class="headerlink" title="部署shipper集中日志"></a>部署shipper集中日志</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f logstash-shipper.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n logging</span><br></pre></td></tr></table></figure><h5 id="部署nginx测试日志收集"><a href="#部署nginx测试日志收集" class="headerlink" title="部署nginx测试日志收集"></a>部署nginx测试日志收集</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f nginx-log-filebeat.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><h5 id="持续访问nginx生成日志"><a href="#持续访问nginx生成日志" class="headerlink" title="持续访问nginx生成日志"></a>持续访问nginx生成日志</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl run curl-test --image=radial/busyboxplus:curl -- sh -c <span class="string">'count=1;while true;do curl -s -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.89 Safari/537.36 $count" http://nginx-log-filebeat/ &gt;/dev/null;sleep 1;count=$(($count+1));done'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><h5 id="访问kibana查看日志"><a href="#访问kibana查看日志" class="headerlink" title="访问kibana查看日志"></a>访问kibana查看日志</h5><blockquote><p>添加<code>index k8s-logging-elk-*</code> 由于 logstash 启动较慢，可能需要等待数分钟才能看到数据</p></blockquote><p><img src="/posts/45/k8s-log-elk-1.png" alt=""></p><h5 id="清理-1"><a href="#清理-1" class="headerlink" title="清理"></a>清理</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f redis.yaml</span><br><span class="line">kubectl delete -f logstash-indexer.yaml</span><br><span class="line">kubectl delete -f logstash-shipper.yaml</span><br><span class="line">kubectl delete -f nginx-log-filebeat.yaml</span><br><span class="line">kubectl delete deploy curl-test</span><br></pre></td></tr></table></figure><h4 id="应用日志收集实验-EFK技术栈"><a href="#应用日志收集实验-EFK技术栈" class="headerlink" title="应用日志收集实验(EFK技术栈)"></a>应用日志收集实验(EFK技术栈)</h4><p>由于fluentd官方不提供redis队列的支持，本次实验移除了redis队列。</p><h5 id="部署indexer分析日志-1"><a href="#部署indexer分析日志-1" class="headerlink" title="部署indexer分析日志"></a>部署indexer分析日志</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f fluentd-indexer.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n logging</span><br></pre></td></tr></table></figure><h5 id="部署shipper集中日志-1"><a href="#部署shipper集中日志-1" class="headerlink" title="部署shipper集中日志"></a>部署shipper集中日志</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f fluentd-shipper.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n logging</span><br></pre></td></tr></table></figure><h5 id="部署nginx测试日志收集-1"><a href="#部署nginx测试日志收集-1" class="headerlink" title="部署nginx测试日志收集"></a>部署nginx测试日志收集</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f nginx-log-fluentbit.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><h5 id="持续访问nginx生成日志-1"><a href="#持续访问nginx生成日志-1" class="headerlink" title="持续访问nginx生成日志"></a>持续访问nginx生成日志</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl run curl-test --image=radial/busyboxplus:curl -- sh -c <span class="string">'count=1;while true;do curl -s -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.89 Safari/537.36 $count" http://nginx-log-fluentbit/ &gt;/dev/null;sleep 1;count=$(($count+1));done'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pod</span><br></pre></td></tr></table></figure><h5 id="访问kibana查看日志-1"><a href="#访问kibana查看日志-1" class="headerlink" title="访问kibana查看日志"></a>访问kibana查看日志</h5><blockquote><p>添加<code>index k8s-logging-efk-*</code></p></blockquote><p><img src="/posts/45/k8s-log-efk-1.png" alt=""></p><h5 id="清理-2"><a href="#清理-2" class="headerlink" title="清理"></a>清理</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f fluentd-indexer.yaml</span><br><span class="line">kubectl delete -f fluentd-shipper.yaml</span><br><span class="line">kubectl delete -f nginx-log-fluentbit.yaml</span><br><span class="line">kubectl delete deploy curl-test</span><br></pre></td></tr></table></figure><h3 id="应用日志可视化"><a href="#应用日志可视化" class="headerlink" title="应用日志可视化"></a>应用日志可视化</h3><h4 id="部署日志收集需要的组件"><a href="#部署日志收集需要的组件" class="headerlink" title="部署日志收集需要的组件"></a>部署日志收集需要的组件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署 indexer shipper fluentbit</span></span><br><span class="line">kubectl apply -f fluentd-indexer.yaml</span><br><span class="line">kubectl apply -f fluentd-shipper.yaml</span><br><span class="line">kubectl apply -f nginx-log-fluentbit.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get pods -n logging</span><br></pre></td></tr></table></figure><h4 id="模拟用户访问"><a href="#模拟用户访问" class="headerlink" title="模拟用户访问"></a>模拟用户访问</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f web-load-gen.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><h4 id="访问kibana查看日志-2"><a href="#访问kibana查看日志-2" class="headerlink" title="访问kibana查看日志"></a>访问kibana查看日志</h4><blockquote><p>添加<code>index k8s-logging-efk-*</code></p></blockquote><p><img src="/posts/45/k8s-log-kibana-1.png" alt=""></p><h4 id="创建图表"><a href="#创建图表" class="headerlink" title="创建图表"></a>创建图表</h4><h5 id="创建-Search"><a href="#创建-Search" class="headerlink" title="创建 Search"></a>创建 Search</h5><p>制作 Visualize 的时候需要使用</p><p>按指定条件搜索日志</p><p><img src="/posts/45/k8s-log-kibana-0.png" alt=""></p><p>保存 Search</p><p><img src="/posts/45/k8s-log-kibana-2.png" alt=""></p><h5 id="创建-Visualize"><a href="#创建-Visualize" class="headerlink" title="创建 Visualize"></a>创建 Visualize</h5><p>创建好的 Visualize 可以添加到 Dashboard 中</p><p>选择制作 Visualize</p><p><img src="/posts/45/k8s-log-kibana-3.png" alt=""></p><p>选择 Visualize 类型</p><p><img src="/posts/45/k8s-log-kibana-4.png" alt=""></p><p>选择使用上面步骤保存的 Search</p><p><img src="/posts/45/k8s-log-kibana-5.png" alt=""></p><p>选择指定的 bucket</p><p><img src="/posts/45/k8s-log-kibana-6.png" alt=""></p><p>选择 code 字段进行统计</p><p><img src="/posts/45/k8s-log-kibana-7.png" alt=""></p><p>保存 Visualize</p><p><img src="/posts/45/k8s-log-kibana-8.png" alt=""></p><p>使用如上的步骤创建多个 Visualize</p><p><img src="/posts/45/k8s-log-kibana-9.png" alt=""></p><h5 id="创建-Dashboard"><a href="#创建-Dashboard" class="headerlink" title="创建 Dashboard"></a>创建 Dashboard</h5><p>选择创建 Dashboard </p><p><img src="/posts/45/k8s-log-kibana-10.png" alt=""></p><p>把 Visualize 添加到 Dashboard</p><p><img src="/posts/45/k8s-log-kibana-11.png" alt=""></p><p>保存 Dashboard </p><p><img src="/posts/45/k8s-log-kibana-12.png" alt=""></p><p>编辑调整位置和大小</p><p><img src="/posts/45/k8s-log-kibana-13.png" alt=""></p><p>最终图表展示</p><p><img src="/posts/45/k8s-log-kibana-14.png" alt=""></p><blockquote><p>如果快速体验可以在 菜单 Managerment 的 Saved Ojects 标签直接使用导入功能，导入本次实验下载目录k8s-log下的<code>k8s-kibana-all.json</code>文件</p></blockquote><p><img src="/posts/45/k8s-log-kibana-15.png" alt=""></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/concepts/cluster-administration/logging/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/cluster-administration/logging/</a></li><li><a href="https://banzaicloud.com/blog/k8s-logging/" target="_blank" rel="noopener">https://banzaicloud.com/blog/k8s-logging/</a></li><li><a href="https://docs.fluentd.org/v0.12/articles/kubernetes-fluentd" target="_blank" rel="noopener">https://docs.fluentd.org/v0.12/articles/kubernetes-fluentd</a></li><li><a href="https://jimmysong.io/kubernetes-handbook/practice/app-log-collection.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/practice/app-log-collection.html</a></li><li><a href="https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/fluentd-elasticsearch/README.md" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/fluentd-elasticsearch/README.md</a></li><li><a href="https://www.elastic.co/blog/shipping-kubernetes-logs-to-elasticsearch-with-filebeat" target="_blank" rel="noopener">https://www.elastic.co/blog/shipping-kubernetes-logs-to-elasticsearch-with-filebeat</a></li><li><a href="https://github.com/elastic/beats/blob/master/deploy/kubernetes/filebeat/README.md" target="_blank" rel="noopener">https://github.com/elastic/beats/blob/master/deploy/kubernetes/filebeat/README.md</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-docker.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-docker.html</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/add-kubernetes-metadata.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/current/add-kubernetes-metadata.html</a></li><li><a href="https://github.com/fluent/fluentd-kubernetes-daemonset" target="_blank" rel="noopener">https://github.com/fluent/fluentd-kubernetes-daemonset</a></li><li><a href="https://github.com/fluent/fluent-bit-kubernetes-logging" target="_blank" rel="noopener">https://github.com/fluent/fluent-bit-kubernetes-logging</a></li><li><a href="https://github.com/fluent/fluent-bit" target="_blank" rel="noopener">https://github.com/fluent/fluent-bit</a></li><li><a href="https://www.docker.elastic.co/" target="_blank" rel="noopener">https://www.docker.elastic.co/</a></li><li><a href="https://fluentbit.io/documentation/0.13/" target="_blank" rel="noopener">https://fluentbit.io/documentation/0.13/</a></li><li><a href="https://docs.fluentd.org/v1.0/articles/quickstart" target="_blank" rel="noopener">https://docs.fluentd.org/v1.0/articles/quickstart</a></li><li><a href="https://www.elastic.co/guide/en/logstash/6.3/deploying-and-scaling.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/6.3/deploying-and-scaling.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s使用openebs实现动态持久化存储</title>
      <link href="/posts/44/"/>
      <url>/posts/44/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文章介绍如何使用openebs为k8s提供动态申请pv的功能。iscsi提供底层存储功能，openebs管理iscsi。目前只支持pv的<code>ReadWriteOnce</code>访问模式</p><p>访问模式只是能力描述，并不是强制执行的，对于没有按pvc声明的方式使用pv，存储提供者应该负责访问时的运行错误。例如如果设置pvc的访问模式为<code>ReadOnlyMany</code> ，pod挂载后依然可写，如果需要真正的不可写，申请pvc是需要指定 <code>readOnly: true</code> 参数<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="实验用的Vagrantfile"><a href="#实验用的Vagrantfile" class="headerlink" title="实验用的Vagrantfile"></a>实验用的Vagrantfile</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">    (1..3).each <span class="keyword">do</span> |i|</span><br><span class="line">      config.vm.define <span class="string">"lab#&#123;i&#125;"</span> <span class="keyword">do</span> |node|</span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab#&#123;i&#125;"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"11.11.11.11#&#123;i&#125;"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          inline: <span class="string">"echo hello from node #&#123;i&#125;"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">          v.cpus = 2</span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"lab#&#123;i&#125;"</span>, <span class="string">"--memory"</span>, <span class="string">"3096"</span>]</span><br><span class="line">          file_to_disk = <span class="string">"lab#&#123;i&#125;_vdb.vdi"</span></span><br><span class="line">          unless File.exist?(file_to_disk)</span><br><span class="line">            <span class="comment"># 50GB</span></span><br><span class="line">            v.customize [<span class="string">'createhd'</span>, <span class="string">'--filename'</span>, file_to_disk, <span class="string">'--size'</span>, 50 * 1024]</span><br><span class="line">          end</span><br><span class="line">          v.customize [<span class="string">'storageattach'</span>, :id, <span class="string">'--storagectl'</span>, <span class="string">'IDE'</span>, <span class="string">'--port'</span>, 1, <span class="string">'--device'</span>, 0, <span class="string">'--type'</span>, <span class="string">'hdd'</span>, <span class="string">'--medium'</span>, file_to_disk]</span><br><span class="line">        end</span><br><span class="line">      end</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="安装配置iscsi"><a href="#安装配置iscsi" class="headerlink" title="安装配置iscsi"></a>安装配置iscsi</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 iscsi</span></span><br><span class="line">yum install iscsi-initiator-utils -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 InitiatorName 是否正常配置</span></span><br><span class="line">cat /etc/iscsi/initiatorname.iscsi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动查看状态</span></span><br><span class="line">systemctl start iscsid.service</span><br><span class="line">systemctl status iscsid.service</span><br><span class="line"></span><br><span class="line">systemctl start iscsi.service</span><br><span class="line">systemctl status iscsi.service</span><br></pre></td></tr></table></figure><h4 id="安装openebs"><a href="#安装openebs" class="headerlink" title="安装openebs"></a>安装openebs</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">mkdir openebs &amp;&amp; <span class="built_in">cd</span> openebs</span><br><span class="line">wget https://raw.githubusercontent.com/openebs/openebs/v0.6/k8s/openebs-operator.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/openebs/openebs/v0.6/k8s/openebs-storageclasses.yaml</span><br><span class="line">kubectl apply -f openebs-operator.yaml</span><br><span class="line">kubectl apply -f openebs-storageclasses.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 openebs 状态</span></span><br><span class="line">kubectl get pods -n openebs -o wide</span><br><span class="line">kubectl get svc -n openebs</span><br><span class="line">kubectl get crd</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 storage class</span></span><br><span class="line">kubectl get sc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建pvc测试</span></span><br><span class="line">cat &gt;openebs-pvc-test.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line"> name: openebs1</span><br><span class="line">spec:</span><br><span class="line"> storageClassName: openebs-standard</span><br><span class="line"> accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line"> resources:</span><br><span class="line">   requests:</span><br><span class="line">     storage: 5Gi</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f openebs-pvc-test.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pvc</span><br><span class="line">kubectl get pv</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建 nginx pod 挂载测试</span></span><br><span class="line">cat &gt;nginx-pod.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod1</span><br><span class="line">  labels:</span><br><span class="line">    name: nginx-pod1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-pod1</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    ports:</span><br><span class="line">    - name: web</span><br><span class="line">      containerPort: 80</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: openebs1-vol1</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  volumes:</span><br><span class="line">  - name: openebs1-vol1</span><br><span class="line">    persistentVolumeClaim:</span><br><span class="line">      claimName: openebs1</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f nginx-pod.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改文件内容</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -ti nginx-pod1 -- /bin/sh -c <span class="string">'echo Hello World from Openebs!!! &gt; /usr/share/nginx/html/index.html'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">POD_ID=$(kubectl get pods -o wide | grep nginx-pod1 | awk <span class="string">'&#123;print $(NF-1)&#125;'</span>)</span><br><span class="line">curl http://<span class="variable">$POD_ID</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/heketi/heketi/blob/master/docs/admin/install-kubernetes.md" target="_blank" rel="noopener">https://github.com/heketi/heketi/blob/master/docs/admin/install-kubernetes.md</a></li><li><a href="https://github.com/gluster/gluster-kubernetes/blob/master/docs/setup-guide.md" target="_blank" rel="noopener">https://github.com/gluster/gluster-kubernetes/blob/master/docs/setup-guide.md</a></li><li><a href="https://github.com/gluster/gluster-kubernetes/blob/master/docs/examples/hello_world/README.md" target="_blank" rel="noopener">https://github.com/gluster/gluster-kubernetes/blob/master/docs/examples/hello_world/README.md</a></li><li><a href="https://jimmysong.io/kubernetes-handbook/practice/using-heketi-gluster-for-persistent-storage.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/practice/using-heketi-gluster-for-persistent-storage.html</a></li><li><a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/persistent-volumes/</a></li><li><a href="https://docs.openshift.com/enterprise/3.1/architecture/additional_concepts/storage.html#pv-access-modes" target="_blank" rel="noopener">https://docs.openshift.com/enterprise/3.1/architecture/additional_concepts/storage.html#pv-access-modes</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s使用glusterfs实现动态持久化存储</title>
      <link href="/posts/43/"/>
      <url>/posts/43/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文章介绍如何使用glusterfs为k8s提供动态申请pv的功能。glusterfs提供底层存储功能，heketi为glusterfs提供restful风格的api，方便管理glusterfs。支持k8s的pv的3种访问模式<code>ReadWriteOnce，ReadOnlyMany ，ReadWriteMany</code> </p><p>访问模式只是能力描述，并不是强制执行的，对于没有按pvc声明的方式使用pv，存储提供者应该负责访问时的运行错误。例如如果设置pvc的访问模式为<code>ReadOnlyMany</code> ，pod挂载后依然可写，如果需要真正的不可写，申请pvc是需要指定 <code>readOnly: true</code> 参数<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="实验用的Vagrantfile"><a href="#实验用的Vagrantfile" class="headerlink" title="实验用的Vagrantfile"></a>实验用的Vagrantfile</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">    (1..3).each <span class="keyword">do</span> |i|</span><br><span class="line">      config.vm.define <span class="string">"lab#&#123;i&#125;"</span> <span class="keyword">do</span> |node|</span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab#&#123;i&#125;"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"11.11.11.11#&#123;i&#125;"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          inline: <span class="string">"echo hello from node #&#123;i&#125;"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">          v.cpus = 2</span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"lab#&#123;i&#125;"</span>, <span class="string">"--memory"</span>, <span class="string">"3096"</span>]</span><br><span class="line">          file_to_disk = <span class="string">"lab#&#123;i&#125;_vdb.vdi"</span></span><br><span class="line">          unless File.exist?(file_to_disk)</span><br><span class="line">            <span class="comment"># 50GB</span></span><br><span class="line">            v.customize [<span class="string">'createhd'</span>, <span class="string">'--filename'</span>, file_to_disk, <span class="string">'--size'</span>, 50 * 1024]</span><br><span class="line">          end</span><br><span class="line">          v.customize [<span class="string">'storageattach'</span>, :id, <span class="string">'--storagectl'</span>, <span class="string">'IDE'</span>, <span class="string">'--port'</span>, 1, <span class="string">'--device'</span>, 0, <span class="string">'--type'</span>, <span class="string">'hdd'</span>, <span class="string">'--medium'</span>, file_to_disk]</span><br><span class="line">        end</span><br><span class="line">      end</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="环境配置说明"><a href="#环境配置说明" class="headerlink" title="环境配置说明"></a>环境配置说明</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 glusterfs 每节点需要提前加载 dm_thin_pool 模块</span></span><br><span class="line">modprobe dm_thin_pool</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置开启自加载</span></span><br><span class="line">cat &gt;/etc/modules-load.d/glusterfs.conf&lt;&lt;EOF</span><br><span class="line">dm_thin_pool</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 glusterfs-fuse</span></span><br><span class="line">yum install -y glusterfs-fuse</span><br></pre></td></tr></table></figure><h4 id="安装glusterfs与heketi"><a href="#安装glusterfs与heketi" class="headerlink" title="安装glusterfs与heketi"></a>安装glusterfs与heketi</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 heketi client</span></span><br><span class="line"><span class="comment"># https://github.com/heketi/heketi/releases</span></span><br><span class="line"><span class="comment"># 去github下载相关的版本</span></span><br><span class="line">wget https://github.com/heketi/heketi/releases/download/v7.0.0/heketi-client-v7.0.0.linux.amd64.tar.gz</span><br><span class="line">tar xf heketi-client-v7.0.0.linux.amd64.tar.gz</span><br><span class="line">cp heketi-client/bin/heketi-cli /usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">heketi-cli -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如下部署步骤都在如下目录执行</span></span><br><span class="line"><span class="built_in">cd</span> heketi-client/share/heketi/kubernetes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在k8s中部署 glusterfs</span></span><br><span class="line">kubectl create -f glusterfs-daemonset.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 node 节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给提供存储 node 节点打 label</span></span><br><span class="line">kubectl label node lab1 lab2 lab3 storagenode=glusterfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 glusterfs 状态</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署 heketi server </span></span><br><span class="line"><span class="comment"># 配置 heketi server 的权限</span></span><br><span class="line">kubectl create -f heketi-service-account.json</span><br><span class="line">kubectl create clusterrolebinding heketi-gluster-admin --clusterrole=edit --serviceaccount=default:heketi-service-account</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 cofig secret</span></span><br><span class="line">kubectl create secret generic heketi-config-secret --from-file=./heketi.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化部署</span></span><br><span class="line">kubectl create -f heketi-bootstrap.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 heketi bootstrap 状态</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置端口转发 heketi server</span></span><br><span class="line">HEKETI_BOOTSTRAP_POD=$(kubectl get pods | grep deploy-heketi | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">kubectl port-forward <span class="variable">$HEKETI_BOOTSTRAP_POD</span> 58080:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试访问</span></span><br><span class="line"><span class="comment"># 另起一终端</span></span><br><span class="line">curl http://localhost:58080/hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 glusterfs</span></span><br><span class="line"><span class="comment"># hostnames/manage 字段里必须和 kubectl get node 一致</span></span><br><span class="line"><span class="comment"># hostnames/storage 指定存储网络 ip 本次实验使用与k8s集群同一个ip</span></span><br><span class="line">cat &gt;topology.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"clusters"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"nodes"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"node"</span>: &#123;</span><br><span class="line">            <span class="string">"hostnames"</span>: &#123;</span><br><span class="line">              <span class="string">"manage"</span>: [</span><br><span class="line">                <span class="string">"lab1"</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"storage"</span>: [</span><br><span class="line">                <span class="string">"11.11.11.111"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"zone"</span>: 1</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"devices"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">"name"</span>: <span class="string">"/dev/sdb"</span>,</span><br><span class="line">              <span class="string">"destroydata"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"node"</span>: &#123;</span><br><span class="line">            <span class="string">"hostnames"</span>: &#123;</span><br><span class="line">              <span class="string">"manage"</span>: [</span><br><span class="line">                <span class="string">"lab2"</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"storage"</span>: [</span><br><span class="line">                <span class="string">"11.11.11.112"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"zone"</span>: 1</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"devices"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">"name"</span>: <span class="string">"/dev/sdb"</span>,</span><br><span class="line">              <span class="string">"destroydata"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"node"</span>: &#123;</span><br><span class="line">            <span class="string">"hostnames"</span>: &#123;</span><br><span class="line">              <span class="string">"manage"</span>: [</span><br><span class="line">                <span class="string">"lab3"</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"storage"</span>: [</span><br><span class="line">                <span class="string">"11.11.11.113"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"zone"</span>: 1</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"devices"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">"name"</span>: <span class="string">"/dev/sdb"</span>,</span><br><span class="line">              <span class="string">"destroydata"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">export</span> HEKETI_CLI_SERVER=http://localhost:58080</span><br><span class="line">heketi-cli topology load --json=topology.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Heketi 创建一个用于存储 Heketi 数据库的 volume</span></span><br><span class="line">heketi-cli setup-openshift-heketi-storage</span><br><span class="line">kubectl create -f heketi-storage.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line"><span class="comment"># 等所有job完成 即状态为 Completed</span></span><br><span class="line"><span class="comment"># 才能进行如下的步骤</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get job</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除部署时产生的相关资源</span></span><br><span class="line">kubectl delete all,service,<span class="built_in">jobs</span>,deployment,secret --selector=<span class="string">"deploy-heketi"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署 heketi server</span></span><br><span class="line">kubectl create -f heketi-deployment.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 heketi server 状态</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 heketi 状态信息</span></span><br><span class="line"><span class="comment"># 配置端口转发 heketi server</span></span><br><span class="line">HEKETI_BOOTSTRAP_POD=$(kubectl get pods | grep heketi | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">kubectl port-forward <span class="variable">$HEKETI_BOOTSTRAP_POD</span> 58080:8080</span><br><span class="line"><span class="built_in">export</span> HEKETI_CLI_SERVER=http://localhost:58080</span><br><span class="line">heketi-cli cluster list</span><br><span class="line">heketi-cli volume list</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 StorageClass</span></span><br><span class="line"><span class="comment"># 由于没有开启认证</span></span><br><span class="line"><span class="comment"># restuser restuserkey 可以随意写</span></span><br><span class="line">HEKETI_SERVER=$(kubectl get svc | grep heketi | head -1 | awk <span class="string">'&#123;print $3&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$HEKETI_SERVER</span></span><br><span class="line">cat &gt;storageclass-glusterfs.yaml&lt;&lt;EOF</span><br><span class="line">kind: StorageClass</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: gluster-heketi</span><br><span class="line">provisioner: kubernetes.io/glusterfs</span><br><span class="line">parameters:</span><br><span class="line">  resturl: <span class="string">"http://<span class="variable">$HEKETI_SERVER</span>:8080"</span></span><br><span class="line">  restauthenabled: <span class="string">"false"</span></span><br><span class="line">  restuser: <span class="string">"will"</span></span><br><span class="line">  restuserkey: <span class="string">"will"</span></span><br><span class="line">  gidMin: <span class="string">"40000"</span></span><br><span class="line">  gidMax: <span class="string">"50000"</span></span><br><span class="line">  volumetype: <span class="string">"replicate:3"</span></span><br><span class="line">EOF</span><br><span class="line">kubectl create -f storageclass-glusterfs.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get sc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建pvc测试</span></span><br><span class="line">cat &gt;gluster-pvc-test.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line"> name: gluster1</span><br><span class="line"> annotations:</span><br><span class="line">   volume.beta.kubernetes.io/storage-class: gluster-heketi</span><br><span class="line">spec:</span><br><span class="line"> accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line"> resources:</span><br><span class="line">   requests:</span><br><span class="line">     storage: 5Gi</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f gluster-pvc-test.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pvc</span><br><span class="line">kubectl get pv</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建 nginx pod 挂载测试</span></span><br><span class="line">cat &gt;nginx-pod.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod1</span><br><span class="line">  labels:</span><br><span class="line">    name: nginx-pod1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-pod1</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    ports:</span><br><span class="line">    - name: web</span><br><span class="line">      containerPort: 80</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: gluster-vol1</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  volumes:</span><br><span class="line">  - name: gluster-vol1</span><br><span class="line">    persistentVolumeClaim:</span><br><span class="line">      claimName: gluster1</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f nginx-pod.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改文件内容</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -ti nginx-pod1 -- /bin/sh -c <span class="string">'echo Hello World from GlusterFS!!! &gt; /usr/share/nginx/html/index.html'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">POD_ID=$(kubectl get pods -o wide | grep nginx-pod1 | awk <span class="string">'&#123;print $(NF-1)&#125;'</span>)</span><br><span class="line">curl http://<span class="variable">$POD_ID</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># node 节点查看文件内容</span></span><br><span class="line">GLUSTERFS_POD=$(kubectl get pod | grep glusterfs | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -ti <span class="variable">$GLUSTERFS_POD</span> /bin/sh</span><br><span class="line">mount | grep heketi</span><br><span class="line">cat /var/lib/heketi/mounts/vg_56033aa8a9131e84faa61a6f4774d8c3/brick_1ac5f3a0730457cf3fcec6d881e132a2/brick/index.html</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/heketi/heketi/blob/master/docs/admin/install-kubernetes.md" target="_blank" rel="noopener">https://github.com/heketi/heketi/blob/master/docs/admin/install-kubernetes.md</a></li><li><a href="https://github.com/gluster/gluster-kubernetes/blob/master/docs/setup-guide.md" target="_blank" rel="noopener">https://github.com/gluster/gluster-kubernetes/blob/master/docs/setup-guide.md</a></li><li><a href="https://github.com/gluster/gluster-kubernetes/blob/master/docs/examples/hello_world/README.md" target="_blank" rel="noopener">https://github.com/gluster/gluster-kubernetes/blob/master/docs/examples/hello_world/README.md</a></li><li><a href="https://jimmysong.io/kubernetes-handbook/practice/using-heketi-gluster-for-persistent-storage.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/practice/using-heketi-gluster-for-persistent-storage.html</a></li><li><a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/persistent-volumes/</a></li><li><a href="https://docs.openshift.com/enterprise/3.1/architecture/additional_concepts/storage.html#pv-access-modes" target="_blank" rel="noopener">https://docs.openshift.com/enterprise/3.1/architecture/additional_concepts/storage.html#pv-access-modes</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s全栈监控</title>
      <link href="/posts/42/"/>
      <url>/posts/42/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="整体概括"><a href="#整体概括" class="headerlink" title="整体概括"></a>整体概括</h4><p>本文章主要介绍如何全面监控k8s</p><ul><li>使用metric-server收集数据给k8s集群内使用，如kubectl,hpa,scheduler等</li><li>使用prometheus-operator部署prometheus，存储监控数据</li><li>使用kube-state-metrics收集k8s集群内资源对象数据</li><li>使用node_exporter收集集群中各节点的数据</li><li>使用prometheus收集apiserver，scheduler，controller-manager，kubelet组件数据</li><li>使用alertmanager实现监控报警</li><li>使用grafana实现数据可视化<a id="more"></a></li></ul><h4 id="prometheus-operator简介"><a href="#prometheus-operator简介" class="headerlink" title="prometheus-operator简介"></a>prometheus-operator简介</h4><p>prometheus-operator是一个整合prometheus和operator的项目，prometheus是一个集数据收集存储，数据查询，数据图表显示于一身的开源监控组件。operator是由coreos开源一套在k8s上管理应用的软件，通过operator可以方便的实现部署，扩容，删除应用等功能。</p><p>prometheus-operator利用k8s的CustomResourceDefinitions功能实现了只需要像写原生kubectl支持的yaml文件一样，轻松收集应用数据，配置报警规则等，包含如下CRDs ：</p><ul><li>Prometheus 用于部署Prometheus 实例</li><li>ServiceMonitor 用于配置数据收集，创建之后会根据DNS自动发现并收集数据</li><li>PrometheusRule 用于配置Prometheus 规则，处理规整数据和配置报警规则</li><li>Alertmanager 用于部署报警实例</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h4><blockquote><p>收集kube-controller-manager，kube-scheduler数据，需要配置组件监听0.0.0.0地址</p></blockquote><p>二进制安装启动时添加如下参数 –address=0.0.0.0</p><p>如果使用kubeadm启动的集群，初始化时加入如下参数<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  address: 0.0.0.0</span><br><span class="line">schedulerExtraArgs:</span><br><span class="line">  address: 0.0.0.0</span><br></pre></td></tr></table></figure></p><p>如果是已经启动之后的集群，可以使用如下命令修改<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -e <span class="string">"s/- --address=127.0.0.1/- --address=0.0.0.0/"</span> -i /etc/kubernetes/manifests/kube-controller-manager.yaml</span><br><span class="line">sed -e <span class="string">"s/- --address=127.0.0.1/- --address=0.0.0.0/"</span> -i /etc/kubernetes/manifests/kube-scheduler.yaml</span><br></pre></td></tr></table></figure></p><blockquote><p>收集kubelet相关数据时需要配置kubelet使用如下认证方式。使用kubeadm默认情况下已经开启</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--authentication-token-webhook=<span class="literal">true</span></span><br><span class="line">--authorization-mode=Webhook</span><br></pre></td></tr></table></figure><h4 id="部署metric-server"><a href="#部署metric-server" class="headerlink" title="部署metric-server"></a>部署metric-server</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">mkdir k8s-monitor &amp;&amp; <span class="built_in">cd</span> k8s-monitor</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/kubernetes-incubator/metrics-server.git</span><br><span class="line"><span class="built_in">cd</span> metrics-server &amp;&amp; git checkout v0.2.1 &amp;&amp; <span class="built_in">cd</span> ../</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置（当前版本有bug）</span></span><br><span class="line">sed -ri <span class="string">'s@gcr.io/google_containers/metrics-server-amd64:(.*)@mirrorgooglecontainers/metrics-server-amd64:\1@g'</span> metrics-server/deploy/1.8+/metrics-server-deployment.yaml</span><br><span class="line">sed -ri <span class="string">'s@--source=kubernetes.summary_api:.*@--source=kubernetes.summary_api:https://kubernetes.default?kubeletHttps=true\&amp;kubeletPort=10250\&amp;insecure=true@'</span> metrics-server/deploy/1.8+/metrics-server-deployment.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl create -f metrics-server/deploy/1.8+/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试获取数据</span></span><br><span class="line"><span class="comment"># 由于采集数据间隔为1分钟</span></span><br><span class="line"><span class="comment"># 等待数分钟后查看数据</span></span><br><span class="line">NODE=$(kubectl get nodes | grep <span class="string">'Ready'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">METRIC_SERVER_POD=$(kubectl get pods -n kube-system | grep <span class="string">'metrics-server'</span> | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes</span><br><span class="line">kubectl get --raw /apis/metrics.k8s.io/v1beta1/pods</span><br><span class="line">kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes/<span class="variable">$NODE</span></span><br><span class="line"></span><br><span class="line">kubectl top node <span class="variable">$NODE</span></span><br><span class="line">kubectl top pod <span class="variable">$METRIC_SERVER_POD</span> -n kube-system</span><br></pre></td></tr></table></figure><h4 id="下载相关部署文件"><a href="#下载相关部署文件" class="headerlink" title="下载相关部署文件"></a>下载相关部署文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mgxian/k8s-monitor.git</span><br><span class="line"><span class="built_in">cd</span> k8s-monitor</span><br></pre></td></tr></table></figure><h4 id="部署prometheus-operator"><a href="#部署prometheus-operator" class="headerlink" title="部署prometheus-operator"></a>部署prometheus-operator</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 namespace</span></span><br><span class="line">kubectl apply -f monitoring-namespace.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f prometheus-operator.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl get svc -n monitoring</span><br><span class="line">kubectl get crd</span><br></pre></td></tr></table></figure><h4 id="部署k8s组件服务"><a href="#部署k8s组件服务" class="headerlink" title="部署k8s组件服务"></a>部署k8s组件服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f kube-k8s-service.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure><h4 id="部署node-exporter"><a href="#部署node-exporter" class="headerlink" title="部署node_exporter"></a>部署node_exporter</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f node_exporter.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl get svc -n monitoring</span><br></pre></td></tr></table></figure><h4 id="部署kube-state-metrics"><a href="#部署kube-state-metrics" class="headerlink" title="部署kube-state-metrics"></a>部署kube-state-metrics</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f kube-state-metrics.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl get svc -n monitoring</span><br></pre></td></tr></table></figure><h4 id="部署prometheus"><a href="#部署prometheus" class="headerlink" title="部署prometheus"></a>部署prometheus</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f prometheus.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl get svc -n monitoring</span><br></pre></td></tr></table></figure><h4 id="配置数据收集"><a href="#配置数据收集" class="headerlink" title="配置数据收集"></a>配置数据收集</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f kube-servicemonitor.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get servicemonitors -n monitoring</span><br></pre></td></tr></table></figure><h4 id="查看prometheus中的数据"><a href="#查看prometheus中的数据" class="headerlink" title="查看prometheus中的数据"></a>查看prometheus中的数据</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 nodeport</span></span><br><span class="line">kubectl get svc -n monitoring | grep prometheus-k8s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取访问链接</span></span><br><span class="line"><span class="comment"># 11.11.11.111 为其中一个node ip</span></span><br><span class="line">NODE_IP=<span class="string">'11.11.11.112'</span></span><br><span class="line">PROMETHEUS_NODEPORT=$(kubectl get svc -n monitoring | grep prometheus-k8s | awk <span class="string">'&#123;print $(NF-1)&#125;'</span> | cut -d <span class="string">':'</span> -f 2 | cut -d <span class="string">'/'</span> -f 1)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$NODE_IP</span>:<span class="variable">$PROMETHEUS_NODEPORT</span>/"</span></span><br></pre></td></tr></table></figure><blockquote><p> prometheus主页</p></blockquote><p><img src="/posts/42/k8s-monitor-prometheus-1.png" alt=""></p><blockquote><p>生成图表<br>container_network_receive_bytes_total{namespace=”monitoring”, name=~”.<em>prometheus.</em>“}</p></blockquote><p><img src="/posts/42/k8s-monitor-prometheus-2.png" alt=""></p><blockquote><p>查看收集数据的端点</p></blockquote><p><img src="/posts/42/k8s-monitor-prometheus-3.png" alt=""></p><blockquote><p>查看数据收集服务发现</p></blockquote><p><img src="/posts/42/k8s-monitor-prometheus-4.png" alt=""></p><h4 id="部署grafana"><a href="#部署grafana" class="headerlink" title="部署grafana"></a>部署grafana</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f grafana.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl get svc -n monitoring</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 nodeport</span></span><br><span class="line">kubectl get svc -n monitoring | grep grafana</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取访问链接</span></span><br><span class="line"><span class="comment"># 11.11.11.111 为其中一个node ip</span></span><br><span class="line">NODE_IP=<span class="string">'11.11.11.112'</span></span><br><span class="line">GRAFANA_NODEPORT=$(kubectl get svc -n monitoring | grep grafana | awk <span class="string">'&#123;print $(NF-1)&#125;'</span> | cut -d <span class="string">':'</span> -f 2 | cut -d <span class="string">'/'</span> -f 1)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$NODE_IP</span>:<span class="variable">$GRAFANA_NODEPORT</span>/"</span></span><br></pre></td></tr></table></figure><h4 id="部署alertmanager"><a href="#部署alertmanager" class="headerlink" title="部署alertmanager"></a>部署alertmanager</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f alertmanager.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl get svc -n monitoring</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 nodeport</span></span><br><span class="line">kubectl get svc -n monitoring | grep alertmanager-main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取访问链接</span></span><br><span class="line"><span class="comment"># 11.11.11.111 为其中一个node ip</span></span><br><span class="line">NODE_IP=<span class="string">'11.11.11.112'</span></span><br><span class="line">ALERTMANAGER_MAIN_NODEPORT=$(kubectl get svc -n monitoring | grep alertmanager-main | awk <span class="string">'&#123;print $(NF-1)&#125;'</span> | cut -d <span class="string">':'</span> -f 2 | cut -d <span class="string">'/'</span> -f 1)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$NODE_IP</span>:<span class="variable">$ALERTMANAGER_MAIN_NODEPORT</span>/"</span></span><br></pre></td></tr></table></figure><h4 id="查看图表"><a href="#查看图表" class="headerlink" title="查看图表"></a>查看图表</h4><blockquote><p>集群状态</p></blockquote><p><img src="/posts/42/k8s-monitor-grafana-1.png" alt=""></p><blockquote><p>集群状态以命名空间视角</p></blockquote><p><img src="/posts/42/k8s-monitor-grafana-2.png" alt=""></p><blockquote><p>POD状态</p></blockquote><p><img src="/posts/42/k8s-monitor-grafana-3.png" alt=""></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/coreos/prometheus-operator" target="_blank" rel="noopener">https://github.com/coreos/prometheus-operator</a></li><li><a href="https://github.com/coreos/prometheus-operator/blob/master/Documentation/user-guides/cluster-monitoring.md" target="_blank" rel="noopener">https://github.com/coreos/prometheus-operator/blob/master/Documentation/user-guides/cluster-monitoring.md</a></li><li><a href="https://github.com/coreos/prometheus-operator/tree/master/contrib/kube-prometheus" target="_blank" rel="noopener">https://github.com/coreos/prometheus-operator/tree/master/contrib/kube-prometheus</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> monitor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重构手法</title>
      <link href="/posts/41/"/>
      <url>/posts/41/</url>
      
        <content type="html"><![CDATA[<p>重构 改善既有代码的设计<br><a id="more"></a><br><img src="/posts/41/重构手法.png" alt="重构手法"></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>helm安装配置</title>
      <link href="/posts/40/"/>
      <url>/posts/40/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>helm是kubernetes的包管理工具，用于简化部署和管理 Kubernetes 应用。用来管理charts——预先配置好的安装包资源。<br><a id="more"></a><br>Helm和charts的主要作用：</p><ul><li>应用程序封装</li><li>版本管理</li><li>依赖检查</li><li>便于应用程序分发</li></ul><p>helm是一个C/S框架的软件，helm相当于一个客户端，tiller是一个服务端</p><ul><li>Helm CLI 是 Helm 客户端，可以在本地执行</li><li>Tiller 是服务器端组件，在 Kubernetes 群集上运行，并管理 Kubernetes 应用程序的生命周期</li><li>Repository 是 Chart 仓库，Helm客户端通过HTTP协议来访问仓库中Chart的索引文件和压缩包</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>安装之前需要先配置好<code>kubeconfig</code>，<code>kubectl</code>可以正常使用就表示<code>kubeconfig</code>已经配置正确，也可以通过环境变量<code>KUBECONFIG</code>指定helm使用的<code>kubeconfig</code></p></blockquote><h4 id="安装helm"><a href="#安装helm" class="headerlink" title="安装helm"></a>安装helm</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如下地址下载helm二进制文件 </span></span><br><span class="line"><span class="comment"># 解压之后放在自己的PATH路径下</span></span><br><span class="line"><span class="comment"># https://github.com/helm/helm/releases</span></span><br><span class="line">mkdir -pv helm &amp;&amp; <span class="built_in">cd</span> helm</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-helm/helm-v2.9.1-linux-amd64.tar.gz</span><br><span class="line">tar xf helm-v2.9.1-linux-amd64.tar.gz</span><br><span class="line">sudo mv linux-amd64/helm /usr/<span class="built_in">local</span>/bin</span><br><span class="line">rm -rf linux-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本，不显示出server版本，因为还没有安装server</span></span><br><span class="line">helm version</span><br></pre></td></tr></table></figure><h4 id="简单安装tiller-本次实验采用"><a href="#简单安装tiller-本次实验采用" class="headerlink" title="简单安装tiller(本次实验采用)"></a>简单安装tiller(本次实验采用)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署 tiller</span></span><br><span class="line">helm init --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.9.1 \</span><br><span class="line">--stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system -l app=helm</span><br><span class="line">kubectl get svc -n kube-system -l app=helm</span><br></pre></td></tr></table></figure><h4 id="安全性更高的安装tiller-tls"><a href="#安全性更高的安装tiller-tls" class="headerlink" title="安全性更高的安装tiller(tls)"></a>安全性更高的安装tiller(tls)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">helm init --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.9.1 \</span><br><span class="line">--stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts \</span><br><span class="line">--tiller-tls \</span><br><span class="line">--tiller-tls-verify \</span><br><span class="line">--tiller-tls-cert=cert.pem \</span><br><span class="line">--tiller-tls-key=key.pem \</span><br><span class="line">--tls-ca-cert=ca.pem \</span><br><span class="line">--service-account=tiller</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他命令都需要使用 tls</span></span><br><span class="line"><span class="comment"># --tls</span></span><br></pre></td></tr></table></figure><h4 id="配置rbac"><a href="#配置rbac" class="headerlink" title="配置rbac"></a>配置rbac</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;helm-rbac-config.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: tiller</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: tiller</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: tiller</span><br><span class="line">    namespace: kube-system</span><br><span class="line">EOF</span><br><span class="line">kubectl create -f helm-rbac-config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置tiller使用创建的ServiceAccount</span></span><br><span class="line">kubectl patch deploy --namespace kube-system tiller-deploy -p <span class="string">'&#123;"spec":&#123;"template":&#123;"spec":&#123;"serviceAccount":"tiller"&#125;&#125;&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看pod启动情况</span></span><br><span class="line">kubectl get pod -n kube-system -l app=helm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看版本，显示出server版本</span></span><br><span class="line">helm version</span><br></pre></td></tr></table></figure><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><h4 id="查看可用charts"><a href="#查看可用charts" class="headerlink" title="查看可用charts"></a>查看可用charts</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新charts列表</span></span><br><span class="line">helm repo update </span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索可用charts</span></span><br><span class="line">helm search</span><br><span class="line">helm search mysql</span><br></pre></td></tr></table></figure><h4 id="查看已经安装的charts"><a href="#查看已经安装的charts" class="headerlink" title="查看已经安装的charts"></a>查看已经安装的charts</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm list</span><br><span class="line"><span class="comment"># helm ls</span></span><br></pre></td></tr></table></figure><h4 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h4><blockquote><p>以下两种部署方式任选一种</p></blockquote><h5 id="使用命令行模式部署"><a href="#使用命令行模式部署" class="headerlink" title="使用命令行模式部署"></a>使用命令行模式部署</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用命令行模式部署</span></span><br><span class="line">helm install -n mariadb-test \</span><br><span class="line">--<span class="built_in">set</span> persistence.enabled=<span class="literal">false</span>,mariadbRootPassword=will,mariadbUser=will,mariadbPassword=will,mariadbDatabase=will \</span><br><span class="line">stable/mariadb</span><br></pre></td></tr></table></figure><h5 id="使用配置文件定制部署"><a href="#使用配置文件定制部署" class="headerlink" title="使用配置文件定制部署"></a>使用配置文件定制部署</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用配置文件方式部署</span></span><br><span class="line"><span class="comment"># 查看可配置项</span></span><br><span class="line">helm inspect values stable/mariadb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有可配置项（去行空行和注释）</span></span><br><span class="line">helm inspect values stable/mariadb | egrep -v <span class="string">'^\s*#|^$'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cat &gt;config.yml&lt;&lt;EOF</span><br><span class="line">usePassword: <span class="literal">true</span></span><br><span class="line">mariadbRootPassword: will</span><br><span class="line">mariadbUser: will</span><br><span class="line">mariadbPassword: will</span><br><span class="line">mariadbDatabase: will</span><br><span class="line">persistence:</span><br><span class="line">  enabled: <span class="literal">false</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">helm install -n mariadb-test -f config.yml stable/mariadb</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">helm ls</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接测试</span></span><br><span class="line">kubectl run mariadb-cli --image=bitnami/mariadb:10.1.28-r1 -i --tty bash</span><br><span class="line">mysql -hmariadb-test-mariadb -uwill -pwill will</span><br><span class="line">show databases;</span><br><span class="line">select version();</span><br><span class="line">select user();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 mariadb-cli</span></span><br><span class="line">kubectl delete deploy mariadb-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除部署</span></span><br><span class="line">helm delete mariadb-test --purge</span><br></pre></td></tr></table></figure><h3 id="自定义chart"><a href="#自定义chart" class="headerlink" title="自定义chart"></a>自定义chart</h3><h4 id="创建chart"><a href="#创建chart" class="headerlink" title="创建chart"></a>创建chart</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">helm create hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># chart目录结构介绍</span></span><br><span class="line">hello</span><br><span class="line">├── charts <span class="comment"># 本chart依赖的chart</span></span><br><span class="line">├── Chart.yaml <span class="comment"># 描述chart的基本信息，如名称版本等</span></span><br><span class="line">├── templates <span class="comment"># kubernetes manifest文件模板目录</span></span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── ingress.yaml</span><br><span class="line">│   ├── NOTES.txt <span class="comment"># 纯文本文件，可在其中填写chart的使用说明</span></span><br><span class="line">│   └── service.yaml</span><br><span class="line">└── values.yaml <span class="comment"># chart配置的默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对chart的模板和配置进行测试</span></span><br><span class="line">helm install --dry-run --debug ./</span><br></pre></td></tr></table></figure><h4 id="测试安装chart"><a href="#测试安装chart" class="headerlink" title="测试安装chart"></a>测试安装chart</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">helm install -n hello-test ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">helm ls</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口转发</span></span><br><span class="line"><span class="built_in">export</span> POD_NAME=$(kubectl get pods --namespace default -l <span class="string">"app=hello,release=hello-test"</span> -o jsonpath=<span class="string">"&#123;.items[0].metadata.name&#125;"</span>)</span><br><span class="line">kubectl port-forward <span class="variable">$POD_NAME</span> 8080:80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">curl http://127.0.0.1:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">helm delete hello-test --purge</span><br></pre></td></tr></table></figure><h4 id="chart分发"><a href="#chart分发" class="headerlink" title="chart分发"></a>chart分发</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包为压缩包</span></span><br><span class="line">helm package ./</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://blog.frognew.com/2017/12/its-time-to-use-helm.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/12/its-time-to-use-helm.html</a></li><li><a href="https://jimmysong.io/posts/manage-kubernetes-native-app-with-helm/" target="_blank" rel="noopener">https://jimmysong.io/posts/manage-kubernetes-native-app-with-helm/</a></li><li><a href="https://yq.aliyun.com/articles/159601" target="_blank" rel="noopener">https://yq.aliyun.com/articles/159601</a></li><li><a href="https://docs.helm.sh/" target="_blank" rel="noopener">https://docs.helm.sh/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> helm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio-1.0安装测试</title>
      <link href="/posts/39/"/>
      <url>/posts/39/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>istio</code>是一个<code>service mesh</code>开源实现，由Google/IBM/Lyft共同开发。架构图如下：</p><p><img src="/posts/39/istio-arch.png" alt="istio-arch"><br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装k8s集群"><a href="#安装k8s集群" class="headerlink" title="安装k8s集群"></a>安装k8s集群</h4><p><a href="/posts/32/">参考文章</a></p><h4 id="安装istioctl"><a href="#安装istioctl" class="headerlink" title="安装istioctl"></a>安装<code>istioctl</code></h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次实验时使用 vagrant 用户登录 具有 sudo 权限</span></span><br><span class="line"><span class="comment"># vagrant 用户配置了连接管理 k8s 集群</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去下面的地址下载压缩包</span></span><br><span class="line"><span class="comment"># https://github.com/istio/istio/releases</span></span><br><span class="line">wget https://github.com/istio/istio/releases/download/1.0.0/istio-1.0.0-linux.tar.gz</span><br><span class="line">tar xf istio-1.0.0-linux.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装配置环境变量</span></span><br><span class="line">sudo mv istio-1.0.0 /usr/<span class="built_in">local</span>/</span><br><span class="line">sudo ln -sv /usr/<span class="built_in">local</span>/istio-1.0.0 /usr/<span class="built_in">local</span>/istio</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=/usr/local/istio/bin:$PATH'</span> | sudo tee /etc/profile.d/istio.sh</span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/istio.sh</span><br><span class="line">istioctl version</span><br></pre></td></tr></table></figure><h4 id="在k8s集群中安装istio"><a href="#在k8s集群中安装istio" class="headerlink" title="在k8s集群中安装istio"></a>在k8s集群中安装istio</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果环境不是云环境，不支持LoadBalancer</span></span><br><span class="line"><span class="comment"># 作如下修改，使得 ingressgateway 监听在80和443端口</span></span><br><span class="line"><span class="comment"># 修改使用主机端口映射</span></span><br><span class="line"><span class="comment"># 使用此修改版本之后，每台机器只能运行单个实例</span></span><br><span class="line"><span class="comment"># 大概在3027行左右</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line">sudo cp install/kubernetes/istio-demo.yaml install/kubernetes/istio-demo.yaml.ori</span><br><span class="line">sudo vim install/kubernetes/istio-demo.yaml</span><br><span class="line">...</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line"><span class="comment"># kind: Deployment</span></span><br><span class="line"><span class="comment"># 使用DaemonSet部署方式</span></span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: istio-ingressgateway</span><br><span class="line">  namespace: istio-system</span><br><span class="line">  labels:</span><br><span class="line">    app: ingressgateway</span><br><span class="line">    chart: gateways-1.0.0</span><br><span class="line">    release: RELEASE-NAME</span><br><span class="line">    heritage: Tiller</span><br><span class="line">    app: istio-ingressgateway</span><br><span class="line">    istio: ingressgateway</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># DaemonSet不支持replicas</span></span><br><span class="line">  <span class="comment"># replicas: 1</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: istio-ingressgateway</span><br><span class="line">        istio: ingressgateway</span><br><span class="line">      annotations:</span><br><span class="line">        sidecar.istio.io/inject: <span class="string">"false"</span></span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">""</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: istio-ingressgateway-service-account</span><br><span class="line">      containers:</span><br><span class="line">        - name: ingressgateway</span><br><span class="line">          image: <span class="string">"gcr.io/istio-release/proxyv2:1.0.0"</span></span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">              <span class="comment"># 主机80端口映射</span></span><br><span class="line">              hostPort: 80</span><br><span class="line">            - containerPort: 443</span><br><span class="line">              <span class="comment"># 主机443端口映射</span></span><br><span class="line">              hostPort: 443</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换镜像地址</span></span><br><span class="line">sudo sed -i <span class="string">'s@gcr.io/istio-release@docker.io/istio@g'</span> install/kubernetes/istio-demo.yaml</span><br><span class="line">sudo sed -i <span class="string">'s@quay.io/coreos/hyperkube:v1.7.6_coreos.0@registry.cn-shanghai.aliyuncs.com/gcr-k8s/hyperkube:v1.7.6_coreos.0@g'</span> install/kubernetes/istio-demo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像地址</span></span><br><span class="line">grep <span class="string">'image:'</span> install/kubernetes/istio-demo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 CRDs</span></span><br><span class="line"><span class="comment"># 等待数秒</span></span><br><span class="line">kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml -n istio-system</span><br><span class="line">kubectl get crd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装不使用认证（不使用tls）</span></span><br><span class="line"><span class="comment"># 如果机器内存过小会无法成功启动</span></span><br><span class="line"><span class="comment"># 实验使用3台虚拟机每台3G内存</span></span><br><span class="line">kubectl apply -f install/kubernetes/istio-demo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get svc -n istio-system</span><br><span class="line">kubectl get pods -n istio-system</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p><code>istio-1.0.0</code> 默认已经开启了自动注入功能以及其他日志监控和追踪的相关组件如</p><ul><li>istio-tracing</li><li>istio-telemetry</li><li>grafana</li><li>prometheus</li><li>servicegraph</li></ul></blockquote><h3 id="启用自动注入-sidecar"><a href="#启用自动注入-sidecar" class="headerlink" title="启用自动注入 sidecar"></a>启用自动注入 sidecar</h3><ul><li><p>不开启自动注入部署应用需要使用如下方式的命令<br><code>kubectl apply -f &lt;(istioctl kube-inject -f samples/bookinfo/kube/bookinfo.yaml)</code></p></li><li><p>开启自动注入后，使用正常命令即可部署应用<br><code>kubectl apply -f samples/bookinfo/kube/bookinfo.yaml</code></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># istio-1.0.0 默认已经开启了自动注入功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s 1.9 及之后的版本才能使用自动注入功能</span></span><br><span class="line"><span class="comment"># 查看是否支持</span></span><br><span class="line">kubectl api-versions | grep admissionregistration</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除了要满足以上条件外还需要检查kube-apiserver启动的参数</span></span><br><span class="line"><span class="comment"># k8s 1.9 版本要确保 --admission-control 里有 MutatingAdmissionWebhook,ValidatingAdmissionWebhook</span></span><br><span class="line"><span class="comment"># k8s 1.9 之后的版本要确保 --enable-admission-plugins 里有MutatingAdmissionWebhook,ValidatingAdmissionWebhook</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试自动注入</span></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f samples/sleep/sleep.yaml </span><br><span class="line">kubectl get deployment -o wide</span><br><span class="line">kubectl get pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 default namespace 开启自动注入</span></span><br><span class="line">kubectl label namespace default istio-injection=enabled</span><br><span class="line">kubectl get namespace -L istio-injection</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除创建的pod，等待重建</span></span><br><span class="line">kubectl delete pod $(kubectl get pod | grep sleep | cut -d <span class="string">' '</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看重建后的pod</span></span><br><span class="line"><span class="comment"># 查看是否有istio-proxy容器</span></span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl describe pod $(kubectl get pod | grep sleep | cut -d <span class="string">' '</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f samples/sleep/sleep.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭自动注入</span></span><br><span class="line">kubectl label namespace default istio-injection-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭部分pod的自动注入功能</span></span><br><span class="line">...</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      annotations:</span><br><span class="line">        sidecar.istio.io/inject: <span class="string">"false"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="部署官方测试用例"><a href="#部署官方测试用例" class="headerlink" title="部署官方测试用例"></a>部署官方测试用例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># default开启自动注入</span></span><br><span class="line">kubectl label namespace default istio-injection=enabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署 bookinfo</span></span><br><span class="line">kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 gateway</span></span><br><span class="line">kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get services</span><br><span class="line">kubectl get pods</span><br><span class="line">istioctl get gateway</span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行访问测试</span></span><br><span class="line"><span class="built_in">export</span> INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=<span class="string">'&#123;.spec.ports[?(@.name=="http2")].nodePort&#125;'</span>)</span><br><span class="line">NODE_NAME=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">NODE_IP=$(ping -c 1 <span class="variable">$NODE_NAME</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">export</span> GATEWAY_URL=<span class="variable">$NODE_IP</span>:<span class="variable">$INGRESS_PORT</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$GATEWAY_URL</span></span><br><span class="line"></span><br><span class="line">curl -o /dev/null -s -w <span class="string">"%&#123;http_code&#125;\n"</span> http://<span class="variable">$&#123;GATEWAY_URL&#125;</span>/productpage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问测试</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$&#123;GATEWAY_URL&#125;</span>/productpage"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用daemonset方式部署可以使用如下方式访问</span></span><br><span class="line"><span class="comment"># 11.11.11.112为其中一个node节点的ip</span></span><br><span class="line">curl http://11.11.11.112/productpage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">samples/bookinfo/platform/kube/cleanup.sh</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理istio</span></span><br><span class="line">kubectl delete -f install/kubernetes/helm/istio/templates/crds.yaml -n istio-system</span><br><span class="line">kubectl delete -f install/kubernetes/istio-demo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl delete -f install/kubernetes/istio-demo-auth.yaml</span></span><br></pre></td></tr></table></figure><h3 id="使用helm安装istio"><a href="#使用helm安装istio" class="headerlink" title="使用helm安装istio"></a>使用helm安装istio</h3><h4 id="安装helm"><a href="#安装helm" class="headerlink" title="安装helm"></a>安装helm</h4><p><a href="/posts/40/">参考文章</a></p><h4 id="安装istio"><a href="#安装istio" class="headerlink" title="安装istio"></a>安装istio</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line">egrep -v <span class="string">"^$|#"</span> install/kubernetes/helm/istio/values.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 CRDs</span></span><br><span class="line">kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml</span><br><span class="line">kubectl get crd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据上面查看的配置和需求配置相关参数</span></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">helm install install/kubernetes/helm/istio --name istio --namespace istio-system \</span><br><span class="line">--<span class="built_in">set</span> ingress.enabled=<span class="literal">false</span> \</span><br><span class="line">--<span class="built_in">set</span> global.hub=<span class="string">"docker.io/istio"</span> \</span><br><span class="line">--<span class="built_in">set</span> global.hyperkube.hub=<span class="string">"registry.cn-shanghai.aliyuncs.com/gcr-k8s"</span> \</span><br><span class="line">--<span class="built_in">set</span> gateways.istio-ingressgateway.type=NodePort \</span><br><span class="line">--<span class="built_in">set</span> gateways.istio-egressgateway.type=NodePort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">helm ls</span><br><span class="line">kubectl get pods -n istio-system</span><br><span class="line">kubectl get svc -n istio-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行之前的测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">helm delete --purge istio</span><br><span class="line">kubectl delete -f install/kubernetes/helm/istio/templates/crds.yaml -n istio-system</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://istio.io/docs/setup/kubernetes/quick-start.html" target="_blank" rel="noopener">https://istio.io/docs/setup/kubernetes/quick-start.html</a></li><li><a href="https://istio.io/docs/guides/bookinfo.html" target="_blank" rel="noopener">https://istio.io/docs/guides/bookinfo.html</a></li><li><a href="https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection" target="_blank" rel="noopener">https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> istio </tag>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> servicemesh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s使用kube-router构建高可用可扩展ingress</title>
      <link href="/posts/38/"/>
      <url>/posts/38/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>使用<code>kube-router</code>实现k8s集群的<code>ingress</code>功能，高可用易扩展<br><a id="more"></a></p><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>本实验在已经安装配置好k8s集群基础之上进行实验，k8s安装参考博客其他文章。lab4作为一个路由器，转发lab5的请求</p><h4 id="实验架构"><a href="#实验架构" class="headerlink" title="实验架构"></a>实验架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lab1: master 11.11.11.111</span><br><span class="line">lab2: node 11.11.11.112</span><br><span class="line">lab3: node 11.11.11.113</span><br><span class="line">lab4: router 11.11.11.114</span><br><span class="line">lab5: client 11.11.11.115</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次实验重新创建了集群，使用之前测试其他网络插件的集群环境没有成功</span></span><br><span class="line"><span class="comment"># 可能是由于环境干扰，实验时需要注意</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建kube-router目录下载相关文件</span></span><br><span class="line">mkdir kube-router &amp;&amp; <span class="built_in">cd</span> kube-router</span><br><span class="line">rm -f generic-kuberouter-all-features-dsr.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/mgxian/kube-router/master/generic-kuberouter-all-features-dsr.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用pod网络通信，网络隔离策略，服务代理所有功能</span></span><br><span class="line"><span class="comment"># CLUSTERCIDR kube-controller-manager 启动参数 --cluster-cidr 的值</span></span><br><span class="line"><span class="comment"># APISERVER kube-apiserver 启动参数 --advertise-address 值</span></span><br><span class="line">CLUSTERCIDR=<span class="string">'10.244.0.0/16'</span></span><br><span class="line">APISERVER=<span class="string">'https://11.11.11.111:6443'</span></span><br><span class="line">sed -i <span class="string">"s;%APISERVER%;<span class="variable">$APISERVER</span>;g"</span> generic-kuberouter-all-features-dsr.yaml</span><br><span class="line">sed -i <span class="string">"s;%CLUSTERCIDR%;<span class="variable">$CLUSTERCIDR</span>;g"</span> generic-kuberouter-all-features-dsr.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: kube-router</span><br><span class="line">        image: cloudnativelabs/kube-router</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        args:</span><br><span class="line">        ...</span><br><span class="line">        - --peer-router-ips=11.11.11.114</span><br><span class="line">        - --peer-router-asns=64513</span><br><span class="line">        - --cluster-asn=64512</span><br><span class="line">        - --advertise-external-ip=<span class="literal">true</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f generic-kuberouter-all-features-dsr.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除kube-proxy</span></span><br><span class="line">kubectl -n kube-system delete ds kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line"><span class="comment"># 如果是二进制安装使用如下命令</span></span><br><span class="line">systemctl stop kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line"><span class="comment"># 清理kube-proxy留下的规则</span></span><br><span class="line">docker run --privileged --net=host registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.10.2 kube-proxy --cleanup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试之前请先安装配置好kube-dns或者coredns</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动用于测试的deployment</span></span><br><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># dns及访问测试</span></span><br><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h3 id="在lab4配置quagga"><a href="#在lab4配置quagga" class="headerlink" title="在lab4配置quagga"></a>在lab4配置quagga</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y quagga</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cat &gt;/etc/quagga/bgpd.conf&lt;&lt;EOF</span><br><span class="line">! -*- bgp -*-</span><br><span class="line">!</span><br><span class="line">! BGPd sample configuratin file</span><br><span class="line">!</span><br><span class="line">! <span class="variable">$Id</span>: bgpd.conf.sample,v 1.1 2002/12/13 20:15:29 paul Exp $</span><br><span class="line">!</span><br><span class="line">hostname lab4</span><br><span class="line">password password</span><br><span class="line">!</span><br><span class="line">router bgp 64513</span><br><span class="line">  bgp router-id 11.11.11.114</span><br><span class="line">  maximum-paths 4</span><br><span class="line">  neighbor 11.11.11.111 remote-as 64512</span><br><span class="line">  neighbor 11.11.11.112 remote-as 64512</span><br><span class="line">  neighbor 11.11.11.113 remote-as 64512</span><br><span class="line"><span class="built_in">log</span> stdout</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start bgpd</span><br><span class="line">systemctl status bgpd</span><br><span class="line">systemctl <span class="built_in">enable</span> bgpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看路由信息</span></span><br><span class="line">ip route</span><br></pre></td></tr></table></figure><h3 id="在lab4测试"><a href="#在lab4测试" class="headerlink" title="在lab4测试"></a>在lab4测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在lab1上修改 example-service 配置 external ip</span></span><br><span class="line">kubectl edit svc example-service</span><br><span class="line">...</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.111.34.147</span><br><span class="line">  externalIPs:</span><br><span class="line">  - 11.11.111.111</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在lab1上查看svc信息</span></span><br><span class="line"><span class="comment"># 可以看到 example-service 有了 external ip</span></span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看lab4路由</span></span><br><span class="line"><span class="comment"># 可以看到有 11.11.111.111 相关的路由</span></span><br><span class="line">ip route</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在lab4上访问测试</span></span><br><span class="line">curl 11.11.111.111</span><br></pre></td></tr></table></figure><h3 id="在lab5测试"><a href="#在lab5测试" class="headerlink" title="在lab5测试"></a>在lab5测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在lab5添加路由</span></span><br><span class="line">ip route add 11.11.111.111 via 11.11.11.114</span><br><span class="line">ip route</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在lab5访问测试</span></span><br><span class="line">curl 11.11.111.111</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在lab1查看ipvs</span></span><br><span class="line">ipvsadm -L -n</span><br></pre></td></tr></table></figure><h3 id="使用DSR"><a href="#使用DSR" class="headerlink" title="使用DSR"></a>使用DSR</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DSR实验没有成功，实验环境是vagrant配合virtualbox</span></span><br><span class="line"><span class="comment"># 在lab1设置 example-service 使用 DSR 模式</span></span><br><span class="line"><span class="comment"># 服务的响应直接发送到客户端不经过lvs中转</span></span><br><span class="line">kubectl annotate svc example-service <span class="string">"kube-router.io/service.dsr=tunnel"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在lab1查看ipvs</span></span><br><span class="line"><span class="comment"># 可以看到 Tunnel 转发类型</span></span><br><span class="line">ipvsadm -L -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在lab5访问测试</span></span><br><span class="line">curl 11.11.111.111</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在集群中的节点抓包分析</span></span><br><span class="line">tcpdump -i kube-bridge proto 4</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://cloudnativelabs.github.io/post/2017-11-01-kube-high-available-ingress/" target="_blank" rel="noopener">https://cloudnativelabs.github.io/post/2017-11-01-kube-high-available-ingress/</a></li><li><a href="https://github.com/cloudnativelabs/kube-router/blob/master/docs/generic.md" target="_blank" rel="noopener">https://github.com/cloudnativelabs/kube-router/blob/master/docs/generic.md</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s使用kube-router暴露集群中的pod和svc到外部</title>
      <link href="/posts/37/"/>
      <url>/posts/37/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>使用<code>kube-router</code>把k8s集群中的<code>pod ip</code>和<code>cluter ip</code>暴露集群外部，实现集群外的节点直接访问k8s的pod和svc</p><a id="more"></a><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>本实验在已经安装配置好k8s集群基础之上进行实验，k8s安装参考博客其他文章。</p><h4 id="实验架构"><a href="#实验架构" class="headerlink" title="实验架构"></a>实验架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lab1: master 11.11.11.111</span><br><span class="line">lab2: node 11.11.11.112</span><br><span class="line">lab3: node 11.11.11.113</span><br><span class="line">lab4: external 11.11.11.114</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次实验重新创建了集群，使用之前测试其他网络插件的集群环境没有成功</span></span><br><span class="line"><span class="comment"># 可能是由于环境干扰，实验时需要注意</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建kube-router目录下载相关文件</span></span><br><span class="line">mkdir kube-router &amp;&amp; <span class="built_in">cd</span> kube-router</span><br><span class="line">rm -f generic-kuberouter-all-features.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/generic-kuberouter-all-features-advertise-routes.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用pod网络通信，网络隔离策略，服务代理所有功能</span></span><br><span class="line"><span class="comment"># CLUSTERCIDR kube-controller-manager 启动参数 --cluster-cidr 的值</span></span><br><span class="line"><span class="comment"># APISERVER kube-apiserver 启动参数 --advertise-address 值</span></span><br><span class="line">CLUSTERCIDR=<span class="string">'10.244.0.0/16'</span></span><br><span class="line">APISERVER=<span class="string">'https://11.11.11.111:6443'</span></span><br><span class="line">sed -i <span class="string">"s;%APISERVER%;<span class="variable">$APISERVER</span>;g"</span> generic-kuberouter-all-features-advertise-routes.yaml</span><br><span class="line">sed -i <span class="string">"s;%CLUSTERCIDR%;<span class="variable">$CLUSTERCIDR</span>;g"</span> generic-kuberouter-all-features-advertise-routes.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: kube-router</span><br><span class="line">        image: cloudnativelabs/kube-router</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        args:</span><br><span class="line">        ...</span><br><span class="line">        - <span class="string">"--peer-router-ips=11.11.11.114"</span></span><br><span class="line">        - <span class="string">"--peer-router-asns=64513"</span></span><br><span class="line">        - <span class="string">"--cluster-asn=64512"</span></span><br><span class="line">        - <span class="string">"--advertise-cluster-ip=true"</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f generic-kuberouter-all-features-advertise-routes.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除kube-proxy</span></span><br><span class="line">kubectl -n kube-system delete ds kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line"><span class="comment"># 如果是二进制安装使用如下命令</span></span><br><span class="line">systemctl stop kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line"><span class="comment"># 清理kube-proxy留下的规则</span></span><br><span class="line">docker run --privileged --net=host registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.10.2 kube-proxy --cleanup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试之前请先安装配置好kube-dns或者coredns</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动用于测试的deployment</span></span><br><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># dns及访问测试</span></span><br><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h3 id="在lab4配置quagga"><a href="#在lab4配置quagga" class="headerlink" title="在lab4配置quagga"></a>在lab4配置quagga</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y quagga</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cat &gt;/etc/quagga/bgpd.conf&lt;&lt;EOF</span><br><span class="line">! -*- bgp -*-</span><br><span class="line">!</span><br><span class="line">! BGPd sample configuratin file</span><br><span class="line">!</span><br><span class="line">! <span class="variable">$Id</span>: bgpd.conf.sample,v 1.1 2002/12/13 20:15:29 paul Exp $</span><br><span class="line">!</span><br><span class="line">hostname lab4</span><br><span class="line">password zebra</span><br><span class="line">!</span><br><span class="line">router bgp 64513</span><br><span class="line">  bgp router-id 11.11.11.114</span><br><span class="line">  neighbor 11.11.11.111 remote-as 64512</span><br><span class="line">  neighbor 11.11.11.112 remote-as 64512</span><br><span class="line">  neighbor 11.11.11.113 remote-as 64512</span><br><span class="line"><span class="built_in">log</span> stdout</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start bgpd</span><br><span class="line">systemctl status bgpd</span><br><span class="line">systemctl <span class="built_in">enable</span> bgpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看路由信息</span></span><br><span class="line">ip route</span><br></pre></td></tr></table></figure><h3 id="在lab4测试访问k8s集群中的pod和svc"><a href="#在lab4测试访问k8s集群中的pod和svc" class="headerlink" title="在lab4测试访问k8s集群中的pod和svc"></a>在lab4测试访问k8s集群中的pod和svc</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在lab1上获取pod和svc信息</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在lab4上访问</span></span><br><span class="line"><span class="comment"># 10.244.2.11 其中一个 nginx pod 的ip</span></span><br><span class="line"><span class="comment"># 10.106.123.190 为 example-service 的 cluster ip</span></span><br><span class="line">curl 10.244.2.11</span><br><span class="line">curl 10.106.123.190</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://cloudnativelabs.github.io/post/2017-05-22-kube-pod-networking/" target="_blank" rel="noopener">https://cloudnativelabs.github.io/post/2017-05-22-kube-pod-networking/</a></li><li><a href="https://github.com/cloudnativelabs/kube-router/blob/master/docs/generic.md" target="_blank" rel="noopener">https://github.com/cloudnativelabs/kube-router/blob/master/docs/generic.md</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s使用kube-router网络组件并实现网络隔离</title>
      <link href="/posts/36/"/>
      <url>/posts/36/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文章主要介绍k8s如何使用<code>kube-router</code>实现pod通信，服务代理，网络策略隔离等功能</p><p><code>kube-router</code>是一个新的k8s的网络插件，使用<code>lvs</code>做服务的代理及负载均衡，使用<code>iptables</code>来做网络的隔离策略。部署简单，只需要在每个节点部署一个daemonset即可，高性能，易维护。支持pod间通信，以及服务的代理。<br><a id="more"></a></p><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>本实验在已经安装配置好k8s集群基础之上进行实验，k8s安装参考博客其他文章。</p><h4 id="实验架构"><a href="#实验架构" class="headerlink" title="实验架构"></a>实验架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lab1: master 11.11.11.111</span><br><span class="line">lab2: node 11.11.11.112</span><br><span class="line">lab3: node 11.11.11.113</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次实验重新创建了集群，使用之前测试其他网络插件的集群环境没有成功</span></span><br><span class="line"><span class="comment"># 可能是由于环境干扰，实验时需要注意</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建kube-router目录下载相关文件</span></span><br><span class="line">mkdir kube-router &amp;&amp; <span class="built_in">cd</span> kube-router</span><br><span class="line">rm -f generic-kuberouter-all-features.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/generic-kuberouter-all-features.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用pod网络通信，网络隔离策略，服务代理所有功能</span></span><br><span class="line"><span class="comment"># CLUSTERCIDR kube-controller-manager 启动参数 --cluster-cidr 的值</span></span><br><span class="line"><span class="comment"># APISERVER kube-apiserver 启动参数 --advertise-address 值</span></span><br><span class="line">CLUSTERCIDR=<span class="string">'10.244.0.0/16'</span></span><br><span class="line">APISERVER=<span class="string">'https://11.11.11.111:6443'</span></span><br><span class="line">sed -i <span class="string">"s;%APISERVER%;<span class="variable">$APISERVER</span>;g"</span> generic-kuberouter-all-features.yaml</span><br><span class="line">sed -i <span class="string">"s;%CLUSTERCIDR%;<span class="variable">$CLUSTERCIDR</span>;g"</span> generic-kuberouter-all-features.yaml</span><br><span class="line">kubectl apply -f generic-kuberouter-all-features.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除kube-proxy</span></span><br><span class="line">kubectl -n kube-system delete ds kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line"><span class="comment"># 如果是二进制安装使用如下命令</span></span><br><span class="line">systemctl stop kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line"><span class="comment"># 清理kube-proxy留下的规则</span></span><br><span class="line">docker run --privileged --net=host registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.10.2 kube-proxy --cleanup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试之前请先安装配置好kube-dns或者coredns</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动用于测试的deployment</span></span><br><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># dns及访问测试</span></span><br><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="网络隔离策略"><a href="#网络隔离策略" class="headerlink" title="网络隔离策略"></a>网络隔离策略</h3><h4 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 production staging 命名空间</span></span><br><span class="line">kubectl create namespace production</span><br><span class="line">kubectl create namespace staging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个命名空间各部署一套服务</span></span><br><span class="line"><span class="built_in">cd</span> kube-router</span><br><span class="line">wget https://raw.githubusercontent.com/mgxian/istio-test/master/service/node/v1/node-v1.yml</span><br><span class="line">wget https://raw.githubusercontent.com/mgxian/istio-test/master/service/go/v1/go-v1.yml</span><br><span class="line">kubectl apply -f node-v1.yml -n production</span><br><span class="line">kubectl apply -f go-v1.yml -n production</span><br><span class="line">kubectl apply -f node-v1.yml -n staging</span><br><span class="line">kubectl apply -f go-v1.yml -n staging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods --all-namespaces -o wide</span><br></pre></td></tr></table></figure><h4 id="测试pod通信"><a href="#测试pod通信" class="headerlink" title="测试pod通信"></a>测试pod通信</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取相关POD信息</span></span><br><span class="line">PRODUCTION_NODE_NAME=$(kubectl get pods -n production | grep Running | grep service-node | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">STAGING_NODE_NAME=$(kubectl get pods -n staging | grep Running | grep service-node | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">PRODUCTION_GO_IP=$(kubectl get pods -n production -o wide | grep Running | grep service-go | awk <span class="string">'&#123;print $6&#125;'</span>)</span><br><span class="line">STAGING_GO_IP=$(kubectl get pods -n staging -o wide | grep Running | grep service-go | awk <span class="string">'&#123;print $6&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PRODUCTION_NODE_NAME</span> <span class="variable">$PRODUCTION_GO_IP</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$STAGING_NODE_NAME</span> <span class="variable">$STAGING_GO_IP</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同namespace的pod通信</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$PRODUCTION_NODE_NAME</span> --namespace=production -- ping -c4 <span class="variable">$PRODUCTION_GO_IP</span> </span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$STAGING_NODE_NAME</span> --namespace=staging -- ping -c4 <span class="variable">$STAGING_GO_IP</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同namespace的pod通信</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$PRODUCTION_NODE_NAME</span> --namespace=production -- ping -c4 <span class="variable">$STAGING_GO_IP</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$STAGING_NODE_NAME</span> --namespace=staging -- ping -c4 <span class="variable">$PRODUCTION_GO_IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结论：任何namespace的任何pod间都可以直接通信</span></span><br></pre></td></tr></table></figure><h4 id="设置默认策略测试"><a href="#设置默认策略测试" class="headerlink" title="设置默认策略测试"></a>设置默认策略测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置默认策略为拒绝所有流量</span></span><br><span class="line">cat &gt;default-deny.yml&lt;&lt;EOF</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: default-deny</span><br><span class="line">spec:</span><br><span class="line">  podSelector: &#123;&#125;</span><br><span class="line">  policyTypes:</span><br><span class="line">  - Ingress</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f default-deny.yml -n production</span><br><span class="line">kubectl apply -f default-deny.yml -n staging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试通信</span></span><br><span class="line"><span class="comment"># 同namespace的pod通信</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$PRODUCTION_NODE_NAME</span> --namespace=production -- ping -c4 <span class="variable">$PRODUCTION_GO_IP</span> </span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$STAGING_NODE_NAME</span> --namespace=staging -- ping -c4 <span class="variable">$STAGING_GO_IP</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同namespace的pod通信</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$PRODUCTION_NODE_NAME</span> --namespace=production -- ping -c4 <span class="variable">$STAGING_GO_IP</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$STAGING_NODE_NAME</span> --namespace=staging -- ping -c4 <span class="variable">$PRODUCTION_GO_IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结论：所有pod间都不能通信</span></span><br></pre></td></tr></table></figure><h4 id="设置允许规则"><a href="#设置允许规则" class="headerlink" title="设置允许规则"></a>设置允许规则</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 service-go 允许从 service-node 访问</span></span><br><span class="line">cat &gt;service-go-allow-service-node.yml&lt;&lt;EOF</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: service-go-allow-service-node</span><br><span class="line">spec:</span><br><span class="line">  podSelector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: service-go</span><br><span class="line">  ingress:</span><br><span class="line">  - from:</span><br><span class="line">    - podSelector:</span><br><span class="line">        matchLabels:</span><br><span class="line">          app: service-node</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f service-go-allow-service-node.yml -n production</span><br><span class="line">kubectl apply -f service-go-allow-service-node.yml -n staging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 service-node 允许 访问 tcp 80 端口</span></span><br><span class="line">cat &gt;service-node-allow-tcp-80.yml&lt;&lt;EOF</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: service-node-allow-tcp-80</span><br><span class="line">spec:</span><br><span class="line">  podSelector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: service-node</span><br><span class="line">  ingress:</span><br><span class="line">  - from:</span><br><span class="line">    ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f service-node-allow-tcp-80.yml -n production</span><br><span class="line">kubectl apply -f service-node-allow-tcp-80.yml -n staging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试通信</span></span><br><span class="line"><span class="comment"># 同namespace的pod通信</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$PRODUCTION_NODE_NAME</span> --namespace=production -- ping -c4 <span class="variable">$PRODUCTION_GO_IP</span> </span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$STAGING_NODE_NAME</span> --namespace=staging -- ping -c4 <span class="variable">$STAGING_GO_IP</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同namespace的pod通信</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$PRODUCTION_NODE_NAME</span> --namespace=production -- ping -c4 <span class="variable">$STAGING_GO_IP</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$STAGING_NODE_NAME</span> --namespace=staging -- ping -c4 <span class="variable">$PRODUCTION_GO_IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过service测试</span></span><br><span class="line">PRODUCTION_GO_SVC=$(kubectl get svc -n production | grep service-go | awk <span class="string">'&#123;print $3&#125;'</span>)</span><br><span class="line">STAGING_GO_SVC=$(kubectl get svc -n staging | grep service-go | awk <span class="string">'&#123;print $3&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PRODUCTION_GO_SVC</span> <span class="variable">$STAGING_GO_SVC</span></span><br><span class="line">curl <span class="variable">$PRODUCTION_GO_SVC</span></span><br><span class="line">curl <span class="variable">$STAGING_GO_SVC</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结论：同一namespace的pod间可以通信，不同namespace的pod间不可以通信，只允许配置了网络规则的pod间通信</span></span><br><span class="line"><span class="comment"># 通过 service 也无法绕过网络隔离策略</span></span><br></pre></td></tr></table></figure><h4 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 namespace 自动删除相关资源</span></span><br><span class="line">kubectl delete ns production</span><br><span class="line">kubectl delete ns staging</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/cloudnativelabs/kube-router/blob/master/docs/generic.md" target="_blank" rel="noopener">https://github.com/cloudnativelabs/kube-router/blob/master/docs/generic.md</a></li><li><a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/services-networking/network-policies/</a></li><li><a href="https://cloudnativelabs.github.io/post/2017-05-1-kube-network-policies/" target="_blank" rel="noopener">https://cloudnativelabs.github.io/post/2017-05-1-kube-network-policies/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7手动安装k8s-1.11版本</title>
      <link href="/posts/35/"/>
      <url>/posts/35/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文章主要介绍如何通过使用官方提供的二进制包安装配置k8s集群<br><a id="more"></a></p><h3 id="实验环境说明"><a href="#实验环境说明" class="headerlink" title="实验环境说明"></a>实验环境说明</h3><h4 id="实验架构"><a href="#实验架构" class="headerlink" title="实验架构"></a>实验架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lab1: master 11.11.11.111</span><br><span class="line">lab2: node 11.11.11.112</span><br><span class="line">lab3: node 11.11.11.113</span><br></pre></td></tr></table></figure><h4 id="实验使用的Vagrantfile"><a href="#实验使用的Vagrantfile" class="headerlink" title="实验使用的Vagrantfile"></a>实验使用的<code>Vagrantfile</code></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">3</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      config.vm.define <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"11.11.11.11<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          <span class="symbol">inline:</span> <span class="string">"echo hello from node <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">          v.cpus = <span class="number">2</span></span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--name"</span>, <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><h4 id="配置系统相关参数"><a href="#配置系统相关参数" class="headerlink" title="配置系统相关参数"></a>配置系统相关参数</h4><blockquote><p>如下操作在所有节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时禁用selinux</span></span><br><span class="line"><span class="comment"># 永久关闭 修改/etc/sysconfig/selinux文件设置</span></span><br><span class="line">sed -i <span class="string">'s/SELINUX=permissive/SELINUX=disabled/'</span> /etc/sysconfig/selinux</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时关闭swap</span></span><br><span class="line"><span class="comment"># 永久关闭 注释/etc/fstab文件里swap相关的行</span></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启forward</span></span><br><span class="line"><span class="comment"># Docker从1.13版本开始调整了默认的防火墙规则</span></span><br><span class="line"><span class="comment"># 禁用了iptables filter表中FOWARD链</span></span><br><span class="line"><span class="comment"># 这样会引起Kubernetes集群中跨Node的Pod无法通信</span></span><br><span class="line"></span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置转发相关参数，否则可能会出错</span></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载ipvs相关内核模块</span></span><br><span class="line"><span class="comment"># 如果重新开机，需要重新加载</span></span><br><span class="line">modprobe ip_vs</span><br><span class="line">modprobe ip_vs_rr</span><br><span class="line">modprobe ip_vs_wrr</span><br><span class="line">modprobe ip_vs_sh</span><br><span class="line">modprobe nf_conntrack_ipv4</span><br><span class="line">lsmod | grep ip_vs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置开启自加载</span></span><br><span class="line">cat &gt;/etc/modules-load.d/k8s-ipvs.conf&lt;&lt;EOF</span><br><span class="line">ip_vs</span><br><span class="line">ip_vs_rr</span><br><span class="line">ip_vs_wrr</span><br><span class="line">ip_vs_sh</span><br><span class="line">nf_conntrack_ipv4</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="配置hosts解析"><a href="#配置hosts解析" class="headerlink" title="配置hosts解析"></a>配置hosts解析</h4><blockquote><p>如下操作在所有节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt;/etc/hosts&lt;&lt;EOF</span><br><span class="line">11.11.11.111 lab1</span><br><span class="line">11.11.11.112 lab2</span><br><span class="line">11.11.11.113 lab3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="安装配置docker"><a href="#安装配置docker" class="headerlink" title="安装配置docker"></a>安装配置docker</h4><blockquote><p>v1.11.0版本推荐使用docker v17.03,<br>v1.11,v1.12,v1.13, 也可以使用，再高版本的docker可能无法正常使用。<br>测试发现17.09无法正常使用，不能使用资源限制(内存CPU)</p><p>如下操作在所有节点操作</p></blockquote><h5 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载安装指定版本docker-ce</span></span><br><span class="line">yum remove -y docker-ce docker-ce-selinux container-selinux</span><br><span class="line">yum install -y --<span class="built_in">setopt</span>=obsoletes=0 \</span><br><span class="line">docker-ce-17.03.1.ce-1.el7.centos \</span><br><span class="line">docker-ce-selinux-17.03.1.ce-1.el7.centos</span><br></pre></td></tr></table></figure><h5 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="安装CFSSL"><a href="#安装CFSSL" class="headerlink" title="安装CFSSL"></a>安装CFSSL</h4><blockquote><p>只在<code>lab1</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line"><span class="comment"># 百度云链接：https://pan.baidu.com/s/1kgV40nwHy1IKnnLD6zH4cQ 密码：alyj</span></span><br><span class="line">mkdir -pv /server/software/k8s</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s</span><br><span class="line">yum install -y wget</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">mv cfssl-certinfo_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl-certinfo</span><br><span class="line">mv cfssl_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl</span><br><span class="line">mv cfssljson_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssljson</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/cfssl*</span><br></pre></td></tr></table></figure><h4 id="配置CA"><a href="#配置CA" class="headerlink" title="配置CA"></a>配置CA</h4><blockquote><p>只在<code>lab1</code>节点操作</p><p>此处的CA配置，后面配置etcd和k8s时都需要使用</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv <span class="variable">$HOME</span>/ssl &amp;&amp; <span class="built_in">cd</span> <span class="variable">$HOME</span>/ssl</span><br><span class="line">cat &gt;ca-config.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"signing"</span>: &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">      <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"profiles"</span>: &#123;</span><br><span class="line">      <span class="string">"kubernetes"</span>: &#123;</span><br><span class="line">        <span class="string">"usages"</span>: [</span><br><span class="line">            <span class="string">"signing"</span>,</span><br><span class="line">            <span class="string">"key encipherment"</span>,</span><br><span class="line">            <span class="string">"server auth"</span>,</span><br><span class="line">            <span class="string">"client auth"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="配置etcd集群"><a href="#配置etcd集群" class="headerlink" title="配置etcd集群"></a>配置etcd集群</h4><h5 id="生成etcd-ca"><a href="#生成etcd-ca" class="headerlink" title="生成etcd-ca"></a>生成etcd-ca</h5><blockquote><p>只在<code>lab1</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入配置</span></span><br><span class="line">cat &gt;etcd-ca-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"Etcd Security"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 etcd root ca</span></span><br><span class="line">cfssl gencert -initca etcd-ca-csr.json | cfssljson -bare etcd-ca</span><br><span class="line"></span><br><span class="line">cat &gt;etcd-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"11.11.11.111"</span>,</span><br><span class="line">      <span class="string">"11.11.11.112"</span>,</span><br><span class="line">      <span class="string">"11.11.11.113"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"Etcd Security"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 etcd ca</span></span><br><span class="line">cfssl gencert -ca=etcd-ca.pem -ca-key=etcd-ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes etcd-csr.json | cfssljson -bare etcd</span><br><span class="line">mkdir -pv /etc/etcd/ssl</span><br><span class="line">cp etcd*.pem /etc/etcd/ssl</span><br><span class="line">ls /etc/etcd/ssl/etcd*.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制到其他节点</span></span><br><span class="line"><span class="built_in">cd</span> /etc/etcd &amp;&amp; tar cvzf etcd-ssl.tgz ssl/</span><br><span class="line">scp /etc/etcd/etcd-ssl.tgz lab2:~/</span><br><span class="line">scp /etc/etcd/etcd-ssl.tgz lab3:~/</span><br><span class="line">ssh lab2 <span class="string">'mkdir -pv /etc/etcd &amp;&amp; tar xf etcd-ssl.tgz -C /etc/etcd &amp;&amp; ls -l /etc/etcd/ssl'</span></span><br><span class="line">ssh lab3 <span class="string">'mkdir -pv /etc/etcd &amp;&amp; tar xf etcd-ssl.tgz -C /etc/etcd &amp;&amp; ls -l /etc/etcd/ssl'</span></span><br></pre></td></tr></table></figure><h5 id="安装启动etcd"><a href="#安装启动etcd" class="headerlink" title="安装启动etcd"></a>安装启动etcd</h5><blockquote><p>如下操作在所有节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="comment"># 百度云链接：https://pan.baidu.com/s/1IVHyMqiJrlq9gmbF49Ly3Q 密码：w5nx</span></span><br><span class="line">mkdir -pv /server/software/k8s</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s</span><br><span class="line">yum install -y wget</span><br><span class="line">wget https://github.com/coreos/etcd/releases/download/v3.2.18/etcd-v3.2.18-linux-amd64.tar.gz</span><br><span class="line">tar xf etcd-v3.2.18-linux-amd64.tar.gz</span><br><span class="line">mv etcd-v3.2.18-linux-amd64 /usr/<span class="built_in">local</span>/etcd-v3.2.18</span><br><span class="line">ln -sv /usr/<span class="built_in">local</span>/etcd-v3.2.18 /usr/<span class="built_in">local</span>/etcd</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/etcd &amp;&amp; mkdir bin &amp;&amp; mv etcd etcdctl bin</span><br><span class="line">/usr/<span class="built_in">local</span>/etcd/bin/etcd --version</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置启动脚本</span></span><br><span class="line"><span class="built_in">export</span> ETCD_NAME=$(hostname)</span><br><span class="line"><span class="built_in">export</span> INTERNAL_IP=$(hostname -i | awk <span class="string">'&#123;print $NF&#125;'</span>)</span><br><span class="line"><span class="built_in">export</span> ECTD_CLUSTER=<span class="string">'lab1=https://11.11.11.111:2380,lab2=https://11.11.11.112:2380,lab3=https://11.11.11.113:2380'</span></span><br><span class="line">mkdir -pv /data/etcd</span><br><span class="line">cat &gt; /etc/systemd/system/etcd.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Documentation=https://github.com/coreos</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/data/etcd</span><br><span class="line">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/etcd/bin/etcd \\</span><br><span class="line">  --name <span class="variable">$&#123;ETCD_NAME&#125;</span> \\</span><br><span class="line">  --cert-file=/etc/etcd/ssl/etcd.pem \\</span><br><span class="line">  --key-file=/etc/etcd/ssl/etcd-key.pem \\</span><br><span class="line">  --peer-cert-file=/etc/etcd/ssl/etcd.pem \\</span><br><span class="line">  --peer-key-file=/etc/etcd/ssl/etcd-key.pem \\</span><br><span class="line">  --trusted-ca-file=/etc/etcd/ssl/etcd-ca.pem \\</span><br><span class="line">  --peer-trusted-ca-file=/etc/etcd/ssl/etcd-ca.pem \\</span><br><span class="line">  --initial-advertise-peer-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2380 \\</span><br><span class="line">  --listen-peer-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2380 \\</span><br><span class="line">  --listen-client-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2379,https://127.0.0.1:2379 \\</span><br><span class="line">  --advertise-client-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2379 \\</span><br><span class="line">  --initial-cluster-token my-etcd-token \\</span><br><span class="line">  --initial-cluster <span class="variable">$ECTD_CLUSTER</span> \\</span><br><span class="line">  --initial-cluster-state new \\</span><br><span class="line">  --data-dir=/data/etcd</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动并设置开机启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start etcd</span><br><span class="line">systemctl <span class="built_in">enable</span> etcd</span><br></pre></td></tr></table></figure><h5 id="查看etcd集群状态"><a href="#查看etcd集群状态" class="headerlink" title="查看etcd集群状态"></a>查看etcd集群状态</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/etcd/bin/etcdctl --endpoints <span class="string">"https://127.0.0.1:2379"</span> \</span><br><span class="line">  --ca-file=/etc/etcd/ssl/etcd-ca.pem \</span><br><span class="line">  --cert-file=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="line">  cluster-health</span><br></pre></td></tr></table></figure><h4 id="生成k8s集群的CA"><a href="#生成k8s集群的CA" class="headerlink" title="生成k8s集群的CA"></a>生成k8s集群的CA</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入相关目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 root ca</span></span><br><span class="line">cat &gt;ca-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"ca"</span>: &#123;</span><br><span class="line">     <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 root ca</span></span><br><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br><span class="line">ls ca*.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 kube-apiserver ca</span></span><br><span class="line"><span class="comment"># 10.96.0.1 是 kube-apiserver 指定的 service-cluster-ip-range 网段的第一个IP</span></span><br><span class="line">cat &gt;kube-apiserver-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"kube-apiserver"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"11.11.11.111"</span>,</span><br><span class="line">      <span class="string">"11.11.11.112"</span>,</span><br><span class="line">      <span class="string">"11.11.11.113"</span>,</span><br><span class="line">      <span class="string">"10.96.0.1"</span>,</span><br><span class="line">      <span class="string">"kubernetes"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc.cluster"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc.cluster.local"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 kube-apiserver ca</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes kube-apiserver-csr.json | cfssljson -bare kube-apiserver</span><br><span class="line">ls kube-apiserver*.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 kube-controller-manager ca</span></span><br><span class="line">cat &gt;kube-controller-manager-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"11.11.11.111"</span>,</span><br><span class="line">      <span class="string">"11.11.11.112"</span>,</span><br><span class="line">      <span class="string">"11.11.11.113"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 kube-controller-manager ca</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager</span><br><span class="line">ls kube-controller-manager*.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 kube-scheduler ca</span></span><br><span class="line">cat &gt;kube-scheduler-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"11.11.11.111"</span>,</span><br><span class="line">      <span class="string">"11.11.11.112"</span>,</span><br><span class="line">      <span class="string">"11.11.11.113"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 kube-scheduler ca</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler</span><br><span class="line">ls kube-scheduler*.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 kube-proxy ca</span></span><br><span class="line">cat &gt;kube-proxy-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 kube-proxy ca</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br><span class="line">ls kube-proxy*.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 admin ca</span></span><br><span class="line">cat &gt;admin-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"admin"</span>,</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"system:masters"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 admin ca</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes admin-csr.json | cfssljson -bare admin</span><br><span class="line">ls admin*.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制生成的ca</span></span><br><span class="line">mkdir -pv /etc/kubernetes/pki</span><br><span class="line">cp ca*.pem admin*.pem kube-proxy*.pem kube-scheduler*.pem kube-controller-manager*.pem kube-apiserver*.pem /etc/kubernetes/pki</span><br><span class="line"><span class="built_in">cd</span> /etc/kubernetes &amp;&amp; tar cvzf pki.tgz pki/</span><br><span class="line">scp /etc/kubernetes/pki.tgz lab2:~/</span><br><span class="line">scp /etc/kubernetes/pki.tgz lab3:~/</span><br><span class="line">ssh lab2 <span class="string">'mkdir -pv /etc/kubernetes &amp;&amp; tar xf pki.tgz -C /etc/kubernetes &amp;&amp; ls -l /etc/kubernetes/pki'</span></span><br><span class="line">ssh lab3 <span class="string">'mkdir -pv /etc/kubernetes &amp;&amp; tar xf pki.tgz -C /etc/kubernetes &amp;&amp; ls -l /etc/kubernetes/pki'</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br></pre></td></tr></table></figure><h4 id="安装k8s文件"><a href="#安装k8s文件" class="headerlink" title="安装k8s文件"></a>安装k8s文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line"><span class="comment"># 需要翻墙，如果不能翻墙使用如下链接下载</span></span><br><span class="line"><span class="comment"># 链接：https://pan.baidu.com/s/1OI9Q4BRp7jNJUmsA8IAkbA 密码：tnx5</span></span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s</span><br><span class="line">wget https://dl.k8s.io/v1.11.0/kubernetes-server-linux-amd64.tar.gz</span><br><span class="line">tar xf kubernetes-server-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> kubernetes/server/bin</span><br><span class="line">mkdir -pv /usr/<span class="built_in">local</span>/kubernetes-v1.11.0/bin</span><br><span class="line">cp kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet kubectl /usr/<span class="built_in">local</span>/kubernetes-v1.11.0/bin</span><br><span class="line">ln -sv /usr/<span class="built_in">local</span>/kubernetes-v1.11.0 /usr/<span class="built_in">local</span>/kubernetes</span><br><span class="line">cp /usr/<span class="built_in">local</span>/kubernetes/bin/kubectl /usr/<span class="built_in">local</span>/bin/kubectl</span><br><span class="line">kubectl version</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br></pre></td></tr></table></figure><h4 id="生成kubeconfig"><a href="#生成kubeconfig" class="headerlink" title="生成kubeconfig"></a>生成kubeconfig</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 TLS Bootstrapping </span></span><br><span class="line"><span class="built_in">export</span> BOOTSTRAP_TOKEN=$(head -c 16 /dev/urandom | od -An -t x | tr -d <span class="string">' '</span>)</span><br><span class="line">cat &gt; /etc/kubernetes/token.csv &lt;&lt;EOF</span><br><span class="line"><span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span>,kubelet-bootstrap,10001,<span class="string">"system:kubelet-bootstrap"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 kubelet bootstrapping kubeconfig</span></span><br><span class="line"><span class="built_in">cd</span> /etc/kubernetes</span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://11.11.11.111:6443"</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kubelet-bootstrap.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kubelet-bootstrap \</span><br><span class="line">  --token=<span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \</span><br><span class="line">  --kubeconfig=kubelet-bootstrap.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kubelet-bootstrap \</span><br><span class="line">  --kubeconfig=kubelet-bootstrap.conf</span><br><span class="line">kubectl config use-context default --kubeconfig=kubelet-bootstrap.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 kube-controller-manager kubeconfig</span></span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://11.11.11.111:6443"</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-controller-manager.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kube-controller-manager \</span><br><span class="line">  --client-certificate=/etc/kubernetes/pki/kube-controller-manager.pem \</span><br><span class="line">  --client-key=/etc/kubernetes/pki/kube-controller-manager-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-controller-manager.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kube-controller-manager \</span><br><span class="line">  --kubeconfig=kube-controller-manager.conf</span><br><span class="line">kubectl config use-context default --kubeconfig=kube-controller-manager.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 kube-scheduler kubeconfig</span></span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://11.11.11.111:6443"</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-scheduler.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kube-scheduler \</span><br><span class="line">  --client-certificate=/etc/kubernetes/pki/kube-scheduler.pem \</span><br><span class="line">  --client-key=/etc/kubernetes/pki/kube-scheduler-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-scheduler.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kube-scheduler \</span><br><span class="line">  --kubeconfig=kube-scheduler.conf</span><br><span class="line">kubectl config use-context default --kubeconfig=kube-scheduler.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 kube-proxy kubeconfig</span></span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://11.11.11.111:6443"</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kube-proxy \</span><br><span class="line">  --client-certificate=/etc/kubernetes/pki/kube-proxy.pem \</span><br><span class="line">  --client-key=/etc/kubernetes/pki/kube-proxy-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kube-proxy \</span><br><span class="line">  --kubeconfig=kube-proxy.conf</span><br><span class="line">kubectl config use-context default --kubeconfig=kube-proxy.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 admin kubeconfig</span></span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://11.11.11.111:6443"</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=admin.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials admin \</span><br><span class="line">  --client-certificate=/etc/kubernetes/pki/admin.pem \</span><br><span class="line">  --client-key=/etc/kubernetes/pki/admin-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=admin.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=admin \</span><br><span class="line">  --kubeconfig=admin.conf</span><br><span class="line">kubectl config use-context default --kubeconfig=admin.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 kube-proxy.conf 复制到其他节点</span></span><br><span class="line">scp kubelet-bootstrap.conf kube-proxy.conf lab2:/etc/kubernetes</span><br><span class="line">scp kubelet-bootstrap.conf kube-proxy.conf lab3:/etc/kubernetes</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br></pre></td></tr></table></figure><h4 id="配置master相关组件"><a href="#配置master相关组件" class="headerlink" title="配置master相关组件"></a>配置master相关组件</h4><blockquote><p>只在<code>lab1</code>节点操作</p></blockquote><h5 id="配置启动kube-apiserver"><a href="#配置启动kube-apiserver" class="headerlink" title="配置启动kube-apiserver"></a>配置启动kube-apiserver</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制 etcd ca</span></span><br><span class="line">mkdir -pv /etc/kubernetes/pki/etcd</span><br><span class="line"><span class="built_in">cd</span> /etc/etcd/ssl</span><br><span class="line">cp etcd-ca.pem etcd-key.pem etcd.pem /etc/kubernetes/pki/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 service account key</span></span><br><span class="line">openssl genrsa -out /etc/kubernetes/pki/sa.key 2048</span><br><span class="line">openssl rsa -<span class="keyword">in</span> /etc/kubernetes/pki/sa.key -pubout -out /etc/kubernetes/pki/sa.pub</span><br><span class="line">ls /etc/kubernetes/pki/sa.*</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动文件</span></span><br><span class="line">cat &gt;/etc/systemd/system/kube-apiserver.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Service</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/apiserver</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/kubernetes/bin/kube-apiserver \\</span><br><span class="line">    \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_ETCD_ARGS</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_API_ADDRESS</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_SERVICE_ADDRESSES</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_ADMISSION_CONTROL</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_APISERVER_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">Type=notify</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该配置文件同时被 kube-apiserver, kube-controller-manager</span></span><br><span class="line"><span class="comment"># kube-scheduler, kubelet, kube-proxy 使用</span></span><br><span class="line">cat &gt;/etc/kubernetes/config&lt;&lt;EOF</span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">"--logtostderr=true"</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">"--v=2"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/apiserver&lt;&lt;EOF</span><br><span class="line">KUBE_API_ADDRESS=<span class="string">"--advertise-address=11.11.11.111"</span></span><br><span class="line">KUBE_ETCD_ARGS=<span class="string">"--etcd-servers=https://11.11.11.111:2379,https://11.11.11.112:2379,https://11.11.11.113:2379 --etcd-cafile=/etc/kubernetes/pki/etcd/etcd-ca.pem --etcd-certfile=/etc/kubernetes/pki/etcd/etcd.pem --etcd-keyfile=/etc/kubernetes/pki/etcd/etcd-key.pem"</span></span><br><span class="line">KUBE_SERVICE_ADDRESSES=<span class="string">"--service-cluster-ip-range=10.96.0.0/12"</span></span><br><span class="line">KUBE_ADMISSION_CONTROL=<span class="string">"--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"</span></span><br><span class="line">KUBE_APISERVER_ARGS=<span class="string">"--allow-privileged=true --authorization-mode=Node,RBAC --enable-bootstrap-token-auth=true --token-auth-file=/etc/kubernetes/token.csv --service-node-port-range=30000-32767 --tls-cert-file=/etc/kubernetes/pki/kube-apiserver.pem --tls-private-key-file=/etc/kubernetes/pki/kube-apiserver-key.pem --client-ca-file=/etc/kubernetes/pki/ca.pem --service-account-key-file=/etc/kubernetes/pki/sa.pub --enable-swagger-ui=true --secure-port=6443 --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --anonymous-auth=false --kubelet-client-certificate=/etc/kubernetes/pki/admin.pem --kubelet-client-key=/etc/kubernetes/pki/admin-key.pem"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-apiserver</span><br><span class="line">systemctl start kube-apiserver</span><br><span class="line">systemctl status kube-apiserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问测试</span></span><br><span class="line">https://11.11.11.111:6443/swaggerapi</span><br></pre></td></tr></table></figure><h5 id="配置启动kube-controller-manager"><a href="#配置启动kube-controller-manager" class="headerlink" title="配置启动kube-controller-manager"></a>配置启动kube-controller-manager</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动文件</span></span><br><span class="line">cat &gt;/etc/systemd/system/kube-controller-manager.service&lt;&lt;EOF</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/controller-manager</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/kubernetes/bin/kube-controller-manager \\</span><br><span class="line">    \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">    \<span class="variable">$KUBECONFIG</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_CONTROLLER_MANAGER_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/controller-manager&lt;&lt;EOF</span><br><span class="line">KUBECONFIG=<span class="string">"--kubeconfig=/etc/kubernetes/kube-controller-manager.conf"</span></span><br><span class="line">KUBE_CONTROLLER_MANAGER_ARGS=<span class="string">"--address=127.0.0.1 --cluster-cidr=10.244.0.0/16 --cluster-name=kubernetes --cluster-signing-cert-file=/etc/kubernetes/pki/ca.pem --cluster-signing-key-file=/etc/kubernetes/pki/ca-key.pem --service-account-private-key-file=/etc/kubernetes/pki/sa.key --root-ca-file=/etc/kubernetes/pki/ca.pem --leader-elect=true --use-service-account-credentials=true --node-monitor-grace-period=10s --pod-eviction-timeout=10s --allocate-node-cidrs=true --controllers=*,bootstrapsigner,tokencleaner"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-controller-manager</span><br><span class="line">systemctl start kube-controller-manager</span><br><span class="line">systemctl status kube-controller-manager</span><br></pre></td></tr></table></figure><h5 id="配置启动kube-scheduler"><a href="#配置启动kube-scheduler" class="headerlink" title="配置启动kube-scheduler"></a>配置启动kube-scheduler</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/systemd/system/kube-scheduler.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler Plugin</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/scheduler</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/kubernetes/bin/kube-scheduler \\</span><br><span class="line">            \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">            \<span class="variable">$KUBECONFIG</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_SCHEDULER_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/scheduler&lt;&lt;EOF</span><br><span class="line">KUBECONFIG=<span class="string">"--kubeconfig=/etc/kubernetes/kube-scheduler.conf"</span></span><br><span class="line">KUBE_SCHEDULER_ARGS=<span class="string">"--leader-elect=true --address=127.0.0.1"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-scheduler</span><br><span class="line">systemctl start kube-scheduler</span><br><span class="line">systemctl status kube-scheduler</span><br></pre></td></tr></table></figure><h5 id="配置kubectl使用"><a href="#配置kubectl使用" class="headerlink" title="配置kubectl使用"></a>配置kubectl使用</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="variable">$HOME</span>/.kube</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">kubectl get no</span><br></pre></td></tr></table></figure><h5 id="查看组件状态"><a href="#查看组件状态" class="headerlink" title="查看组件状态"></a>查看组件状态</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get componentstatuses</span><br></pre></td></tr></table></figure><h5 id="配置kubelet使用bootstrap"><a href="#配置kubelet使用bootstrap" class="headerlink" title="配置kubelet使用bootstrap"></a>配置kubelet使用bootstrap</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 bootstrap token 文件中的 kubelet-bootstrap 用户赋予 system:node-bootstrapper cluster 角色</span></span><br><span class="line">kubectl create clusterrolebinding kubelet-bootstrap \</span><br><span class="line">--clusterrole=system:node-bootstrapper \</span><br><span class="line">--user=kubelet-bootstrap</span><br></pre></td></tr></table></figure><h4 id="配置node相关组件"><a href="#配置node相关组件" class="headerlink" title="配置node相关组件"></a>配置node相关组件</h4><blockquote><p>如下操作在所有节点操作</p></blockquote><h5 id="安装cni"><a href="#安装cni" class="headerlink" title="安装cni"></a>安装cni</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 cni</span></span><br><span class="line"><span class="comment"># 百度云链接：https://pan.baidu.com/s/1-PputObLs5jouXLnuBCI6Q 密码：tzqm</span></span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s</span><br><span class="line">wget https://github.com/containernetworking/plugins/releases/download/v0.7.1/cni-plugins-amd64-v0.7.1.tgz</span><br><span class="line">mkdir -pv /opt/cni/bin</span><br><span class="line">tar xf cni-plugins-amd64-v0.7.1.tgz -C /opt/cni/bin</span><br><span class="line">ls -l /opt/cni/bin</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br></pre></td></tr></table></figure><h5 id="配置启动kubelet"><a href="#配置启动kubelet" class="headerlink" title="配置启动kubelet"></a>配置启动kubelet</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动文件</span></span><br><span class="line">mkdir -pv /data/kubelet</span><br><span class="line">cat &gt;/etc/systemd/system/kubelet.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/data/kubelet</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/kubelet</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/kubernetes/bin/kubelet \\</span><br><span class="line">            \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_CONFIG</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_HOSTNAME</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_POD_INFRA_CONTAINER</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/config&lt;&lt;EOF</span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">"--logtostderr=true"</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">"--v=2"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意修改相关ip</span></span><br><span class="line">cat &gt;/etc/kubernetes/kubelet&lt;&lt;EOF</span><br><span class="line">KUBELET_HOSTNAME=<span class="string">"--hostname-override=11.11.11.111"</span></span><br><span class="line">KUBELET_POD_INFRA_CONTAINER=<span class="string">"--pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1"</span></span><br><span class="line">KUBELET_CONFIG=<span class="string">"--config=/etc/kubernetes/kubelet-config.yml"</span></span><br><span class="line">KUBELET_ARGS=<span class="string">"--bootstrap-kubeconfig=/etc/kubernetes/kubelet-bootstrap.conf --kubeconfig=/etc/kubernetes/kubelet.conf --cert-dir=/etc/kubernetes/pki --network-plugin=cni --cni-bin-dir=/opt/cni/bin --cni-conf-dir=/etc/cni/net.d"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意修改相关ip</span></span><br><span class="line"><span class="comment"># lab1 lab2 lab3 使用各自ip</span></span><br><span class="line">cat &gt;/etc/kubernetes/kubelet-config.yml&lt;&lt;EOF</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">address: 11.11.11.111</span><br><span class="line">port: 10250</span><br><span class="line">cgroupDriver: cgroupfs</span><br><span class="line">clusterDNS:</span><br><span class="line">  - 10.96.0.10</span><br><span class="line">clusterDomain: cluster.local.</span><br><span class="line">hairpinMode: promiscuous-bridge</span><br><span class="line">serializeImagePulls: <span class="literal">false</span></span><br><span class="line">authentication:</span><br><span class="line">  x509:</span><br><span class="line">    clientCAFile: /etc/kubernetes/pki/ca.pem</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line">systemctl start kubelet</span><br><span class="line">systemctl status kubelet</span><br></pre></td></tr></table></figure><h5 id="通过证书请求"><a href="#通过证书请求" class="headerlink" title="通过证书请求"></a>通过证书请求</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在配置了kubectl的节点上执行如下操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过</span></span><br><span class="line">kubectl certificate approve node-csr-Yiiv675wUCvQl3HH11jDr0cC9p3kbrXWrxvG3EjWGoE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点</span></span><br><span class="line"><span class="comment"># 此时节点状态为 NotReady</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在node节点查看生成的文件</span></span><br><span class="line">ls -l /etc/kubernetes/kubelet.conf</span><br><span class="line">ls -l /etc/kubernetes/pki/kubelet*</span><br></pre></td></tr></table></figure><h5 id="配置启动kube-proxy"><a href="#配置启动kube-proxy" class="headerlink" title="配置启动kube-proxy"></a>配置启动kube-proxy</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y conntrack-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动文件</span></span><br><span class="line">cat &gt;/etc/systemd/system/kube-proxy.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kube-Proxy Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/proxy</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/kubernetes/bin/kube-proxy \\</span><br><span class="line">    \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">    \<span class="variable">$KUBECONFIG</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_PROXY_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意修改相关ip</span></span><br><span class="line"><span class="comment"># lab1 lab2 lab3 使用各自ip</span></span><br><span class="line"><span class="comment"># 由于 1.11.0 ipvs 在centos7上有bug无法正常使用</span></span><br><span class="line"><span class="comment"># 实验使用 iptables 模式</span></span><br><span class="line"><span class="comment"># 以后版本可以使用 ipvs 模式</span></span><br><span class="line">cat &gt;/etc/kubernetes/proxy&lt;&lt;EOF</span><br><span class="line">KUBECONFIG=<span class="string">"--kubeconfig=/etc/kubernetes/kube-proxy.conf"</span></span><br><span class="line">KUBE_PROXY_ARGS=<span class="string">"--bind-address=11.11.11.111 --proxy-mode=iptables --hostname-override=11.11.11.111 --cluster-cidr=10.244.0.0/16"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-proxy</span><br><span class="line">systemctl start kube-proxy</span><br><span class="line">systemctl status kube-proxy</span><br></pre></td></tr></table></figure><h4 id="设置集群角色"><a href="#设置集群角色" class="headerlink" title="设置集群角色"></a>设置集群角色</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 lab1 为 master</span></span><br><span class="line">kubectl label nodes 11.11.11.111 node-role.kubernetes.io/master=</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 lab2 lab3 为 node</span></span><br><span class="line">kubectl label nodes 11.11.11.112 node-role.kubernetes.io/node=</span><br><span class="line">kubectl label nodes 11.11.11.113 node-role.kubernetes.io/node=</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 master 一般情况下不接受负载</span></span><br><span class="line">kubectl taint nodes 11.11.11.111 node-role.kubernetes.io/master=<span class="literal">true</span>:NoSchedule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点</span></span><br><span class="line"><span class="comment"># 此时节点状态为 NotReady</span></span><br><span class="line">kubectl get no</span><br></pre></td></tr></table></figure><h4 id="配置使用flannel网络"><a href="#配置使用flannel网络" class="headerlink" title="配置使用flannel网络"></a>配置使用flannel网络</h4><blockquote><p>在<code>lab1</code>操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载配置</span></span><br><span class="line">mkdir flannel &amp;&amp; <span class="built_in">cd</span> flannel</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与上面kubeadm的pod-network一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"10.244.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点状态</span></span><br><span class="line"><span class="comment"># 当 flannel pod 全部启动之后，节点状态为 Ready</span></span><br><span class="line">kubectl get no</span><br></pre></td></tr></table></figure><h4 id="配置使用coredns"><a href="#配置使用coredns" class="headerlink" title="配置使用coredns"></a>配置使用coredns</h4><blockquote><p>在<code>lab1</code>操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="comment"># 10.96.0.10 kubelet中配置的dns</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span> &amp;&amp; mkdir coredns &amp;&amp; <span class="built_in">cd</span> coredns</span><br><span class="line">wget https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/coredns.yaml.sed</span><br><span class="line">wget https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/deploy.sh</span><br><span class="line">chmod +x deploy.sh</span><br><span class="line">./deploy.sh -i 10.96.0.10 &gt; coredns.yml</span><br><span class="line">kubectl apply -f coredns.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br><span class="line">kubectl scale --replicas=3 deployment/nginx</span><br></pre></td></tr></table></figure><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy -o wide</span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc -o wide</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure><h4 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.96.59.56 为查看svc时获取到的clusterip</span></span><br><span class="line">curl <span class="string">"10.107.91.153:80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 32223 为查看svc时获取到的 nodeport</span></span><br><span class="line">http://11.11.11.111:32223/</span><br><span class="line">http://11.11.11.112:32223/</span><br><span class="line">http://11.11.11.113:32223/</span><br></pre></td></tr></table></figure><h4 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://jimmysong.io/kubernetes-handbook/practice/install-kubernetes-on-centos.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/practice/install-kubernetes-on-centos.html</a></li><li><a href="https://zhangguanzhang.github.io/2018/05/05/Kubernetes_install/" target="_blank" rel="noopener">https://zhangguanzhang.github.io/2018/05/05/Kubernetes_install/</a></li><li><a href="https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/</a></li><li><a href="https://kairen.github.io/2018/04/05/kubernetes/deploy/manual-v1.10/" target="_blank" rel="noopener">https://kairen.github.io/2018/04/05/kubernetes/deploy/manual-v1.10/</a></li><li><a href="http://www.maogx.win/posts/7/" target="_blank" rel="noopener">http://www.maogx.win/posts/7/</a></li><li><a href="https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/</a></li><li><a href="https://kubernetes-v1-4.github.io/docs/user-guide/kubectl/kubectl_label/" target="_blank" rel="noopener">https://kubernetes-v1-4.github.io/docs/user-guide/kubectl/kubectl_label/</a></li><li><a href="https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/</a></li><li><a href="https://github.com/gjmzj/kubeasz" target="_blank" rel="noopener">https://github.com/gjmzj/kubeasz</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes基础概念总结</title>
      <link href="/posts/34/"/>
      <url>/posts/34/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>kubernetes</code>是由google主导开发的开源容器管理平台，提供多主机集群，容器编排，容器伸缩等功能</p><a id="more"></a><h3 id="基础组件介绍"><a href="#基础组件介绍" class="headerlink" title="基础组件介绍"></a>基础组件介绍</h3><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><p>容器运行环境的一种实现，封装底层容器</p><h4 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h4><p><code>etcd</code>是<code>kubernetes</code>集群用来存储集群相关数据的数据仓库</p><h4 id="master节点组件"><a href="#master节点组件" class="headerlink" title="master节点组件"></a>master节点组件</h4><p><code>master</code>节点是主集群中的大脑，负责处理外部的api请求，分配调度任务以及管理容器的副本数等</p><h5 id="kube-apiserver"><a href="#kube-apiserver" class="headerlink" title="kube-apiserver"></a>kube-apiserver</h5><ul><li><code>kubernetes</code>对外的服务入口，其他组件通信的纽带，服务无状态，可水平扩容</li></ul><h5 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h5><ul><li>负责pod的任务调度</li></ul><h5 id="kube-controller-manager"><a href="#kube-controller-manager" class="headerlink" title="kube-controller-manager"></a>kube-controller-manager</h5><ul><li>处理<code>node</code>节点当机情况</li><li>负责保证pod的副本数</li><li>管理endpoint，连接service和pod</li><li>为新namespace创建默认api token和accounts</li></ul><h4 id="node节点组件"><a href="#node节点组件" class="headerlink" title="node节点组件"></a>node节点组件</h4><p><code>node</code>节点负责干活，执行<code>master</code>节点指派的相关任务</p><h5 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h5><ul><li>负责启动停止容器，保证容器运行。</li></ul><h5 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h5><ul><li>负责根据service生成网络规则，生成路由规则</li></ul><h4 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h4><blockquote><p>架构图</p></blockquote><p><img src="/posts/34/k8s-arch.png" alt=""></p><p>组件间的通信全依赖于<code>kube-apiserver</code>，其他组件通过http协议与<code>kube-apiserver</code>交互。</p><p>当使用kubectl或者直接调用<code>kube-apiserver</code>提供的api请求创建pod里和service时工作流程如下：</p><ul><li><code>kube-apiserver</code>把相关的pod和service配置存储到<code>etcd</code>中</li><li><code>kube-scheduler</code>从<code>kube-apiserver</code>获取到相关pod的配置，根据集群中的资源和条件限制把pod调度到相应的<code>node</code>节点上</li><li><code>kube-controller-manager</code>从<code>kube-apiserver</code>获取到相关pod和service的配置，定期检查pod的状态，保证有用户配置的足够数量的pod副本在运行，生成service到pod的规则关系。</li><li><code>kubelet</code>从<code>kube-apiserver</code>获取分配到本节点的相关pod配置，在本地启动容器并定期检查返回容器状态</li><li><code>kube-proxy</code>从<code>kube-apiserver</code>获取service到pod的规则，在本节点维护<code>iptable</code>或者<code>ipvs</code>相关路由规则</li></ul><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h4 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h4><ul><li><code>kubernetes</code>的最小调度单元，一个pod中可以有多个容器，多个容器共享网络和存储卷</li></ul><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><ul><li><code>kubernetes</code>抽象出来一个概念，可以理解为负载均衡器，后端接pod</li></ul><h4 id="cluster-ip"><a href="#cluster-ip" class="headerlink" title="cluster ip"></a>cluster ip</h4><ul><li>service在集群中的ip，相当负载均衡器的ip</li></ul><h4 id="ingress"><a href="#ingress" class="headerlink" title="ingress"></a>ingress</h4><ul><li>对集群外部暴露集群内部service的一种方式</li></ul><h4 id="nodeport"><a href="#nodeport" class="headerlink" title="nodeport"></a>nodeport</h4><ul><li>对集群外部暴露服务的第二种方式，跟随service配置，让集群中的<code>node</code>节点都监听相应的端口，可以通过<code>node</code>节点访问集群内部service</li></ul><h4 id="loadbalancer"><a href="#loadbalancer" class="headerlink" title="loadbalancer"></a>loadbalancer</h4><ul><li>对集群外部暴露集群内部service的一种方式，一般只有在云平台才能使用</li></ul><h4 id="deployment"><a href="#deployment" class="headerlink" title="deployment"></a>deployment</h4><ul><li>封装了<code>pod/replicaset</code>，可以实现指定pod副本数量，滚动更新，扩容pod，一般一个应用（服务）一个<code>deployment</code></li></ul><h4 id="statefullSet"><a href="#statefullSet" class="headerlink" title="statefullSet"></a>statefullSet</h4><ul><li>相当于有状态服务的<code>deployment</code>，重启后，主机名和pod的名称不会改变</li></ul><h4 id="daemonSet"><a href="#daemonSet" class="headerlink" title="daemonSet"></a>daemonSet</h4><ul><li>在每个<code>node</code>节点都需要运行的pod可以使用<code>daemonSet</code></li></ul><h4 id="job"><a href="#job" class="headerlink" title="job"></a>job</h4><ul><li>一次性任务</li></ul><h4 id="cronJob"><a href="#cronJob" class="headerlink" title="cronJob"></a>cronJob</h4><ul><li>类似于<code>crontab</code>定时执行任务</li></ul><h4 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h4><ul><li><code>kube-dns/coredns</code>提供集群中的dns服务，可以解析service到<code>cluster ip</code>，实现服务发现</li></ul><h4 id="pv"><a href="#pv" class="headerlink" title="pv"></a>pv</h4><ul><li>管理员用来提前创建好的存储空间，供用户申请使用</li></ul><h4 id="pvc"><a href="#pvc" class="headerlink" title="pvc"></a>pvc</h4><ul><li>用户用来申请存储空间</li></ul><h4 id="storageClass"><a href="#storageClass" class="headerlink" title="storageClass"></a>storageClass</h4><ul><li>定义存储类供pvc使用，当用户通过pvc并指定<code>storageClass</code>请求pv时<code>kubernetes</code>可以根据<code>storageClass</code>动态创建pv</li></ul><h3 id="排错技巧"><a href="#排错技巧" class="headerlink" title="排错技巧"></a>排错技巧</h3><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><h5 id="查看pod日志"><a href="#查看pod日志" class="headerlink" title="查看pod日志"></a>查看pod日志</h5><ul><li>kubectl logs pod-name</li></ul><h5 id="查看事件"><a href="#查看事件" class="headerlink" title="查看事件"></a>查看事件</h5><ul><li>kubectl describe pod-name</li></ul><h5 id="查看docker日志"><a href="#查看docker日志" class="headerlink" title="查看docker日志"></a>查看docker日志</h5><ul><li><p>通过<code>kubectl get pod -o wide</code>找到容器运行的<code>node</code>节点</p></li><li><p>在<code>node</code>节点上通过<code>docker ps -a</code>找到出错的容器</p></li><li><p>docker logs container-id</p></li></ul><h5 id="查看kubelet及其他组件日志"><a href="#查看kubelet及其他组件日志" class="headerlink" title="查看kubelet及其他组件日志"></a>查看kubelet及其他组件日志</h5><ul><li>journalctl -u kubelet</li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7使用kubeadm安装k8s-1.11版本多主高可用</title>
      <link href="/posts/33/"/>
      <url>/posts/33/</url>
      
        <content type="html"><![CDATA[<h3 id="实验环境说明"><a href="#实验环境说明" class="headerlink" title="实验环境说明"></a>实验环境说明</h3><h4 id="实验架构图"><a href="#实验架构图" class="headerlink" title="实验架构图"></a>实验架构图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lab1: etcd master haproxy keepalived 11.11.11.111</span><br><span class="line">lab2: etcd master haproxy keepalived 11.11.11.112</span><br><span class="line">lab3: etcd master haproxy keepalived 11.11.11.113</span><br><span class="line">lab4: node  11.11.11.114</span><br><span class="line">lab5: node  11.11.11.115</span><br><span class="line">lab6: node  11.11.11.116</span><br><span class="line"></span><br><span class="line">vip(loadblancer ip): 11.11.11.110</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="实验使用的Vagrantfile"><a href="#实验使用的Vagrantfile" class="headerlink" title="实验使用的Vagrantfile"></a>实验使用的<code>Vagrantfile</code></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">6</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      config.vm.define <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"11.11.11.11<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          <span class="symbol">inline:</span> <span class="string">"echo hello from node <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">          v.cpus = <span class="number">2</span></span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--name"</span>, <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><h3 id="安装配置docker"><a href="#安装配置docker" class="headerlink" title="安装配置docker"></a>安装配置docker</h3><blockquote><p>v1.11.0版本推荐使用docker v17.03,<br>v1.11,v1.12,v1.13, 也可以使用，再高版本的docker可能无法正常使用。<br>测试发现17.09无法正常使用，不能使用资源限制(内存CPU)</p><p>如下操作在所有节点操作</p></blockquote><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载安装指定版本docker-ce</span></span><br><span class="line">yum remove -y docker-ce docker-ce-selinux container-selinux</span><br><span class="line">yum install -y --<span class="built_in">setopt</span>=obsoletes=0 \</span><br><span class="line">docker-ce-17.03.1.ce-1.el7.centos \</span><br><span class="line">docker-ce-selinux-17.03.1.ce-1.el7.centos</span><br></pre></td></tr></table></figure><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="安装-kubeadm-kubelet-和-kubectl"><a href="#安装-kubeadm-kubelet-和-kubectl" class="headerlink" title="安装 kubeadm, kubelet 和 kubectl"></a>安装 kubeadm, kubelet 和 kubectl</h3><blockquote><p>如下操作在所有节点操作</p></blockquote><h4 id="使用阿里镜像安装"><a href="#使用阿里镜像安装" class="headerlink" title="使用阿里镜像安装"></a>使用阿里镜像安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置源</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y kubelet-1.11.2 kubeadm-1.11.2 kubectl-1.11.2 ipvsadm</span><br></pre></td></tr></table></figure><h3 id="配置系统相关参数"><a href="#配置系统相关参数" class="headerlink" title="配置系统相关参数"></a>配置系统相关参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时禁用selinux</span></span><br><span class="line"><span class="comment"># 永久关闭 修改/etc/sysconfig/selinux文件设置</span></span><br><span class="line">sed -i <span class="string">'s/SELINUX=permissive/SELINUX=disabled/'</span> /etc/sysconfig/selinux</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时关闭swap</span></span><br><span class="line"><span class="comment"># 永久关闭 注释/etc/fstab文件里swap相关的行</span></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启forward</span></span><br><span class="line"><span class="comment"># Docker从1.13版本开始调整了默认的防火墙规则</span></span><br><span class="line"><span class="comment"># 禁用了iptables filter表中FOWARD链</span></span><br><span class="line"><span class="comment"># 这样会引起Kubernetes集群中跨Node的Pod无法通信</span></span><br><span class="line"></span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置转发相关参数，否则可能会出错</span></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载ipvs相关内核模块</span></span><br><span class="line"><span class="comment"># 如果重新开机，需要重新加载</span></span><br><span class="line">modprobe ip_vs</span><br><span class="line">modprobe ip_vs_rr</span><br><span class="line">modprobe ip_vs_wrr</span><br><span class="line">modprobe ip_vs_sh</span><br><span class="line">modprobe nf_conntrack_ipv4</span><br><span class="line">lsmod | grep ip_vs</span><br></pre></td></tr></table></figure><h3 id="配置hosts解析"><a href="#配置hosts解析" class="headerlink" title="配置hosts解析"></a>配置hosts解析</h3><blockquote><p>如下操作在所有节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt;/etc/hosts&lt;&lt;EOF</span><br><span class="line">11.11.11.111 lab1</span><br><span class="line">11.11.11.112 lab2</span><br><span class="line">11.11.11.113 lab3</span><br><span class="line">11.11.11.114 lab4</span><br><span class="line">11.11.11.115 lab5</span><br><span class="line">11.11.11.116 lab6</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="配置haproxy代理和keepalived"><a href="#配置haproxy代理和keepalived" class="headerlink" title="配置haproxy代理和keepalived"></a>配置haproxy代理和keepalived</h3><blockquote><p>如下操作在节点<code>lab1,lab2,lab3</code>操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取haproxy镜像</span></span><br><span class="line">docker pull haproxy:1.7.8-alpine</span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line">cat &gt;/etc/haproxy/haproxy.cfg&lt;&lt;EOF</span><br><span class="line">global</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  uid 99</span><br><span class="line">  gid 99</span><br><span class="line">  <span class="comment">#daemon</span></span><br><span class="line">  nbproc 1</span><br><span class="line">  pidfile haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  retries 3</span><br><span class="line">  timeout connect 5s</span><br><span class="line">  timeout client 30s</span><br><span class="line">  timeout server 30s</span><br><span class="line">  timeout check 2s</span><br><span class="line"></span><br><span class="line">listen admin_stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:1080</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  stats refresh 30s</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats realm   Haproxy\ Statistics</span><br><span class="line">  stats auth    will:will</span><br><span class="line">  stats hide-version</span><br><span class="line">  stats admin <span class="keyword">if</span> TRUE</span><br><span class="line"></span><br><span class="line">frontend k8s-https</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:8443</span><br><span class="line">  mode tcp</span><br><span class="line">  <span class="comment">#maxconn 50000</span></span><br><span class="line">  default_backend k8s-https</span><br><span class="line"></span><br><span class="line">backend k8s-https</span><br><span class="line">  mode tcp</span><br><span class="line">  balance roundrobin</span><br><span class="line">  server lab1 11.11.11.111:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab2 11.11.11.112:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab3 11.11.11.113:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动haproxy</span></span><br><span class="line">docker run -d --name my-haproxy \</span><br><span class="line">-v /etc/haproxy:/usr/<span class="built_in">local</span>/etc/haproxy:ro \</span><br><span class="line">-p 8443:8443 \</span><br><span class="line">-p 1080:1080 \</span><br><span class="line">--restart always \</span><br><span class="line">haproxy:1.7.8-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker logs my-haproxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器查看状态</span></span><br><span class="line">http://11.11.11.111:1080/haproxy-status</span><br><span class="line">http://11.11.11.112:1080/haproxy-status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取keepalived镜像</span></span><br><span class="line">docker pull osixia/keepalived:1.4.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="comment"># 载入内核相关模块</span></span><br><span class="line">lsmod | grep ip_vs</span><br><span class="line">modprobe ip_vs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动keepalived</span></span><br><span class="line"><span class="comment"># eth1为本次实验11.11.11.0/24网段的所在网卡</span></span><br><span class="line">docker run --net=host --<span class="built_in">cap</span>-add=NET_ADMIN \</span><br><span class="line">-e KEEPALIVED_INTERFACE=eth1 \</span><br><span class="line">-e KEEPALIVED_VIRTUAL_IPS=<span class="string">"#PYTHON2BASH:['11.11.11.110']"</span> \</span><br><span class="line">-e KEEPALIVED_UNICAST_PEERS=<span class="string">"#PYTHON2BASH:['11.11.11.111','11.11.11.112','11.11.11.113']"</span> \</span><br><span class="line">-e KEEPALIVED_PASSWORD=hello \</span><br><span class="line">--name k8s-keepalived \</span><br><span class="line">--restart always \</span><br><span class="line">-d osixia/keepalived:1.4.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line"><span class="comment"># 会看到两个成为backup 一个成为master</span></span><br><span class="line">docker logs k8s-keepalived</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时会配置 11.11.11.110 到其中一台机器</span></span><br><span class="line"><span class="comment"># ping测试</span></span><br><span class="line">ping -c4 11.11.11.110</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果失败后清理后，重新实验</span></span><br><span class="line">docker rm -f k8s-keepalived</span><br><span class="line">ip a del 11.11.11.110/32 dev eth1</span><br></pre></td></tr></table></figure><h3 id="配置启动kubelet"><a href="#配置启动kubelet" class="headerlink" title="配置启动kubelet"></a>配置启动kubelet</h3><blockquote><p>如下操作在所有节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置kubelet使用国内pause镜像</span></span><br><span class="line"><span class="comment"># 配置kubelet的cgroups</span></span><br><span class="line"><span class="comment"># 获取docker的cgroups</span></span><br><span class="line">DOCKER_CGROUPS=$(docker info | grep <span class="string">'Cgroup'</span> | cut -d<span class="string">' '</span> -f3)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$DOCKER_CGROUPS</span></span><br><span class="line">cat &gt;/etc/sysconfig/kubelet&lt;&lt;EOF</span><br><span class="line">KUBELET_EXTRA_ARGS=<span class="string">"--cgroup-driver=<span class="variable">$DOCKER_CGROUPS</span> --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure><h3 id="配置master"><a href="#配置master" class="headerlink" title="配置master"></a>配置master</h3><h4 id="配置第一个master节点"><a href="#配置第一个master节点" class="headerlink" title="配置第一个master节点"></a>配置第一个master节点</h4><blockquote><p>如下操作在<code>lab1</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.11.0 版本 centos 下使用 ipvs 模式会出问题</span></span><br><span class="line"><span class="comment"># 参考 https://github.com/kubernetes/kubernetes/issues/65461</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">CP0_IP=<span class="string">"11.11.11.111"</span></span><br><span class="line">CP0_HOSTNAME=<span class="string">"lab1"</span></span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.2</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- <span class="string">"lab1"</span></span><br><span class="line">- <span class="string">"lab2"</span></span><br><span class="line">- <span class="string">"lab3"</span></span><br><span class="line">- <span class="string">"11.11.11.111"</span></span><br><span class="line">- <span class="string">"11.11.11.112"</span></span><br><span class="line">- <span class="string">"11.11.11.113"</span></span><br><span class="line">- <span class="string">"11.11.11.110"</span></span><br><span class="line">- <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: <span class="variable">$CP0_IP</span></span><br><span class="line">  controlPlaneEndpoint: 11.11.11.110:8443</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    extraArgs:</span><br><span class="line">      listen-client-urls: <span class="string">"https://127.0.0.1:2379,https://<span class="variable">$CP0_IP</span>:2379"</span></span><br><span class="line">      advertise-client-urls: <span class="string">"https://<span class="variable">$CP0_IP</span>:2379"</span></span><br><span class="line">      listen-peer-urls: <span class="string">"https://<span class="variable">$CP0_IP</span>:2380"</span></span><br><span class="line">      initial-advertise-peer-urls: <span class="string">"https://<span class="variable">$CP0_IP</span>:2380"</span></span><br><span class="line">      initial-cluster: <span class="string">"<span class="variable">$CP0_HOSTNAME</span>=https://<span class="variable">$CP0_IP</span>:2380"</span></span><br><span class="line">    serverCertSANs:</span><br><span class="line">      - <span class="variable">$CP0_HOSTNAME</span></span><br><span class="line">      - <span class="variable">$CP0_IP</span></span><br><span class="line">    peerCertSANs:</span><br><span class="line">      - <span class="variable">$CP0_HOSTNAME</span></span><br><span class="line">      - <span class="variable">$CP0_IP</span></span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">  </span><br><span class="line">kubeProxy:</span><br><span class="line">  config:</span><br><span class="line">    <span class="comment"># mode: ipvs</span></span><br><span class="line">    mode: iptables</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提前拉取镜像</span></span><br><span class="line"><span class="comment"># 如果执行失败 可以多次执行</span></span><br><span class="line">kubeadm config images pull --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="comment"># 注意保存返回的 join 命令</span></span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包ca相关文件上传至其他master节点</span></span><br><span class="line"><span class="built_in">cd</span> /etc/kubernetes &amp;&amp; tar cvzf k8s-key.tgz admin.conf pki/ca.* pki/sa.* pki/front-proxy-ca.* pki/etcd/ca.*</span><br><span class="line">scp k8s-key.tgz lab2:~/</span><br><span class="line">scp k8s-key.tgz lab3:~/</span><br><span class="line">ssh lab2 <span class="string">'tar xf k8s-key.tgz -C /etc/kubernetes/'</span></span><br><span class="line">ssh lab3 <span class="string">'tar xf k8s-key.tgz -C /etc/kubernetes/'</span></span><br></pre></td></tr></table></figure><h4 id="配置第二个master节点"><a href="#配置第二个master节点" class="headerlink" title="配置第二个master节点"></a>配置第二个master节点</h4><blockquote><p>如下操作在<code>lab2</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.11.0 版本 centos 下使用 ipvs 模式会出问题</span></span><br><span class="line"><span class="comment"># 参考 https://github.com/kubernetes/kubernetes/issues/65461</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">CP0_IP=<span class="string">"11.11.11.111"</span></span><br><span class="line">CP0_HOSTNAME=<span class="string">"lab1"</span></span><br><span class="line">CP1_IP=<span class="string">"11.11.11.112"</span></span><br><span class="line">CP1_HOSTNAME=<span class="string">"lab2"</span></span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.2</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- <span class="string">"lab1"</span></span><br><span class="line">- <span class="string">"lab2"</span></span><br><span class="line">- <span class="string">"lab3"</span></span><br><span class="line">- <span class="string">"11.11.11.111"</span></span><br><span class="line">- <span class="string">"11.11.11.112"</span></span><br><span class="line">- <span class="string">"11.11.11.113"</span></span><br><span class="line">- <span class="string">"11.11.11.110"</span></span><br><span class="line">- <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: <span class="variable">$CP1_IP</span></span><br><span class="line">  controlPlaneEndpoint: 11.11.11.110:8443</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    extraArgs:</span><br><span class="line">      listen-client-urls: <span class="string">"https://127.0.0.1:2379,https://<span class="variable">$CP1_IP</span>:2379"</span></span><br><span class="line">      advertise-client-urls: <span class="string">"https://<span class="variable">$CP1_IP</span>:2379"</span></span><br><span class="line">      listen-peer-urls: <span class="string">"https://<span class="variable">$CP1_IP</span>:2380"</span></span><br><span class="line">      initial-advertise-peer-urls: <span class="string">"https://<span class="variable">$CP1_IP</span>:2380"</span></span><br><span class="line">      initial-cluster: <span class="string">"<span class="variable">$CP0_HOSTNAME</span>=https://<span class="variable">$CP0_IP</span>:2380,<span class="variable">$CP1_HOSTNAME</span>=https://<span class="variable">$CP1_IP</span>:2380"</span></span><br><span class="line">      initial-cluster-state: existing</span><br><span class="line">    serverCertSANs:</span><br><span class="line">      - <span class="variable">$CP1_HOSTNAME</span></span><br><span class="line">      - <span class="variable">$CP1_IP</span></span><br><span class="line">    peerCertSANs:</span><br><span class="line">      - <span class="variable">$CP1_HOSTNAME</span></span><br><span class="line">      - <span class="variable">$CP1_IP</span></span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">  </span><br><span class="line">kubeProxy:</span><br><span class="line">  config:</span><br><span class="line">    <span class="comment"># mode: ipvs</span></span><br><span class="line">    mode: iptables</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubelet</span></span><br><span class="line">kubeadm alpha phase certs all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubelet config write-to-disk --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubelet write-env-file --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubeconfig kubelet --config kubeadm-master.config</span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加etcd到集群中</span></span><br><span class="line">CP0_IP=<span class="string">"11.11.11.111"</span></span><br><span class="line">CP0_HOSTNAME=<span class="string">"lab1"</span></span><br><span class="line">CP1_IP=<span class="string">"11.11.11.112"</span></span><br><span class="line">CP1_HOSTNAME=<span class="string">"lab2"</span></span><br><span class="line">KUBECONFIG=/etc/kubernetes/admin.conf kubectl <span class="built_in">exec</span> -n kube-system etcd-<span class="variable">$&#123;CP0_HOSTNAME&#125;</span> -- etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --endpoints=https://<span class="variable">$&#123;CP0_IP&#125;</span>:2379 member add <span class="variable">$&#123;CP1_HOSTNAME&#125;</span> https://<span class="variable">$&#123;CP1_IP&#125;</span>:2380</span><br><span class="line">kubeadm alpha phase etcd <span class="built_in">local</span> --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提前拉取镜像</span></span><br><span class="line"><span class="comment"># 如果执行失败 可以多次执行</span></span><br><span class="line">kubeadm config images pull --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubeadm alpha phase kubeconfig all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase controlplane all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase mark-master --config kubeadm-master.config</span><br></pre></td></tr></table></figure><h4 id="配置第三个master节点"><a href="#配置第三个master节点" class="headerlink" title="配置第三个master节点"></a>配置第三个master节点</h4><blockquote><p>如下操作在<code>lab3</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.11.0 版本 centos 下使用 ipvs 模式会出问题</span></span><br><span class="line"><span class="comment"># 参考 https://github.com/kubernetes/kubernetes/issues/65461</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">CP0_IP=<span class="string">"11.11.11.111"</span></span><br><span class="line">CP0_HOSTNAME=<span class="string">"lab1"</span></span><br><span class="line">CP1_IP=<span class="string">"11.11.11.112"</span></span><br><span class="line">CP1_HOSTNAME=<span class="string">"lab2"</span></span><br><span class="line">CP2_IP=<span class="string">"11.11.11.113"</span></span><br><span class="line">CP2_HOSTNAME=<span class="string">"lab3"</span></span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.2</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- <span class="string">"lab1"</span></span><br><span class="line">- <span class="string">"lab2"</span></span><br><span class="line">- <span class="string">"lab3"</span></span><br><span class="line">- <span class="string">"11.11.11.111"</span></span><br><span class="line">- <span class="string">"11.11.11.112"</span></span><br><span class="line">- <span class="string">"11.11.11.113"</span></span><br><span class="line">- <span class="string">"11.11.11.110"</span></span><br><span class="line">- <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: <span class="variable">$CP2_IP</span></span><br><span class="line">  controlPlaneEndpoint: 11.11.11.110:8443</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    extraArgs:</span><br><span class="line">      listen-client-urls: <span class="string">"https://127.0.0.1:2379,https://<span class="variable">$CP2_IP</span>:2379"</span></span><br><span class="line">      advertise-client-urls: <span class="string">"https://<span class="variable">$CP2_IP</span>:2379"</span></span><br><span class="line">      listen-peer-urls: <span class="string">"https://<span class="variable">$CP2_IP</span>:2380"</span></span><br><span class="line">      initial-advertise-peer-urls: <span class="string">"https://<span class="variable">$CP2_IP</span>:2380"</span></span><br><span class="line">      initial-cluster: <span class="string">"<span class="variable">$CP0_HOSTNAME</span>=https://<span class="variable">$CP0_IP</span>:2380,<span class="variable">$CP1_HOSTNAME</span>=https://<span class="variable">$CP1_IP</span>:2380,<span class="variable">$CP2_HOSTNAME</span>=https://<span class="variable">$CP2_IP</span>:2380"</span></span><br><span class="line">      initial-cluster-state: existing</span><br><span class="line">    serverCertSANs:</span><br><span class="line">      - <span class="variable">$CP2_HOSTNAME</span></span><br><span class="line">      - <span class="variable">$CP2_IP</span></span><br><span class="line">    peerCertSANs:</span><br><span class="line">      - <span class="variable">$CP2_HOSTNAME</span></span><br><span class="line">      - <span class="variable">$CP2_IP</span></span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">  </span><br><span class="line">kubeProxy:</span><br><span class="line">  config:</span><br><span class="line">    <span class="comment"># mode: ipvs</span></span><br><span class="line">    mode: iptables</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubelet</span></span><br><span class="line">kubeadm alpha phase certs all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubelet config write-to-disk --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubelet write-env-file --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubeconfig kubelet --config kubeadm-master.config</span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加etcd到集群中</span></span><br><span class="line">CP0_IP=<span class="string">"11.11.11.111"</span></span><br><span class="line">CP0_HOSTNAME=<span class="string">"lab1"</span></span><br><span class="line">CP2_IP=<span class="string">"11.11.11.113"</span></span><br><span class="line">CP2_HOSTNAME=<span class="string">"lab3"</span></span><br><span class="line">KUBECONFIG=/etc/kubernetes/admin.conf kubectl <span class="built_in">exec</span> -n kube-system etcd-<span class="variable">$&#123;CP0_HOSTNAME&#125;</span> -- etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --endpoints=https://<span class="variable">$&#123;CP0_IP&#125;</span>:2379 member add <span class="variable">$&#123;CP2_HOSTNAME&#125;</span> https://<span class="variable">$&#123;CP2_IP&#125;</span>:2380</span><br><span class="line">kubeadm alpha phase etcd <span class="built_in">local</span> --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提前拉取镜像</span></span><br><span class="line"><span class="comment"># 如果执行失败 可以多次执行</span></span><br><span class="line">kubeadm config images pull --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubeadm alpha phase kubeconfig all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase controlplane all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase mark-master --config kubeadm-master.config</span><br></pre></td></tr></table></figure><h3 id="配置使用kubectl"><a href="#配置使用kubectl" class="headerlink" title="配置使用kubectl"></a>配置使用kubectl</h3><blockquote><p>如下操作在任意<code>master</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="variable">$HOME</span>/.kube</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看node节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有网络插件也安装配置完成之后，才能会显示为ready状态</span></span><br><span class="line"><span class="comment"># 设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件</span></span><br><span class="line"><span class="comment"># 如 dashboard, heapster, efk等</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><h3 id="配置使用网络插件"><a href="#配置使用网络插件" class="headerlink" title="配置使用网络插件"></a>配置使用网络插件</h3><blockquote><p>如下操作在任意<code>master</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载配置</span></span><br><span class="line">mkdir flannel &amp;&amp; <span class="built_in">cd</span> flannel</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与上面kubeadm的pod-network一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"10.244.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><h3 id="配置node节点加入集群"><a href="#配置node节点加入集群" class="headerlink" title="配置node节点加入集群"></a>配置node节点加入集群</h3><blockquote><p>如下操作在所有<code>node</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此命令为初始化master成功后返回的结果</span></span><br><span class="line">kubeadm join 11.11.11.110:8443 --token yzb7v7.dy40mhlljt1d48i9 --discovery-token-ca-cert-hash sha256:61ec309e6f942305006e6622dcadedcc64420e361231eff23cb535a183c0e77a</span><br></pre></td></tr></table></figure><h3 id="基础测试"><a href="#基础测试" class="headerlink" title="基础测试"></a>基础测试</h3><h4 id="测试容器间的通信和DNS"><a href="#测试容器间的通信和DNS" class="headerlink" title="测试容器间的通信和DNS"></a>测试容器间的通信和DNS</h4><blockquote><p>配置好网络之后，kubeadm会自动部署coredns</p><p>如下测试可以在配置kubectl的节点上操作</p></blockquote><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br></pre></td></tr></table></figure><h5 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure><h5 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h5 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.96.59.56 为查看svc时获取到的clusterip</span></span><br><span class="line">curl <span class="string">"10.96.59.56:80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 32223 为查看svc时获取到的 nodeport</span></span><br><span class="line">http://11.11.11.112:32223/</span><br><span class="line">http://11.11.11.113:32223/</span><br></pre></td></tr></table></figure><h5 id="清理删除"><a href="#清理删除" class="headerlink" title="清理删除"></a>清理删除</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="高可用测试"><a href="#高可用测试" class="headerlink" title="高可用测试"></a>高可用测试</h3><p>关闭任一<code>master</code>节点测试集群是能否正常执行上一步的<code>基础测试</code>，查看相关信息，不能同时关闭两个节点，因为3个节点组成的<code>etcd</code>集群，最多只能有一个当机。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看组件状态</span></span><br><span class="line">kubectl get pod --all-namespaces -o wide</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab1</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab2</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab3</span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">CURL_POD=$(kubectl get pods | grep curl | grep Running | cut -d <span class="string">' '</span> -f1)</span><br><span class="line">kubectl <span class="built_in">exec</span> -ti <span class="variable">$CURL_POD</span> -- sh --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p><strong>忘记初始master节点时的node节点加入集群命令怎么办</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单方法</span></span><br><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方法</span></span><br><span class="line">token=$(kubeadm token generate)</span><br><span class="line">kubeadm token create <span class="variable">$token</span> --<span class="built_in">print</span>-join-command --ttl=0</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/install-kubeadm/</a></li><li><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/</a></li><li><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/</a></li><li><a href="https://kubernetes.io/docs/setup/independent/high-availability/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/high-availability/</a></li><li><a href="https://sealyun.com/post/k8s-ipvs/" target="_blank" rel="noopener">https://sealyun.com/post/k8s-ipvs/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7使用kubeadm安装k8s-1.11版本</title>
      <link href="/posts/32/"/>
      <url>/posts/32/</url>
      
        <content type="html"><![CDATA[<h3 id="实验环境说明"><a href="#实验环境说明" class="headerlink" title="实验环境说明"></a>实验环境说明</h3><h4 id="实验架构"><a href="#实验架构" class="headerlink" title="实验架构"></a>实验架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lab1: master 11.11.11.111</span><br><span class="line">lab2: node 11.11.11.112</span><br><span class="line">lab3: node 11.11.11.113</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="实验使用的Vagrantfile"><a href="#实验使用的Vagrantfile" class="headerlink" title="实验使用的Vagrantfile"></a>实验使用的<code>Vagrantfile</code></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">3</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      config.vm.define <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"11.11.11.11<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          <span class="symbol">inline:</span> <span class="string">"echo hello from node <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">          v.cpus = <span class="number">2</span></span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--name"</span>, <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><h3 id="安装配置docker"><a href="#安装配置docker" class="headerlink" title="安装配置docker"></a>安装配置docker</h3><blockquote><p>v1.11.0版本推荐使用docker v17.03,<br>v1.11,v1.12,v1.13, 也可以使用，再高版本的docker可能无法正常使用。<br>测试发现17.09无法正常使用，不能使用资源限制(内存CPU)</p><p>如下操作在所有节点操作</p></blockquote><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载安装指定版本docker-ce</span></span><br><span class="line">yum remove -y docker-ce docker-ce-selinux container-selinux</span><br><span class="line">yum install -y --<span class="built_in">setopt</span>=obsoletes=0 \</span><br><span class="line">docker-ce-17.03.1.ce-1.el7.centos \</span><br><span class="line">docker-ce-selinux-17.03.1.ce-1.el7.centos</span><br></pre></td></tr></table></figure><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="安装-kubeadm-kubelet-和-kubectl"><a href="#安装-kubeadm-kubelet-和-kubectl" class="headerlink" title="安装 kubeadm, kubelet 和 kubectl"></a>安装 kubeadm, kubelet 和 kubectl</h3><blockquote><p>如下操作在所有节点操作</p></blockquote><h4 id="使用阿里镜像安装"><a href="#使用阿里镜像安装" class="headerlink" title="使用阿里镜像安装"></a>使用阿里镜像安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置源</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y kubelet-1.11.2 kubeadm-1.11.2 kubectl-1.11.2 ipvsadm</span><br></pre></td></tr></table></figure><h3 id="配置系统相关参数"><a href="#配置系统相关参数" class="headerlink" title="配置系统相关参数"></a>配置系统相关参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时禁用selinux</span></span><br><span class="line"><span class="comment"># 永久关闭 修改/etc/sysconfig/selinux文件设置</span></span><br><span class="line">sed -i <span class="string">'s/SELINUX=permissive/SELINUX=disabled/'</span> /etc/sysconfig/selinux</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时关闭swap</span></span><br><span class="line"><span class="comment"># 永久关闭 注释/etc/fstab文件里swap相关的行</span></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启forward</span></span><br><span class="line"><span class="comment"># Docker从1.13版本开始调整了默认的防火墙规则</span></span><br><span class="line"><span class="comment"># 禁用了iptables filter表中FOWARD链</span></span><br><span class="line"><span class="comment"># 这样会引起Kubernetes集群中跨Node的Pod无法通信</span></span><br><span class="line"></span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置转发相关参数，否则可能会出错</span></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载ipvs相关内核模块</span></span><br><span class="line"><span class="comment"># 如果重新开机，需要重新加载</span></span><br><span class="line">modprobe ip_vs</span><br><span class="line">modprobe ip_vs_rr</span><br><span class="line">modprobe ip_vs_wrr</span><br><span class="line">modprobe ip_vs_sh</span><br><span class="line">modprobe nf_conntrack_ipv4</span><br><span class="line">lsmod | grep ip_vs</span><br></pre></td></tr></table></figure><h3 id="配置hosts解析"><a href="#配置hosts解析" class="headerlink" title="配置hosts解析"></a>配置hosts解析</h3><blockquote><p>如下操作在所有节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt;/etc/hosts&lt;&lt;EOF</span><br><span class="line">11.11.11.111 lab1</span><br><span class="line">11.11.11.112 lab2</span><br><span class="line">11.11.11.113 lab3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="配置启动kubelet"><a href="#配置启动kubelet" class="headerlink" title="配置启动kubelet"></a>配置启动kubelet</h3><blockquote><p>如下操作在所有节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置kubelet使用国内pause镜像</span></span><br><span class="line"><span class="comment"># 配置kubelet的cgroups</span></span><br><span class="line"><span class="comment"># 获取docker的cgroups</span></span><br><span class="line">DOCKER_CGROUPS=$(docker info | grep <span class="string">'Cgroup'</span> | cut -d<span class="string">' '</span> -f3)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$DOCKER_CGROUPS</span></span><br><span class="line">cat &gt;/etc/sysconfig/kubelet&lt;&lt;EOF</span><br><span class="line">KUBELET_EXTRA_ARGS=<span class="string">"--cgroup-driver=<span class="variable">$DOCKER_CGROUPS</span> --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure><h3 id="配置master节点"><a href="#配置master节点" class="headerlink" title="配置master节点"></a>配置master节点</h3><blockquote><p>如下操作在<code>master</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.11.0 版本 centos 下使用 ipvs 模式会出问题</span></span><br><span class="line"><span class="comment"># 参考 https://github.com/kubernetes/kubernetes/issues/65461</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.2</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: 11.11.11.111</span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">  </span><br><span class="line">kubeProxy:</span><br><span class="line">  config:</span><br><span class="line">    mode: ipvs</span><br><span class="line">    <span class="comment"># mode: iptables</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提前拉取镜像</span></span><br><span class="line"><span class="comment"># 如果执行失败 可以多次执行</span></span><br><span class="line">kubeadm config images pull --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br></pre></td></tr></table></figure><h3 id="配置使用kubectl"><a href="#配置使用kubectl" class="headerlink" title="配置使用kubectl"></a>配置使用kubectl</h3><blockquote><p>如下操作在<code>master</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="variable">$HOME</span>/.kube</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看node节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有网络插件也安装配置完成之后，才能会显示为ready状态</span></span><br><span class="line"><span class="comment"># 设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件</span></span><br><span class="line"><span class="comment"># 如 dashboard, heapster, efk等</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><h3 id="配置使用网络插件"><a href="#配置使用网络插件" class="headerlink" title="配置使用网络插件"></a>配置使用网络插件</h3><blockquote><p>如下操作在<code>master</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载配置</span></span><br><span class="line">mkdir flannel &amp;&amp; <span class="built_in">cd</span> flannel</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与上面kubeadm的pod-network一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"10.244.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><h3 id="配置node节点加入集群"><a href="#配置node节点加入集群" class="headerlink" title="配置node节点加入集群"></a>配置node节点加入集群</h3><blockquote><p>如下操作在所有<code>node</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此命令为初始化master成功后返回的结果</span></span><br><span class="line">kubeadm join 11.11.11.111:6443 --token yl53pn.wpx4mvx6a6jfkjhw --discovery-token-ca-cert-hash sha256:17751fcda3e79da63f5d0c4a3586e97de8b8b1d017c1a6977c88136409af5240</span><br></pre></td></tr></table></figure><h3 id="测试容器间的通信和DNS"><a href="#测试容器间的通信和DNS" class="headerlink" title="测试容器间的通信和DNS"></a>测试容器间的通信和DNS</h3><blockquote><p>配置好网络之后，kubeadm会自动部署coredns</p></blockquote><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br></pre></td></tr></table></figure><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure><h4 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.96.59.56 为查看svc时获取到的clusterip</span></span><br><span class="line">curl <span class="string">"10.96.59.56:80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 32223 为查看svc时获取到的 nodeport</span></span><br><span class="line">http://11.11.11.112:32223/</span><br><span class="line">http://11.11.11.113:32223/</span><br></pre></td></tr></table></figure><h4 id="清理删除"><a href="#清理删除" class="headerlink" title="清理删除"></a>清理删除</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p><strong>忘记初始master节点时的node节点加入集群命令怎么办</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单方法</span></span><br><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方法</span></span><br><span class="line">token=$(kubeadm token generate)</span><br><span class="line">kubeadm token create <span class="variable">$token</span> --<span class="built_in">print</span>-join-command --ttl=0</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/install-kubeadm/</a></li><li><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/</a></li><li><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/</a></li><li><a href="https://sealyun.com/post/k8s-ipvs/" target="_blank" rel="noopener">https://sealyun.com/post/k8s-ipvs/</a></li><li><a href="https://blog.frognew.com/2017/12/kubeadm-install-kubernetes-1.9.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/12/kubeadm-install-kubernetes-1.9.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio-0.8长期支持版微服务实验</title>
      <link href="/posts/31/"/>
      <url>/posts/31/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本实验通过在k8s上部署istio，实现微服务的基础功能。其中会涉及到服务的限流，超时，熔断，降级，流量分隔，A/B测试等功能。实验之前需要安装k8s和istio，请参考之前文章。注意开启istio的自动注入功能，并在 default namespace 启用自动注入功能。</p><a id="more"></a><p>本实验的服务间调用关系如下：</p><blockquote><p>本实验采用时下流行的前后端分离模式</p><p>前端项目基于vue/react实现</p><p>前端调用python实现的API接口</p><p>python服务调用后端node实现的服务和lua实现的服务</p><p>node服务调用go实现的服务</p><ul><li>—-&gt;service-js</li><li>—-&gt;service-python<ul><li>—-&gt;service-lua</li><li>—-&gt;service-node<ul><li>—-&gt;service-go</li></ul></li></ul></li></ul></blockquote><p>本实验使用的语言技术栈：</p><ul><li>vue/react</li><li>python2/3</li><li>node8/10</li><li>openresty1.11 /1.13</li><li>go1.10/1.9</li></ul><p>架构图如下：</p><p><img src="/posts/31/istio-test-arch2.png" alt=""></p><p><code>istio-0.8</code>版本配置发生很大的变化，由原来的<code>v1alpha1</code>升级到了<code>v1alpha3</code>，主要变化如下</p><ul><li>使用<code>virtualservice</code>和<code>destinationrule</code> 代替原来的<code>routerule</code></li><li>使用<code>gateway</code>代替了原来的<code>ingress</code></li></ul><p>每个<code>virtualservice</code>都要指定要去向哪一个<code>destinationrule</code> ，<code>virtualservice</code>指定访问哪个地址时会使用这个路由，相当于<code>nginx</code>上配置的<code>vhosts</code></p><h3 id="下载实验仓库"><a href="#下载实验仓库" class="headerlink" title="下载实验仓库"></a>下载实验仓库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mgxian/istio-test</span><br><span class="line"><span class="built_in">cd</span> istio-test &amp;&amp; git checkout v2</span><br></pre></td></tr></table></figure><h3 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f service/go/v1/go-v1.yml</span><br><span class="line">kubectl apply -f service/go/v2/go-v2.yml</span><br><span class="line">kubectl apply -f service/python/v1/python-v1.yml</span><br><span class="line">kubectl apply -f service/python/v2/python-v2.yml</span><br><span class="line">kubectl apply -f service/js/v1/js-v1.yml</span><br><span class="line">kubectl apply -f service/js/v2/js-v2.yml</span><br><span class="line">kubectl apply -f service/node/v1/node-v1.yml</span><br><span class="line">kubectl apply -f service/node/v2/node-v2.yml</span><br><span class="line">kubectl apply -f service/lua/v1/lua-v1.yml</span><br><span class="line">kubectl apply -f service/lua/v2/lua-v2.yml</span><br></pre></td></tr></table></figure><h3 id="创建Gateway"><a href="#创建Gateway" class="headerlink" title="创建Gateway"></a>创建Gateway</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用istio提供的Gateway功能</span></span><br><span class="line"><span class="comment"># 暴露js和python服务让k8s集群外部访问</span></span><br><span class="line">istioctl create -f istio/gateway.yml</span><br><span class="line">istioctl create -f istio/gateway-virtualservice.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">istioctl get gateway</span><br><span class="line">istioctl get virtualservice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试访问</span></span><br><span class="line">INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=<span class="string">'&#123;.spec.ports[?(@.name=="http2")].nodePort&#125;'</span>)</span><br><span class="line">NODE_NAME=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">NODE_IP=$(ping -c 1 <span class="variable">$NODE_NAME</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">export</span> GATEWAY_URL=<span class="variable">$NODE_IP</span>:<span class="variable">$INGRESS_PORT</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"curl -I http://<span class="variable">$GATEWAY_URL</span>/"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"curl -I http://<span class="variable">$NODE_IP</span>/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问返回404表示正确</span></span><br></pre></td></tr></table></figure><h3 id="配置测试访问环境"><a href="#配置测试访问环境" class="headerlink" title="配置测试访问环境"></a>配置测试访问环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置hosts解析</span></span><br><span class="line"><span class="comment"># 11.11.11.112为其中一个node的ip</span></span><br><span class="line">11.11.11.112 istio-test.will</span><br><span class="line"></span><br><span class="line">curl -I http://istio-test.will/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用curl</span></span><br><span class="line">curl -I istio-test.will</span><br><span class="line">curl -s istio-test.will | egrep <span class="string">"vue|React"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时如果用浏览器，可能会出会页面显示不正常的情况。</span></span><br><span class="line"><span class="comment"># 因为此时请求会轮流分发到后端js服务的v1/v2版本，因此css/js并不能正常加载</span></span><br></pre></td></tr></table></figure><h3 id="流量管理"><a href="#流量管理" class="headerlink" title="流量管理"></a>流量管理</h3><p>根据请求的信息，把流量路由到服务的不同版本。实验过程如果没有达到预期效果，很有可能是因为存在路由规则冲突，而且没有设置优先级，可以先删除之前设置的路由规则或者把优先级设置高一点。</p><h4 id="把所有流量导向v1版本"><a href="#把所有流量导向v1版本" class="headerlink" title="把所有流量导向v1版本"></a>把所有流量导向v1版本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理之前创建的gateway相关的路由规则</span></span><br><span class="line">istioctl delete -f istio/gateway-virtualservice.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line">istioctl create -f istio/gateway-virtualservice-v1.yml</span><br><span class="line">istioctl create -f istio/route-rule-all-v1.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看路由规则</span></span><br><span class="line">istioctl get virtualservice</span><br><span class="line">istioctl get destinationrule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问浏览器测试</span></span><br><span class="line">http://istio-test.will/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时你会看到react app的界面</span></span><br><span class="line"><span class="comment"># 点击发射按钮，会发送ajax请求到python服务</span></span><br><span class="line"><span class="comment"># 由于把所有流量都导向了v1版本</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮会得到一样的内容</span></span><br><span class="line"><span class="comment"># react-----&gt;Python2.7.15-----&gt;Gogo1.9.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-all-v1.yml</span><br><span class="line">istioctl delete -f istio/gateway-virtualservice-v1.yml</span><br></pre></td></tr></table></figure><h4 id="根据请求把流量导向不同版本（A-B测试）"><a href="#根据请求把流量导向不同版本（A-B测试）" class="headerlink" title="根据请求把流量导向不同版本（A/B测试）"></a>根据请求把流量导向不同版本（A/B测试）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line"><span class="comment"># 根据浏览器的不同返回不同内容</span></span><br><span class="line">istioctl create -f istio/route-rule-js-by-agent.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看路由规则</span></span><br><span class="line">istioctl get virtualservice</span><br><span class="line">istioctl get destinationrule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用访问浏览器</span></span><br><span class="line"><span class="comment"># 如果你用chrome浏览器你会看到react app的界面</span></span><br><span class="line"><span class="comment"># 如果你用firefox浏览器你会看到vue app的界面</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮，会获取到不同的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-js-by-agent.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据前端app不同使用不同版本的python服务</span></span><br><span class="line">istioctl create -f istio/route-rule-python-by-header.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-python-by-header.yml</span><br></pre></td></tr></table></figure><h4 id="根据源服务把流量导向不同版本"><a href="#根据源服务把流量导向不同版本" class="headerlink" title="根据源服务把流量导向不同版本"></a>根据源服务把流量导向不同版本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先创建如下路由方便测试访问</span></span><br><span class="line"><span class="comment"># 根据浏览器的不同返回不同内容</span></span><br><span class="line">istioctl create -f istio/route-rule-js-by-agent.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-by-source.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-js-by-agent.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-by-source.yml</span><br></pre></td></tr></table></figure><h4 id="指定权重进行流量分隔"><a href="#指定权重进行流量分隔" class="headerlink" title="指定权重进行流量分隔"></a>指定权重进行流量分隔</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定权重把流量分隔</span></span><br><span class="line"><span class="comment"># 25%流量路由到v1版本</span></span><br><span class="line"><span class="comment"># 75%流量路由到v2版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先创建如下路由方便测试访问</span></span><br><span class="line"><span class="comment"># 根据浏览器的不同返回不同内容</span></span><br><span class="line">istioctl create -f istio/route-rule-js-by-agent.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-v1-v2.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-js-by-agent.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-v1-v2.yaml</span><br></pre></td></tr></table></figure><h4 id="集群内访问公开服务"><a href="#集群内访问公开服务" class="headerlink" title="集群内访问公开服务"></a>集群内访问公开服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下，启用了istio的服务是无法访问外部url的</span></span><br><span class="line"><span class="comment"># 如果需要访问外部url，需要使用egress进行配置</span></span><br><span class="line"><span class="comment"># egress同样支持设置路由规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http</span></span><br><span class="line">istioctl create -f istio/egress-rule-http-bin.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp</span></span><br><span class="line">istioctl create -f istio/egress-rule-tcp-wikipedia.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">istioctl get serviceentry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 使用exec进入作为测试源使用的pod</span></span><br><span class="line">kubectl apply -f istio/sleep.yaml</span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="built_in">export</span> SOURCE_POD=$(kubectl get pod -l app=sleep -o jsonpath=&#123;.items..metadata.name&#125;)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$SOURCE_POD</span> -c sleep bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># http测试</span></span><br><span class="line">curl http://httpbin.org/headers</span><br><span class="line">curl http://httpbin.org/delay/5</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp测试</span></span><br><span class="line">curl -o /dev/null -s -w <span class="string">"%&#123;http_code&#125;\n"</span> https://www.wikipedia.org</span><br><span class="line">curl -s https://en.wikipedia.org/wiki/Main_Page | grep articlecount | grep <span class="string">'Special:Statistics'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">istioctl delete -f istio/egress-rule-http-bin.yml</span><br><span class="line">istioctl delete -f istio/egress-rule-tcp-wikipedia.yml</span><br><span class="line">kubectl delete -f istio/sleep.yaml</span><br></pre></td></tr></table></figure><h3 id="故障管理"><a href="#故障管理" class="headerlink" title="故障管理"></a>故障管理</h3><ul><li>调用超时设置和重试设置</li><li>故障注入，模拟服务故障</li></ul><h4 id="设置超时时间与模拟服务超时故障"><a href="#设置超时时间与模拟服务超时故障" class="headerlink" title="设置超时时间与模拟服务超时故障"></a>设置超时时间与模拟服务超时故障</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先创建如下路由方便测试访问</span></span><br><span class="line"><span class="comment"># 根据浏览器的不同返回不同内容</span></span><br><span class="line">istioctl create -f istio/route-rule-js-by-agent.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置python服务超时时间</span></span><br><span class="line">istioctl create -f istio/route-rule-node-timeout.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟go服务超时故障</span></span><br><span class="line">istioctl create -f istio/route-rule-go-delay.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用浏览器访问并打开调试面板查看网络标签（按F12键）</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮观察响应时间</span></span><br><span class="line"><span class="comment"># 会看到部分50%的请求会返回500错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-js-by-agent.yml</span><br><span class="line">istioctl delete -f istio/route-rule-node-timeout.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-delay.yml</span><br></pre></td></tr></table></figure><p><img src="/posts/31/istio-timeout-delay-test.png" alt="超时模拟"></p><h4 id="设置重试与模拟服务500故障"><a href="#设置重试与模拟服务500故障" class="headerlink" title="设置重试与模拟服务500故障"></a>设置重试与模拟服务500故障</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先创建如下路由方便测试访问</span></span><br><span class="line"><span class="comment"># 根据浏览器的不同返回不同内容</span></span><br><span class="line">istioctl create -f istio/route-rule-js-by-agent.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置python服务超时时间</span></span><br><span class="line">istioctl create -f istio/route-rule-node-retry.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟go服务超时故障</span></span><br><span class="line">istioctl create -f istio/route-rule-go-abort.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用浏览器访问并打开调试面板查看网络标签（按F12键）</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮观察响应时间</span></span><br><span class="line"><span class="comment"># 会看到部分请求会返回500错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-js-by-agent.yml</span><br><span class="line">istioctl delete -f istio/route-rule-node-retry.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-abort.yml</span><br></pre></td></tr></table></figure><p><img src="/posts/31/istio-retry-abort-test.png" alt="模拟服务500故障"></p><h4 id="超时和服务故障模拟配合使用"><a href="#超时和服务故障模拟配合使用" class="headerlink" title="超时和服务故障模拟配合使用"></a>超时和服务故障模拟配合使用</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有请求延迟5秒钟，然后失败其中的10％</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">  route:</span></span><br><span class="line"><span class="attr">  - labels:</span></span><br><span class="line"><span class="attr">      version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">  httpFault:</span></span><br><span class="line"><span class="attr">    delay:</span></span><br><span class="line"><span class="attr">      fixedDelay:</span> <span class="number">5</span><span class="string">s</span></span><br><span class="line"><span class="attr">    abort:</span></span><br><span class="line"><span class="attr">      percent:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      httpStatus:</span> <span class="number">400</span></span><br></pre></td></tr></table></figure><h4 id="熔断器"><a href="#熔断器" class="headerlink" title="熔断器"></a>熔断器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置熔断规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-cb.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看规则</span></span><br><span class="line">istioctl get destinationrule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试用的fortio</span></span><br><span class="line">kubectl apply -f istio/fortio-deploy.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常访问测试</span></span><br><span class="line">FORTIO_POD=$(kubectl get pod | grep fortio | awk <span class="string">'&#123; print $1 &#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -curl http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试熔断 2并发</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -c 2 -qps 0 -n 20 -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试熔断 3并发</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -c 3 -qps 0 -n 20 -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加并发会看到失败的请求占比增高</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line"><span class="comment"># upstream_rq_pending_overflow 表示被熔断的请求数</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c istio-proxy  -- sh -c <span class="string">'curl localhost:15000/stats'</span> | grep service-go | grep pending</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f istio/fortio-deploy.yaml</span><br><span class="line">istioctl delete -f istio/route-rule-go-cb.yml</span><br></pre></td></tr></table></figure><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p>动态设置服务qps</p><ul><li><a href="https://github.com/istio/istio/blob/master/samples/bookinfo/kube/mixer-rule-ratings-ratelimit.yaml" target="_blank" rel="noopener">https://github.com/istio/istio/blob/master/samples/bookinfo/kube/mixer-rule-ratings-ratelimit.yaml</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 memquota, quota, rule, QuotaSpec, QuotaSpecBinding 启用限速</span></span><br><span class="line"><span class="comment"># 默认设置500qps</span></span><br><span class="line">istioctl create -f istio/ratelimit-handler.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置速率限制实例和规则</span></span><br><span class="line">istioctl create -f istio/ratelimit-rule-service-go.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get memquota -n istio-system</span><br><span class="line">kubectl get quota -n istio-system</span><br><span class="line">kubectl get rule -n istio-system</span><br><span class="line">kubectl get quotaspec -n istio-system</span><br><span class="line">kubectl get quotaspecbinding -n istio-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试用的fortio</span></span><br><span class="line">kubectl apply -f istio/fortio-deploy.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常访问测试</span></span><br><span class="line">FORTIO_POD=$(kubectl get pod | grep fortio | awk <span class="string">'&#123; print $1 &#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -curl http://service-node/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 会出现部分请求不正常</span></span><br><span class="line"><span class="comment"># node 返回 code 500</span></span><br><span class="line"><span class="comment"># go 返回 code 429</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -qps 20 -n 100 -loglevel Warning http://service-node/env</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -qps 50 -n 100 -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">istioctl delete -f istio/ratelimit-handler.yaml</span><br><span class="line">istioctl delete -f istio/ratelimit-rule-service-go.yaml</span><br><span class="line">kubectl delete -f istio/fortio-deploy.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带条件的速率限制</span></span><br><span class="line">apiVersion: config.istio.io/v1alpha2</span><br><span class="line">kind: rule</span><br><span class="line">metadata:</span><br><span class="line"> name: quota</span><br><span class="line"> namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line"> match: source.namespace != destination.namespace</span><br><span class="line"> actions:</span><br><span class="line"> - handler: handler.memquota</span><br><span class="line">   instances:</span><br><span class="line">   - requestcount.quota</span><br></pre></td></tr></table></figure><h3 id="流量镜像"><a href="#流量镜像" class="headerlink" title="流量镜像"></a>流量镜像</h3><p>复制服务的流量到别一个镜像服务，一般用于线上新上服务的测试。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建测试用的fortio</span></span><br><span class="line">kubectl apply -f istio/fortio-deploy.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常访问测试</span></span><br><span class="line">FORTIO_POD=$(kubectl get pod | grep fortio | awk <span class="string">'&#123; print $1 &#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -curl http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看v1的日志</span></span><br><span class="line">kubectl logs -f $(kubectl get pods | grep service-go-v1 | awk <span class="string">'&#123;print $1&#125;'</span>| head -n 1) -c service-go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看v2的日志</span></span><br><span class="line"><span class="comment"># 再开一个终端查看日志</span></span><br><span class="line">kubectl logs -f $(kubectl get pods | grep service-go-v2 | awk <span class="string">'&#123;print $1&#125;'</span>| head -n 1) -c service-go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建镜像规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-mirror.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试多次访问</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -c 10 -qps 0 -t 10s -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f istio/fortio-deploy.yaml</span><br><span class="line">istioctl delete -f istio/route-rule-go-mirror.yml</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除相关deploy和svc</span></span><br><span class="line">kubectl delete -f service/go/v1/go-v1.yml</span><br><span class="line">kubectl delete -f service/go/v2/go-v2.yml</span><br><span class="line">kubectl delete -f service/python/v1/python-v1.yml</span><br><span class="line">kubectl delete -f service/python/v2/python-v2.yml</span><br><span class="line">kubectl delete -f service/js/v1/js-v1.yml</span><br><span class="line">kubectl delete -f service/js/v2/js-v2.yml</span><br><span class="line">kubectl delete -f service/node/v1/node-v1.yml</span><br><span class="line">kubectl delete -f service/node/v2/node-v2.yml</span><br><span class="line">kubectl delete -f service/lua/v1/lua-v1.yml</span><br><span class="line">kubectl delete -f service/lua/v2/lua-v2.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">kubectl delete -f istio/gateway.yml</span><br><span class="line">kubectl delete -f istio/gateway-virtualservice.yml</span><br><span class="line">istioctl delete destinationrule $(istioctl get destinationrule | grep <span class="string">'service-'</span> | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">istioctl delete virtualservice $(istioctl get virtualservice | grep <span class="string">'service-'</span> | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://istio.doczh.cn" target="_blank" rel="noopener">http://istio.doczh.cn</a></li><li><a href="https://istio.io/docs" target="_blank" rel="noopener">https://istio.io/docs</a></li><li><a href="https://istio.io/docs/reference/config/istio.networking.v1alpha3.html" target="_blank" rel="noopener">https://istio.io/docs/reference/config/istio.networking.v1alpha3.html</a></li><li><a href="https://istio.io/docs/reference/config/istio.routing.v1alpha1.html" target="_blank" rel="noopener">https://istio.io/docs/reference/config/istio.routing.v1alpha1.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> service mesh </tag>
            
            <tag> istio </tag>
            
            <tag> k8s </tag>
            
            <tag> microservice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio-0.8长期支持版安装测试</title>
      <link href="/posts/30/"/>
      <url>/posts/30/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>istio</code>是一个<code>service mesh</code>开源实现，由Google/IBM/Lyft共同开发。与之类似的还有<code>conduit</code>，但是功能不如<code>istio</code>丰富稳定。架构图如下：</p><p><img src="/posts/30/istio-arch-0.8.png" alt="istio-arch"> </p><p><code>istio-0.8</code>版本是第一个长期支持版本，相对于之前的版本配置改动较大。<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去下面的地址下载压缩包</span></span><br><span class="line"><span class="comment"># https://github.com/istio/istio/releases</span></span><br><span class="line">wget https://github.com/istio/istio/releases/download/0.8.0/istio-0.8.0-linux.tar.gz</span><br><span class="line">tar xf istio-0.8.0-linux.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用官方的安装脚本安装</span></span><br><span class="line">curl -L https://git.io/getLatestIstio | sh -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装配置环境变量</span></span><br><span class="line">mv istio-0.8.0 /usr/<span class="built_in">local</span>/</span><br><span class="line">ln -sv /usr/<span class="built_in">local</span>/istio-0.8.0 /usr/<span class="built_in">local</span>/istio</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=/usr/local/istio/bin:$PATH'</span> &gt; /etc/profile.d/istio.sh</span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/istio.sh</span><br><span class="line">istioctl version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果环境不是云环境，不支持LoadBalancer</span></span><br><span class="line"><span class="comment"># 作如下修改，使得 ingressgateway 监听在80和443端口</span></span><br><span class="line"><span class="comment"># 修改使用主机端口映射</span></span><br><span class="line"><span class="comment"># 使用此修改版本之后，每台机器只能运行单个实例</span></span><br><span class="line"><span class="comment"># 大概在2661行左右</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line">cp install/kubernetes/istio-demo.yaml install/kubernetes/istio-demo.yaml.ori</span><br><span class="line">vim install/kubernetes/istio-demo.yaml</span><br><span class="line">...</span><br><span class="line"><span class="comment"># Source: istio/charts/ingressgateway/templates/deployment.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line"><span class="comment"># kind: Deployment</span></span><br><span class="line"><span class="comment"># 使用DaemonSet部署方式</span></span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: istio-ingressgateway</span><br><span class="line">  namespace: istio-system</span><br><span class="line">  labels:</span><br><span class="line">    app: ingressgateway</span><br><span class="line">    chart: ingressgateway-0.8.0</span><br><span class="line">    release: RELEASE-NAME</span><br><span class="line">    heritage: Tiller</span><br><span class="line">    istio: ingressgateway</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># DaemonSet不支持replicas</span></span><br><span class="line">  <span class="comment"># replicas: </span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        istio: ingressgateway</span><br><span class="line">      annotations:</span><br><span class="line">        sidecar.istio.io/inject: <span class="string">"false"</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: istio-ingressgateway-service-account</span><br><span class="line">      containers:</span><br><span class="line">        - name: ingressgateway</span><br><span class="line">          image: <span class="string">"docker.io/istio/proxyv2:0.8.0"</span></span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">              <span class="comment">#主机80端口映射</span></span><br><span class="line">              hostPort: 80</span><br><span class="line">            - containerPort: 443</span><br><span class="line">              <span class="comment">#主机443端口映射</span></span><br><span class="line">              hostPort: 443</span><br><span class="line">            - containerPort: 31400</span><br><span class="line">              <span class="comment">#主机443端口映射</span></span><br><span class="line">              hostPort: 31400</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于镜像问题，提前拉取镜像</span></span><br><span class="line"><span class="comment"># 在所有节点上执行如下命令输出的命令</span></span><br><span class="line"><span class="comment"># 可能会失败，需要多次执行</span></span><br><span class="line">image=$(grep <span class="string">'quay.io/coreos/hyperkube'</span> install/kubernetes/istio-demo.yaml | head -1 | awk <span class="string">'&#123;print $2&#125;'</span> | tr -d <span class="string">'"'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"docker pull <span class="variable">$image</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下两种选择一种安装方式</span></span><br><span class="line"><span class="comment"># 安装不使用认证（不使用tls）</span></span><br><span class="line">kubectl apply -f install/kubernetes/istio-demo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装使用认证（使用tls）</span></span><br><span class="line">kubectl apply -f install/kubernetes/istio-demo-auth.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get svc -n istio-system</span><br><span class="line">kubectl get pods -n istio-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"curl -I http://<span class="variable">$nodeIP</span>"</span></span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p><code>istio-0.8.0</code> 默认已经开启了自动注入功能以及其他日志监控和追踪的相关组件如</p><ul><li>istio-tracing</li><li>istio-telemetry</li><li>grafana</li><li>prometheus</li><li>servicegraph</li></ul></blockquote><h3 id="启用自动注入-sidecar"><a href="#启用自动注入-sidecar" class="headerlink" title="启用自动注入 sidecar"></a>启用自动注入 sidecar</h3><ul><li><p>不开启自动注入部署应用需要使用如下方式的命令</p><p><code>kubectl apply -f &lt;(istioctl kube-inject -f samples/bookinfo/kube/bookinfo.yaml)</code></p></li><li><p>开启自动注入后，使用正常命令即可部署应用</p><p><code>kubectl apply -f samples/bookinfo/kube/bookinfo.yaml</code></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># istio-0.8.0默认已经开启了自动注入功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s 1.9 及之后的版本才能使用自动注入功能</span></span><br><span class="line"><span class="comment"># 查看是否支持</span></span><br><span class="line">kubectl api-versions | grep admissionregistration</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除了要满足以上条件外还需要检查kube-apiserver启动的参数</span></span><br><span class="line"><span class="comment"># k8s 1.9 版本要确保 --admission-control 里有 MutatingAdmissionWebhook,ValidatingAdmissionWebhook</span></span><br><span class="line"><span class="comment"># k8s 1.9 之后的版本要确保 --enable-admission-plugins 里有MutatingAdmissionWebhook,ValidatingAdmissionWebhook</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试自动注入</span></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f samples/sleep/sleep.yaml </span><br><span class="line">kubectl get deployment -o wide</span><br><span class="line">kubectl get pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 default namespace 开启自动注入</span></span><br><span class="line">kubectl label namespace default istio-injection=enabled</span><br><span class="line">kubectl get namespace -L istio-injection</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除创建的pod，等待重建</span></span><br><span class="line">kubectl delete pod $(kubectl get pod | grep sleep | cut -d <span class="string">' '</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看重建后的pod</span></span><br><span class="line"><span class="comment"># 查看是否有istio-proxy容器</span></span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl describe pod $(kubectl get pod | grep sleep | cut -d <span class="string">' '</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f samples/sleep/sleep.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭自动注入</span></span><br><span class="line">kubectl label namespace default istio-injection-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭部分pod的自动注入功能</span></span><br><span class="line">...</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      annotations:</span><br><span class="line">        sidecar.istio.io/inject: <span class="string">"false"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="部署官方测试用例"><a href="#部署官方测试用例" class="headerlink" title="部署官方测试用例"></a>部署官方测试用例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动（未开启自动注入）</span></span><br><span class="line">kubectl apply -f &lt;(istioctl kube-inject -f samples/bookinfo/kube/bookinfo.yaml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动（已开启自动注入）</span></span><br><span class="line">kubectl apply -f samples/bookinfo/kube/bookinfo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建gateway</span></span><br><span class="line">istioctl create -f samples/bookinfo/routing/bookinfo-gateway.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get services</span><br><span class="line">kubectl get pods</span><br><span class="line">istioctl get gateway</span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行访问测试</span></span><br><span class="line"><span class="built_in">export</span> INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=<span class="string">'&#123;.spec.ports[?(@.name=="http")].nodePort&#125;'</span>)</span><br><span class="line">NODE_NAME=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">NODE_IP=$(ping -c 1 <span class="variable">$NODE_NAME</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">export</span> GATEWAY_URL=<span class="variable">$NODE_IP</span>:<span class="variable">$INGRESS_PORT</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$GATEWAY_URL</span></span><br><span class="line"></span><br><span class="line">curl -o /dev/null -s -w <span class="string">"%&#123;http_code&#125;\n"</span> http://<span class="variable">$&#123;GATEWAY_URL&#125;</span>/productpage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问测试</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$&#123;GATEWAY_URL&#125;</span>/productpage"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用daemonset方式部署可以使用如下方式访问</span></span><br><span class="line"><span class="comment"># 11.11.11.112为其中一个node节点的ip</span></span><br><span class="line">curl http://11.11.11.112/productpage</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理官方用例</span></span><br><span class="line">samples/bookinfo/kube/cleanup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理istio</span></span><br><span class="line">kubectl delete -f install/kubernetes/istio-demo.yaml</span><br><span class="line"><span class="comment"># kubectl delete -f install/kubernetes/istio-demo-auth.yaml</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://istio.io/docs/setup/kubernetes/quick-start.html" target="_blank" rel="noopener">https://istio.io/docs/setup/kubernetes/quick-start.html</a></li><li><a href="https://istio.io/docs/guides/bookinfo.html" target="_blank" rel="noopener">https://istio.io/docs/guides/bookinfo.html</a></li><li><a href="https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection" target="_blank" rel="noopener">https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> service mesh </tag>
            
            <tag> istio </tag>
            
            <tag> k8s </tag>
            
            <tag> microservice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kata-containers安装配置</title>
      <link href="/posts/29/"/>
      <url>/posts/29/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>kata-containers是新的虚拟机实现，可以实现和现在容器生态无缝连接，与时下最流行的容器编排工具k8s完美结合，提供容器的快速启动，和虚拟机的安全隔离，与docker技术相比，容器之间不共用内核，使得隔离性更好。<br><a id="more"></a></p><blockquote><p>kata与docker对比图</p></blockquote><p><img src="/posts/29/docker-kata.png" alt=""></p><blockquote><p>与传统容器对比</p></blockquote><p><img src="/posts/29/kata3.png" alt=""></p><blockquote><p>架构图</p></blockquote><p><img src="/posts/29/kata2.png" alt=""></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>本实验在centos7环境下</p><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install yum-utils</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><h4 id="安装kata-containers"><a href="#安装kata-containers" class="headerlink" title="安装kata-containers"></a>安装kata-containers</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/os-release</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$VERSION_ID</span></span><br><span class="line">VERSION_ID=<span class="variable">$VERSION_ID</span> yum-config-manager --add-repo \</span><br><span class="line"><span class="string">"http://download.opensuse.org/repositories/home:/katacontainers:/release/CentOS_<span class="variable">$&#123;VERSION_ID&#125;</span>/home:katacontainers:release.repo"</span></span><br><span class="line">yum -y install kata-runtime kata-proxy kata-shim</span><br></pre></td></tr></table></figure><h4 id="配置docker"><a href="#配置docker" class="headerlink" title="配置docker"></a>配置docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/systemd/system/docker.service.d/</span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/systemd/system/docker.service.d/kata-containers.conf</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/dockerd -D --add-runtime kata-runtime=/usr/bin/kata-runtime --default-runtime=kata-runtime</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="查看机器是否支持kata-containers"><a href="#查看机器是否支持kata-containers" class="headerlink" title="查看机器是否支持kata-containers"></a>查看机器是否支持kata-containers</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kata-runtime kata-check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 经过测试使用virtualbox创建的虚拟机来进行实验都不能成功</span></span><br><span class="line"><span class="comment"># 因为virtualbox创建的虚拟机，不允许在虚拟机里再使用虚拟化</span></span><br><span class="line"><span class="comment"># 而kata-containers需要使用虚拟化</span></span><br><span class="line"><span class="comment"># 虽然使用vmware创建的虚拟机使用些步骤检查时，仍然会报部分错误</span></span><br><span class="line"><span class="comment"># 但是依然可以成功启动容器</span></span><br></pre></td></tr></table></figure><h3 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker run -d busybox sh -c <span class="string">'sleep 9999999'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看qemu</span></span><br><span class="line">ps -ef | grep qemu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到启动了一个轻量的虚拟机</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7使用kubeadm配置高可用k8s集群的另一种方式</title>
      <link href="/posts/28/"/>
      <url>/posts/28/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>使用<code>kubeadm</code>配置多<code>master</code>节点，实现高可用。<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="实验环境说明"><a href="#实验环境说明" class="headerlink" title="实验环境说明"></a>实验环境说明</h4><h5 id="实验架构"><a href="#实验架构" class="headerlink" title="实验架构"></a>实验架构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lab1: etcd master keepalived 11.11.11.111</span><br><span class="line">lab2: etcd master keepalived 11.11.11.112</span><br><span class="line">lab3: etcd master keepalived 11.11.11.113</span><br><span class="line">lab4: node  11.11.11.114</span><br><span class="line">lab5: node  11.11.11.115</span><br><span class="line">lab6: node  11.11.11.116</span><br><span class="line"></span><br><span class="line">vip: 11.11.11.110</span><br></pre></td></tr></table></figure><h5 id="实验使用的Vagrantfile"><a href="#实验使用的Vagrantfile" class="headerlink" title="实验使用的Vagrantfile"></a>实验使用的<code>Vagrantfile</code></h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">6</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      config.vm.define <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"11.11.11.11<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          <span class="symbol">inline:</span> <span class="string">"echo hello from node <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">          v.cpus = <span class="number">2</span></span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--name"</span>, <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="在所有机器上安装kubeadm"><a href="#在所有机器上安装kubeadm" class="headerlink" title="在所有机器上安装kubeadm"></a>在所有机器上安装kubeadm</h4><p>参考之前的文章《centos7安装kubeadm》</p><h4 id="配置所有节点的kubelet"><a href="#配置所有节点的kubelet" class="headerlink" title="配置所有节点的kubelet"></a>配置所有节点的kubelet</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置kubelet使用国内可用镜像</span></span><br><span class="line"><span class="comment"># 修改/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span></span><br><span class="line"><span class="comment"># 添加如下配置 </span></span><br><span class="line">Environment=<span class="string">"KUBELET_EXTRA_ARGS=--pod-infra-container-image=registry.cn-shanghai.aliyuncs.com/gcr-k8s/pause-amd64:3.0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用命令</span></span><br><span class="line">sed -i <span class="string">'/ExecStart=$/i Environment="KUBELET_EXTRA_ARGS=--pod-infra-container-image=registry.cn-shanghai.aliyuncs.com/gcr-k8s/pause-amd64:3.0"'</span>  /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新载入配置</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h4 id="配置hosts"><a href="#配置hosts" class="headerlink" title="配置hosts"></a>配置hosts</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt;/etc/hosts&lt;&lt;EOF</span><br><span class="line">11.11.11.111 lab1</span><br><span class="line">11.11.11.112 lab2</span><br><span class="line">11.11.11.113 lab3</span><br><span class="line">11.11.11.114 lab4</span><br><span class="line">11.11.11.115 lab5</span><br><span class="line">11.11.11.116 lab6</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="启动etcd集群"><a href="#启动etcd集群" class="headerlink" title="启动etcd集群"></a>启动etcd集群</h4><p>在<code>lab1,lab2,lab3</code>节点上启动<code>etcd</code>集群</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lab1</span></span><br><span class="line">docker stop etcd &amp;&amp; docker rm etcd</span><br><span class="line">rm -rf /data/etcd</span><br><span class="line">mkdir -p /data/etcd</span><br><span class="line">docker run -d \</span><br><span class="line">--restart always \</span><br><span class="line">-v /etc/etcd/ssl/certs:/etc/ssl/certs \</span><br><span class="line">-v /data/etcd:/var/lib/etcd \</span><br><span class="line">-p 2380:2380 \</span><br><span class="line">-p 2379:2379 \</span><br><span class="line">--name etcd \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.1.12 \</span><br><span class="line">etcd --name=etcd0 \</span><br><span class="line">--advertise-client-urls=http://11.11.11.111:2379 \</span><br><span class="line">--listen-client-urls=http://0.0.0.0:2379 \</span><br><span class="line">--initial-advertise-peer-urls=http://11.11.11.111:2380 \</span><br><span class="line">--listen-peer-urls=http://0.0.0.0:2380 \</span><br><span class="line">--initial-cluster-token=9477af68bbee1b9ae037d6fd9e7efefd \</span><br><span class="line">--initial-cluster=etcd0=http://11.11.11.111:2380,etcd1=http://11.11.11.112:2380,etcd2=http://11.11.11.113:2380 \</span><br><span class="line">--initial-cluster-state=new \</span><br><span class="line">--auto-tls \</span><br><span class="line">--peer-auto-tls \</span><br><span class="line">--data-dir=/var/lib/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># lab2</span></span><br><span class="line">docker stop etcd &amp;&amp; docker rm etcd</span><br><span class="line">rm -rf /data/etcd</span><br><span class="line">mkdir -p /data/etcd</span><br><span class="line">docker run -d \</span><br><span class="line">--restart always \</span><br><span class="line">-v /etc/etcd/ssl/certs:/etc/ssl/certs \</span><br><span class="line">-v /data/etcd:/var/lib/etcd \</span><br><span class="line">-p 2380:2380 \</span><br><span class="line">-p 2379:2379 \</span><br><span class="line">--name etcd \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.1.12 \</span><br><span class="line">etcd --name=etcd1 \</span><br><span class="line">--advertise-client-urls=http://11.11.11.112:2379 \</span><br><span class="line">--listen-client-urls=http://0.0.0.0:2379 \</span><br><span class="line">--initial-advertise-peer-urls=http://11.11.11.112:2380 \</span><br><span class="line">--listen-peer-urls=http://0.0.0.0:2380 \</span><br><span class="line">--initial-cluster-token=9477af68bbee1b9ae037d6fd9e7efefd \</span><br><span class="line">--initial-cluster=etcd0=http://11.11.11.111:2380,etcd1=http://11.11.11.112:2380,etcd2=http://11.11.11.113:2380 \</span><br><span class="line">--initial-cluster-state=new \</span><br><span class="line">--auto-tls \</span><br><span class="line">--peer-auto-tls \</span><br><span class="line">--data-dir=/var/lib/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># lab3</span></span><br><span class="line">docker stop etcd &amp;&amp; docker rm etcd</span><br><span class="line">rm -rf /data/etcd</span><br><span class="line">mkdir -p /data/etcd</span><br><span class="line">docker run -d \</span><br><span class="line">--restart always \</span><br><span class="line">-v /etc/etcd/ssl/certs:/etc/ssl/certs \</span><br><span class="line">-v /data/etcd:/var/lib/etcd \</span><br><span class="line">-p 2380:2380 \</span><br><span class="line">-p 2379:2379 \</span><br><span class="line">--name etcd \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.1.12 \</span><br><span class="line">etcd --name=etcd2 \</span><br><span class="line">--advertise-client-urls=http://11.11.11.113:2379 \</span><br><span class="line">--listen-client-urls=http://0.0.0.0:2379 \</span><br><span class="line">--initial-advertise-peer-urls=http://11.11.11.113:2380 \</span><br><span class="line">--listen-peer-urls=http://0.0.0.0:2380 \</span><br><span class="line">--initial-cluster-token=9477af68bbee1b9ae037d6fd9e7efefd \</span><br><span class="line">--initial-cluster=etcd0=http://11.11.11.111:2380,etcd1=http://11.11.11.112:2380,etcd2=http://11.11.11.113:2380 \</span><br><span class="line">--initial-cluster-state=new \</span><br><span class="line">--auto-tls \</span><br><span class="line">--peer-auto-tls \</span><br><span class="line">--data-dir=/var/lib/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证查看集群</span></span><br><span class="line">docker <span class="built_in">exec</span> -ti etcd ash</span><br><span class="line">etcdctl member list</span><br><span class="line">etcdctl cluster-health</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h4 id="配置keepalived"><a href="#配置keepalived" class="headerlink" title="配置keepalived"></a>配置keepalived</h4><p>在3台<code>master</code>节点操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 载入内核相关模块</span></span><br><span class="line">lsmod | grep ip_vs</span><br><span class="line">modprobe ip_vs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动keepalived</span></span><br><span class="line"><span class="comment"># eth1为本次实验11.11.11.0/24网段的所在网卡</span></span><br><span class="line">docker run --net=host --<span class="built_in">cap</span>-add=NET_ADMIN \</span><br><span class="line">-e KEEPALIVED_INTERFACE=eth1 \</span><br><span class="line">-e KEEPALIVED_VIRTUAL_IPS=<span class="string">"#PYTHON2BASH:['11.11.11.110']"</span> \</span><br><span class="line">-e KEEPALIVED_UNICAST_PEERS=<span class="string">"#PYTHON2BASH:['11.11.11.111','11.11.11.112','11.11.11.113']"</span> \</span><br><span class="line">-e KEEPALIVED_PASSWORD=hello \</span><br><span class="line">--name k8s-keepalived \</span><br><span class="line">--restart always \</span><br><span class="line">-d osixia/keepalived:1.4.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line"><span class="comment"># 会看到两个成为backup 一个成为master</span></span><br><span class="line">docker logs k8s-keepalived</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时会配置 11.11.11.110 到其中一台机器</span></span><br><span class="line"><span class="comment"># ping测试</span></span><br><span class="line">ping -c4 11.11.11.110</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果失败后清理后，重新实验</span></span><br><span class="line">docker rm -f k8s-keepalived</span><br><span class="line">ip a del 11.11.11.110/32 dev eth1</span><br></pre></td></tr></table></figure><h4 id="在第一台master节点初始化"><a href="#在第一台master节点初始化" class="headerlink" title="在第一台master节点初始化"></a>在第一台master节点初始化</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成token</span></span><br><span class="line"><span class="comment"># 保留token后面还要使用</span></span><br><span class="line">token=$(kubeadm token generate)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$token</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line"><span class="comment"># advertiseAddress 配置为VIP地址</span></span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha1</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.10.3</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: 11.11.11.110</span><br><span class="line"></span><br><span class="line">apiServerExtraArgs:</span><br><span class="line">  endpoint-reconciler-type: lease</span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  endpoints:</span><br><span class="line">  - <span class="string">"http://11.11.11.111:2379"</span></span><br><span class="line">  - <span class="string">"http://11.11.11.112:2379"</span></span><br><span class="line">  - <span class="string">"http://11.11.11.113:2379"</span></span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- <span class="string">"lab1"</span></span><br><span class="line">- <span class="string">"lab2"</span></span><br><span class="line">- <span class="string">"lab3"</span></span><br><span class="line">- <span class="string">"11.11.11.111"</span></span><br><span class="line">- <span class="string">"11.11.11.112"</span></span><br><span class="line">- <span class="string">"11.11.11.113"</span></span><br><span class="line">- <span class="string">"11.11.11.110"</span></span><br><span class="line">- <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">token: <span class="variable">$token</span></span><br><span class="line">tokenTTL: <span class="string">"0"</span></span><br><span class="line"></span><br><span class="line">featureGates:</span><br><span class="line">  CoreDNS: <span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存初始化完成之后的join命令</span></span><br><span class="line"><span class="comment"># kubeadm join 11.11.11.110:6443 --token nevmjk.iuh214fc8i0k3iue --discovery-token-ca-cert-hash sha256:0e4f738348be836ff810bce754e059054845f44f01619a37b817eba83282d80f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubectl使用</span></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装网络插件</span></span><br><span class="line"><span class="comment"># 下载配置</span></span><br><span class="line">mkdir flannel &amp;&amp; <span class="built_in">cd</span> flannel</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与上面kubeadm的pod-network一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"10.244.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件</span></span><br><span class="line"><span class="comment"># 如 dashboard, heapster, efk等</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><h4 id="启动其他master节点"><a href="#启动其他master节点" class="headerlink" title="启动其他master节点"></a>启动其他master节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包第一台master初始化之后的/etc/kubernetes/pki目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/kubernetes &amp;&amp; tar czvf /root/pki.tgz pki/ &amp;&amp; <span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到其他master的/etc/kubernetes目录下</span></span><br><span class="line">tar xf pki.tgz -C /etc/kubernetes/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制启动第一台master时的配置文件到其他master节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubectl使用</span></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第一台配置master节点查看</span></span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab1</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab2</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab3</span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><h4 id="启动node节点"><a href="#启动node节点" class="headerlink" title="启动node节点"></a>启动node节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加入master节点</span></span><br><span class="line"><span class="comment"># 这个命令是之前初始化master完成时，输出的命令</span></span><br><span class="line">kubeadm join 11.11.11.110:6443 --token nevmjk.iuh214fc8i0k3iue --discovery-token-ca-cert-hash sha256:0e4f738348be836ff810bce754e059054845f44f01619a37b817eba83282d80f</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="重建多个coredns副本"><a href="#重建多个coredns副本" class="headerlink" title="重建多个coredns副本"></a>重建多个coredns副本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除coredns的pods</span></span><br><span class="line">kubectl get pods -n kube-system -o wide | grep coredns</span><br><span class="line">all_coredns_pods=$(kubectl get pods -n kube-system -o wide | grep coredns | awk <span class="string">'&#123;print $1&#125;'</span> | xargs)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$all_coredns_pods</span></span><br><span class="line">kubectl delete pods <span class="variable">$all_coredns_pods</span> -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改副本数</span></span><br><span class="line"><span class="comment"># replicas: 3</span></span><br><span class="line"><span class="comment"># 可以修改为node节点的个数</span></span><br><span class="line">kubectl edit deploy coredns -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods -n kube-system -o wide | grep coredns</span><br></pre></td></tr></table></figure><h4 id="基础测试"><a href="#基础测试" class="headerlink" title="基础测试"></a>基础测试</h4><p><strong>1. 启动</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用命令测试</span></span><br><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置文件测试</span></span><br><span class="line">cat &gt;example-nginx.yml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:alpine</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /</span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 3</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /</span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 3</span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: example-service</span><br><span class="line">spec:</span><br><span class="line">    selector:</span><br><span class="line">      app: nginx</span><br><span class="line">    ports:</span><br><span class="line">      - name: http</span><br><span class="line">        port: 80</span><br><span class="line">        targetPort: 80</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: example-service-nodeport</span><br><span class="line">spec:</span><br><span class="line">    selector:</span><br><span class="line">      app: nginx</span><br><span class="line">    <span class="built_in">type</span>: NodePort</span><br><span class="line">    ports:</span><br><span class="line">      - name: http-nodeport</span><br><span class="line">        port: 80</span><br><span class="line">        nodePort: 32223</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f example-nginx.yml</span><br></pre></td></tr></table></figure></p><p><strong>2. 查看状态</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure></p><p><strong>3. DNS解析</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果时间过长会返回错误，可以使用如下方式再进入测试</span></span><br><span class="line">curlPod=$(kubectl get pod | grep curl | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -ti <span class="variable">$curlPod</span> -- sh</span><br></pre></td></tr></table></figure></p><p><strong>4. 访问测试</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.96.59.56 为查看svc时获取到的clusterip</span></span><br><span class="line">curl <span class="string">"10.96.59.56:80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 32223 为查看svc时获取到的 nodeport</span></span><br><span class="line">http://11.11.11.114:32223/</span><br><span class="line">http://11.11.11.115:32223/</span><br></pre></td></tr></table></figure></p><p><strong>3. 清理删除</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure></p><h4 id="高可用测试"><a href="#高可用测试" class="headerlink" title="高可用测试"></a>高可用测试</h4><p>任意关闭<code>master</code>节点测试集群是能否正常执行上一步的<code>基础测试</code>，查看相关信息，只关闭到只一台<code>master</code>，因为<code>etcd</code>部署在相应的<code>master</code>节点上，如果关闭了两台，会造成<code>etcd</code>不可用，进而让整个集群不可用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod --all-namespaces -o wide</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab1</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab2</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab3</span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>当直接把<code>node</code>节点关闭时，只有过了<code>5分钟</code>之后，上面的pod才会被检测到有问题，并迁移到其他节点</p><blockquote><p>如果想快速迁移可以执行 <code>kubectl delete node</code></p><p>也可以修改<code>controller-manager的</code>的<code>pod-eviction-timeout</code>参数，默认5m</p><p><code>node-monitor-grace-period</code>参数，默认40s</p></blockquote></li><li><p>此方案和之前文章中写的高可用方案相比，缺点就是不能使用 <code>kube-apiserver</code> 多节点负载均衡的功能。所有对<code>kube-apiserver</code>的请求都只会发给一个<code>master</code>节点，只有当这个<code>master</code>节点挂掉之后，才会把所有有请求发给另外的<code>master</code>。</p></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.kubernetes.org.cn/3808.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/3808.html</a></li><li><a href="https://kubernetes.io/docs/admin/high-availability/" target="_blank" rel="noopener">https://kubernetes.io/docs/admin/high-availability/</a></li><li><a href="https://www.kubernetes.org.cn/3536.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/3536.html</a></li><li><a href="https://github.com/indiketa/kubeadm-ha" target="_blank" rel="noopener">https://github.com/indiketa/kubeadm-ha</a></li><li><a href="https://zhuanlan.zhihu.com/p/34740013" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34740013</a></li><li><a href="https://github.com/cookeem/kubeadm-ha/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/cookeem/kubeadm-ha/blob/master/README_CN.md</a></li><li><a href="https://blog.frognew.com/2017/04/install-etcd-cluster.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/04/install-etcd-cluster.html</a></li><li><a href="https://blog.frognew.com/2017/04/install-ha-kubernetes-1.6-cluster.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/04/install-ha-kubernetes-1.6-cluster.html</a></li><li><a href="https://medium.com/@bambash/ha-kubernetes-cluster-via-kubeadm-b2133360b198" target="_blank" rel="noopener">https://medium.com/@bambash/ha-kubernetes-cluster-via-kubeadm-b2133360b198</a></li><li><a href="https://github.com/kubernetes/kubeadm/issues/546" target="_blank" rel="noopener">https://github.com/kubernetes/kubeadm/issues/546</a></li><li><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s使用kube-router网络插件并监控流量状态</title>
      <link href="/posts/27/"/>
      <url>/posts/27/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>kube-router</code>是一个新的k8s的网络插件，使用<code>lvs</code>做服务的代理及负载均衡，使用<code>iptables</code>来做网络的隔离策略。部署简单，只需要在每个节点部署一个daemonset即可，高性能，易维护。支持pod间通信，以及服务的代理。<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次实验重新创建了集群，使用之前测试其他网络插件的集群环境没有成功</span></span><br><span class="line"><span class="comment"># 可能是由于环境干扰，实验时需要注意</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建kube-router目录下载相关文件</span></span><br><span class="line">mkdir kube-router &amp;&amp; <span class="built_in">cd</span> kube-router</span><br><span class="line">wget https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter-all-features.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下两种部署方式任选其一</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 只启用 pod网络通信，网络隔离策略 功能</span></span><br><span class="line">kubectl apply -f kubeadm-kuberouter.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 启用 pod网络通信，网络隔离策略，服务代理 所有功能</span></span><br><span class="line"><span class="comment"># 删除kube-proxy和其之前配置的服务代理</span></span><br><span class="line">kubectl apply -f kubeadm-kuberouter-all-features.yaml</span><br><span class="line">kubectl -n kube-system delete ds kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line">docker run --privileged --net=host registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.10.2 kube-proxy --cleanup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动用于测试的deployment</span></span><br><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># dns及访问测试</span></span><br><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="监控相关数据并可视化"><a href="#监控相关数据并可视化" class="headerlink" title="监控相关数据并可视化"></a>监控相关数据并可视化</h3><h4 id="重新部署kube-router"><a href="#重新部署kube-router" class="headerlink" title="重新部署kube-router"></a>重新部署kube-router</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改yml文件</span></span><br><span class="line">cp kubeadm-kuberouter-all-features.yaml kubeadm-kuberouter-all-features.yaml.ori</span><br><span class="line">vim kubeadm-kuberouter-all-features.yaml</span><br><span class="line">...</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kube-router</span><br><span class="line">        tier: node</span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">        <span class="comment"># 添加如下参数，让prometheus收集数据</span></span><br><span class="line">        prometheus.io/scrape: <span class="string">"true"</span></span><br><span class="line">        prometheus.io/path: <span class="string">"/metrics"</span></span><br><span class="line">        prometheus.io/port: <span class="string">"8080"</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: kube-router</span><br><span class="line">      serviceAccount: kube-router</span><br><span class="line">      containers:</span><br><span class="line">      - name: kube-router</span><br><span class="line">        image: cloudnativelabs/kube-router</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        args:</span><br><span class="line">        <span class="comment"># 添加如下参数开启metrics</span></span><br><span class="line">        - --metrics-path=/metrics</span><br><span class="line">        - --metrics-port=8080</span><br><span class="line">        - --run-router=<span class="literal">true</span></span><br><span class="line">        - --run-firewall=<span class="literal">true</span></span><br><span class="line">        - --run-service-proxy=<span class="literal">true</span></span><br><span class="line">        - --kubeconfig=/var/lib/kube-router/kubeconfig</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新部署</span></span><br><span class="line">kubectl delete ds kube-router -n kube-system</span><br><span class="line">kubectl apply -f kubeadm-kuberouter-all-features.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试获取metrics</span></span><br><span class="line">curl http://127.0.0.1:8080/metrics</span><br></pre></td></tr></table></figure><h4 id="部署prometheus"><a href="#部署prometheus" class="headerlink" title="部署prometheus"></a>部署prometheus</h4><p>复制如下内容到<code>prometheus.yml</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="string">prometheus.yml:</span> <span class="string">|-</span></span><br><span class="line"><span class="attr">    global:</span></span><br><span class="line"><span class="attr">      scrape_interval:</span> <span class="number">15</span><span class="string">s</span></span><br><span class="line"><span class="attr">    scrape_configs:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># scrape config for API servers</span></span><br><span class="line"><span class="attr">    - job_name:</span> <span class="string">'kubernetes-apiservers'</span></span><br><span class="line"><span class="attr">      kubernetes_sd_configs:</span></span><br><span class="line"><span class="attr">      - role:</span> <span class="string">endpoints</span></span><br><span class="line"><span class="attr">      scheme:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">      tls_config:</span></span><br><span class="line"><span class="attr">        ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line"><span class="attr">      bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line"><span class="attr">      relabel_configs:</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_namespace,</span> <span class="string">__meta_kubernetes_service_name,</span> <span class="string">__meta_kubernetes_endpoint_port_name]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">keep</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">default;kubernetes;https</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># scrape config for nodes (kubelet)</span></span><br><span class="line"><span class="attr">    - job_name:</span> <span class="string">'kubernetes-nodes'</span></span><br><span class="line"><span class="attr">      scheme:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">      tls_config:</span></span><br><span class="line"><span class="attr">        ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line"><span class="attr">      bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line"><span class="attr">      kubernetes_sd_configs:</span></span><br><span class="line"><span class="attr">      - role:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">      relabel_configs:</span></span><br><span class="line"><span class="attr">      - action:</span> <span class="string">labelmap</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">__meta_kubernetes_node_label_(.+)</span></span><br><span class="line"><span class="attr">      - target_label:</span> <span class="string">__address__</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">kubernetes.default.svc:443</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_node_name]</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">(.+)</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">/api/v1/nodes/$&#123;1&#125;/proxy/metrics</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Scrape config for Kubelet cAdvisor.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># This is required for Kubernetes 1.7.3 and later, where cAdvisor metrics</span></span><br><span class="line">    <span class="comment"># (those whose names begin with 'container_') have been removed from the</span></span><br><span class="line">    <span class="comment"># Kubelet metrics endpoint.  This job scrapes the cAdvisor endpoint to</span></span><br><span class="line">    <span class="comment"># retrieve those metrics.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># In Kubernetes 1.7.0-1.7.2, these metrics are only exposed on the cAdvisor</span></span><br><span class="line">    <span class="comment"># HTTP endpoint; use "replacement: /api/v1/nodes/$&#123;1&#125;:4194/proxy/metrics"</span></span><br><span class="line">    <span class="comment"># in that case (and ensure cAdvisor's HTTP server hasn't been disabled with</span></span><br><span class="line">    <span class="comment"># the --cadvisor-port=0 Kubelet flag).</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># This job is not necessary and should be removed in Kubernetes 1.6 and</span></span><br><span class="line">    <span class="comment"># earlier versions, or it will cause the metrics to be scraped twice.</span></span><br><span class="line"><span class="attr">    - job_name:</span> <span class="string">'kubernetes-cadvisor'</span></span><br><span class="line"><span class="attr">      scheme:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">      tls_config:</span></span><br><span class="line"><span class="attr">        ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line"><span class="attr">      bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line"><span class="attr">      kubernetes_sd_configs:</span></span><br><span class="line"><span class="attr">      - role:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">      relabel_configs:</span></span><br><span class="line"><span class="attr">      - action:</span> <span class="string">labelmap</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">__meta_kubernetes_node_label_(.+)</span></span><br><span class="line"><span class="attr">      - target_label:</span> <span class="string">__address__</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">kubernetes.default.svc:443</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_node_name]</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">(.+)</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">/api/v1/nodes/$&#123;1&#125;/proxy/metrics/cadvisor</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># scrape config for service endpoints.</span></span><br><span class="line"><span class="attr">    - job_name:</span> <span class="string">'kubernetes-service-endpoints'</span></span><br><span class="line"><span class="attr">      kubernetes_sd_configs:</span></span><br><span class="line"><span class="attr">      - role:</span> <span class="string">endpoints</span></span><br><span class="line"><span class="attr">      relabel_configs:</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_service_annotation_prometheus_io_scrape]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">keep</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_service_annotation_prometheus_io_scheme]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__scheme__</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">(https?)</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_service_annotation_prometheus_io_path]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">(.+)</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__address__,</span> <span class="string">__meta_kubernetes_service_annotation_prometheus_io_port]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__address__</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">([^:]+)(?::\d+)?;(\d+)</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">$1:$2</span></span><br><span class="line"><span class="attr">      - action:</span> <span class="string">labelmap</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">__meta_kubernetes_service_label_(.+)</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_namespace]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_service_name]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">kubernetes_name</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Example scrape config for pods</span></span><br><span class="line"><span class="attr">    - job_name:</span> <span class="string">'kubernetes-pods'</span></span><br><span class="line"><span class="attr">      kubernetes_sd_configs:</span></span><br><span class="line"><span class="attr">      - role:</span> <span class="string">pod</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      relabel_configs:</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_pod_annotation_prometheus_io_scrape]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">keep</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_pod_annotation_prometheus_io_path]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">(.+)</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__address__,</span> <span class="string">__meta_kubernetes_pod_annotation_prometheus_io_port]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">([^:]+)(?::\d+)?;(\d+)</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">$1:$2</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__address__</span></span><br><span class="line"><span class="attr">      - action:</span> <span class="string">labelmap</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">__meta_kubernetes_pod_label_(.+)</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_namespace]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">namespace</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_pod_name]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">pod_name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">prometheus.io/scrape:</span> <span class="string">'true'</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">9090</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">      annotations:</span></span><br><span class="line">        <span class="string">sidecar.istio.io/inject:</span> <span class="string">"false"</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">docker.io/prom/prometheus:v2.2.1</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        args:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">'--storage.tsdb.retention=6h'</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">'--config.file=/etc/prometheus/prometheus.yml'</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">          containerPort:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">config-volume</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/prometheus</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">config-volume</span></span><br><span class="line"><span class="attr">        configMap:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="attr">- apiGroups:</span> <span class="string">[""]</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">nodes</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">services</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">endpoints</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">pods</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">nodes/proxy</span></span><br><span class="line"><span class="attr">  verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">]</span></span><br><span class="line"><span class="attr">- apiGroups:</span> <span class="string">[""]</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">configmaps</span></span><br><span class="line"><span class="attr">  verbs:</span> <span class="string">["get"]</span></span><br><span class="line"><span class="attr">- nonResourceURLs:</span> <span class="string">["/metrics"]</span></span><br><span class="line"><span class="attr">  verbs:</span> <span class="string">["get"]</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">- kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>部署测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f prometheus.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问prometheus</span></span><br><span class="line"><span class="comment"># 输入 kube_router 关键字查找 看有无提示出现</span></span><br><span class="line">prometheusNodePort=$(kubectl get svc -n kube-system | grep prometheus | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$prometheusNodePort</span></span><br></pre></td></tr></table></figure><h4 id="部署grafana"><a href="#部署grafana" class="headerlink" title="部署grafana"></a>部署grafana</h4><p>复制如下内容到<code>grafana.yml</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">grafana</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">3000</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">grafana</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">grafana</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">grafana</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">grafana</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">grafana</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">grafana/grafana</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">          - containerPort:</span> <span class="number">3000</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/var/lib/grafana</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">grafana-data</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">grafana-data</span></span><br><span class="line"><span class="attr">        emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">grafana</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>部署测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f grafana.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问grafana</span></span><br><span class="line">grafanaNodePort=$(kubectl get svc -n kube-system | grep grafana | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$grafanaNodePort</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认用户密码</span></span><br><span class="line">admin/admin</span><br></pre></td></tr></table></figure><h4 id="导入并查看dashboard"><a href="#导入并查看dashboard" class="headerlink" title="导入并查看dashboard"></a>导入并查看dashboard</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载官方dashboard的json文件</span></span><br><span class="line">wget https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/dashboard/kube-router.json</span><br></pre></td></tr></table></figure><p>创建名为<code>Prometheus</code>类型也为<code>Prometheus</code>的数据源，连接地址为<code>http://prometheus:9090/</code></p><p><img src="/posts/27/kube-router-metric-grafana.png" alt=""></p><p>选择刚刚下载的<code>json</code>文件导入<code>dashboard</code></p><p><img src="/posts/27/kube-router-dashboard-upload.png" alt=""></p><p>查看<code>dashboard</code></p><p><img src="/posts/27/kube-router-metric-dashboard.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio微服务实验之监控日志与可视化</title>
      <link href="/posts/26/"/>
      <url>/posts/26/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文是istio微服务实验的后续文章，实验前请先参考之前文章。<br><a id="more"></a></p><h3 id="分布式调用链追踪"><a href="#分布式调用链追踪" class="headerlink" title="分布式调用链追踪"></a>分布式调用链追踪</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载yml文件</span></span><br><span class="line">mkdir jaeger &amp;&amp; <span class="built_in">cd</span> jaeger</span><br><span class="line">wget https://raw.githubusercontent.com/jaegertracing/jaeger-kubernetes/master/all-in-one/jaeger-all-in-one-template.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实验环境不支持 LoadBalancer</span></span><br><span class="line"><span class="comment"># 可以修改jaeger-all-in-one-template.yml使用nodeport</span></span><br><span class="line"><span class="comment"># 也可以不修改，这样的会使用随机的nodeport</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -n istio-system -f jaeger-all-in-one-template.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n istio-system</span><br><span class="line">kubectl get svc -n istio-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多次访问之前的vue react界面并点击发射按钮</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">jaegerNodePort=$(kubectl get svc -n istio-system | grep jaeger-query | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$jaegerNodePort</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择 istio-ingress 可以方便查看整个调用链</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line"><span class="built_in">cd</span> jaeger</span><br><span class="line">kubectl delete -n istio-system -f jaeger-all-in-one-template.yml</span><br></pre></td></tr></table></figure><blockquote><p> jaeger的dashboard界面</p></blockquote><p><img src="/posts/26/jaeger-dashboard.png" alt=""></p><blockquote><p>调用链</p></blockquote><p><img src="/posts/26/jaeger-trace.png" alt=""></p><blockquote><p>服务树展示</p></blockquote><p><img src="/posts/26/jaeger-trace-map.png" alt=""></p><h3 id="日志与指标收集"><a href="#日志与指标收集" class="headerlink" title="日志与指标收集"></a>日志与指标收集</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装prometheus</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改支持nodeport</span></span><br><span class="line">cp install/kubernetes/addons/prometheus.yaml install/kubernetes/addons/prometheus.yaml.ori</span><br><span class="line">vim install/kubernetes/addons/prometheus.yaml</span><br><span class="line">...</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/scrape: <span class="string">'true'</span></span><br><span class="line">  labels:</span><br><span class="line">    name: prometheus</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">  ports:</span><br><span class="line">  - name: prometheus</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 9090</span><br><span class="line">  <span class="comment"># 设置使用 nodeport</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f install/kubernetes/addons/prometheus.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置收集</span></span><br><span class="line">istioctl create -f istio/new_telemetry.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多次访问之前的vue react界面并点击发射按钮</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问web测试</span></span><br><span class="line">prometheusNodePort=$(kubectl get svc -n istio-system | grep prometheus | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$prometheusNodePort</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 istio_double_request_count  关键字查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">kubectl -n istio-system logs $(kubectl -n istio-system get pods -l istio=mixer -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) mixer | grep \<span class="string">"instance\":\"newlog.logentry.istio-system\"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 清理</span></span><br><span class="line"><span class="string">kubectl delete -f install/kubernetes/addons/prometheus.yaml</span></span><br><span class="line"><span class="string">istioctl delete -f istio/new_telemetry.yml</span></span><br></pre></td></tr></table></figure><h3 id="收集TCP服务的指标"><a href="#收集TCP服务的指标" class="headerlink" title="收集TCP服务的指标"></a>收集TCP服务的指标</h3><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装prometheus</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改支持nodeport</span></span><br><span class="line">cp install/kubernetes/addons/prometheus.yaml install/kubernetes/addons/prometheus.yaml.ori</span><br><span class="line">vim install/kubernetes/addons/prometheus.yaml</span><br><span class="line">...</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/scrape: <span class="string">'true'</span></span><br><span class="line">  labels:</span><br><span class="line">    name: prometheus</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">  ports:</span><br><span class="line">  - name: prometheus</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 9090</span><br><span class="line">  <span class="comment"># 设置使用 nodeport</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f install/kubernetes/addons/prometheus.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置收集</span></span><br><span class="line">istioctl create -f istio/tcp_telemetry.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署使用mongodb应用测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问web测试</span></span><br><span class="line">prometheusNodePort=$(kubectl get svc -n istio-system | grep prometheus | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$prometheusNodePort</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 istio_mongo_received_bytes  关键字查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f install/kubernetes/addons/prometheus.yaml</span><br><span class="line">istioctl delete -f istio/tcp_telemetry.yml</span><br></pre></td></tr></table></figure><blockquote><p>TCP数据流图</p></blockquote><p><img src="/posts/26/istio-tcp-attribute-flow.svg" alt=""></p><h3 id="使用grafana可视化指标"><a href="#使用grafana可视化指标" class="headerlink" title="使用grafana可视化指标"></a>使用grafana可视化指标</h3><h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装prometheus</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改支持nodeport</span></span><br><span class="line">cp install/kubernetes/addons/prometheus.yaml install/kubernetes/addons/prometheus.yaml.ori</span><br><span class="line">vim install/kubernetes/addons/prometheus.yaml</span><br><span class="line">...</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/scrape: <span class="string">'true'</span></span><br><span class="line">  labels:</span><br><span class="line">    name: prometheus</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">  ports:</span><br><span class="line">  - name: prometheus</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 9090</span><br><span class="line">  <span class="comment"># 设置使用 nodeport</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">...</span><br><span class="line">cp install/kubernetes/addons/grafana.yaml install/kubernetes/addons/grafana.yaml.ori</span><br><span class="line">vim install/kubernetes/addons/grafana.yaml</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana</span><br><span class="line">  namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># 设置使用 nodeport</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 3000</span><br><span class="line">    protocol: TCP</span><br><span class="line">    name: http</span><br><span class="line">  selector:</span><br><span class="line">    app: grafana</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f install/kubernetes/addons/prometheus.yaml</span><br><span class="line">kubectl apply -f install/kubernetes/addons/grafana.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问web测试</span></span><br><span class="line">grafanaNodePort=$(kubectl get svc -n istio-system | grep grafana | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$grafanaNodePort</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压力测试查看图表</span></span><br><span class="line"><span class="comment"># 创建测试用的fortio</span></span><br><span class="line">kubectl apply -f &lt;(istioctl kube-inject -f istio/fortio-deploy.yaml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常访问测试</span></span><br><span class="line">FORTIO_POD=$(kubectl get pod | grep fortio | awk <span class="string">'&#123; print $1 &#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -curl http://service-python/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加大压力测试</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -qps 20 -t 100s -loglevel Warning http://service-python/env</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -qps 50 -t 100s -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f install/kubernetes/addons/prometheus.yaml</span><br><span class="line">kubectl delete -f install/kubernetes/addons/grafana.yaml</span><br><span class="line">kubectl delete -f istio/fortio-deploy.yaml</span><br></pre></td></tr></table></figure><blockquote><p>service mesh 数据监控展示</p></blockquote><p><img src="/posts/26/service-mesh-dashboard.png" alt=""></p><blockquote><p>pilot数据监控展示</p></blockquote><p><img src="/posts/26/grafana-pilot.png" alt=""></p><h3 id="生成服务树"><a href="#生成服务树" class="headerlink" title="生成服务树"></a>生成服务树</h3><h4 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改使用nodeport</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line">cp install/kubernetes/addons/servicegraph.yaml install/kubernetes/addons/servicegraph.yaml.ori</span><br><span class="line">vim install/kubernetes/addons/servicegraph.yaml</span><br><span class="line">...</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: servicegraph</span><br><span class="line">  namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># 设置使用 nodeport</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 8088</span><br><span class="line">  selector:</span><br><span class="line">    app: servicegraph</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装prometheus</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改支持nodeport</span></span><br><span class="line">cp install/kubernetes/addons/prometheus.yaml install/kubernetes/addons/prometheus.yaml.ori</span><br><span class="line">vim install/kubernetes/addons/prometheus.yaml</span><br><span class="line">...</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/scrape: <span class="string">'true'</span></span><br><span class="line">  labels:</span><br><span class="line">    name: prometheus</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">  ports:</span><br><span class="line">  - name: prometheus</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 9090</span><br><span class="line">  <span class="comment"># 设置使用 nodeport</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f install/kubernetes/addons/prometheus.yaml</span><br><span class="line">kubectl apply -f install/kubernetes/addons/servicegraph.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多次访问之前的vue react界面并点击发射按钮</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问web测试</span></span><br><span class="line">servicegraphNodePort=$(kubectl get svc -n istio-system | grep servicegraph | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$servicegraphNodePort</span>/force/forcegraph.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可使用url</span></span><br><span class="line"><span class="comment"># /force/forcegraph.html</span></span><br><span class="line"><span class="comment"># /dotviz</span></span><br><span class="line"><span class="comment"># /dotgraph</span></span><br><span class="line"><span class="comment"># /d3graph</span></span><br><span class="line"><span class="comment"># /graph</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f install/kubernetes/addons/prometheus.yaml</span><br><span class="line">kubectl delete -f install/kubernetes/addons/servicegraph.yaml</span><br></pre></td></tr></table></figure><blockquote><p>服务树</p></blockquote><p><img src="/posts/26/servicegraph.png" alt=""></p><h3 id="使用Fluentd收集日志"><a href="#使用Fluentd收集日志" class="headerlink" title="使用Fluentd收集日志"></a>使用Fluentd收集日志</h3><h4 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装efk</span></span><br><span class="line">kubectl apply -f istio/logging-stack.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置istio使用efk</span></span><br><span class="line">istioctl create -f istio/fluentd-istio.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多次访问之前的vue react界面并点击发射按钮</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问web测试</span></span><br><span class="line">kibanaNodePort=$(kubectl get svc -n istio-system | grep kibana | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$kibanaNodePort</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f istio/logging-stack.yml</span><br><span class="line">istio delete -f istio/fluentd-istio.yml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> service mesh </tag>
            
            <tag> istio </tag>
            
            <tag> k8s </tag>
            
            <tag> microservice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio微服务实验</title>
      <link href="/posts/25/"/>
      <url>/posts/25/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本实验通过在k8s上部署istio，实现微服务的基础功能。其中会涉及到服务的限流，超时，熔断，降级，流量分隔，A/B测试等功能。实验之前需要安装k8s和istio，请参考之前文章。注意开启istio的自动注入功能。<br><a id="more"></a><br>本实验的服务间调用关系如下：</p><blockquote><p>本实验采用时下流行的前后端分离模式</p><p>前端项目基于vue/react实现</p><p>前端调用python实现的API接口</p><p>python服务调用后端node实现的服务和lua实现的服务</p><p>node服务调用go实现的服务</p><ul><li>—-&gt;service-js</li><li>—-&gt;service-python<ul><li>—-&gt;service-lua</li><li>—-&gt;service-node<ul><li>—-&gt;service-go</li></ul></li></ul></li></ul></blockquote><p>本实验使用的语言技术栈：</p><ul><li>vue/react</li><li>python2/3</li><li>node8/10</li><li>openresty1.11 /1.13</li><li>go1.10/1.9</li></ul><p>架构图如下：</p><p><img src="/posts/25/istio-test-arch.png" alt=""></p><h3 id="下载实验仓库"><a href="#下载实验仓库" class="headerlink" title="下载实验仓库"></a>下载实验仓库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mgxian/istio-test</span><br></pre></td></tr></table></figure><h3 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> istio-test</span><br><span class="line">kubectl apply -f service/go/v1/go-v1.yml</span><br><span class="line">kubectl apply -f service/go/v2/go-v2.yml</span><br><span class="line">kubectl apply -f service/python/v1/python-v1.yml</span><br><span class="line">kubectl apply -f service/python/v2/python-v2.yml</span><br><span class="line">kubectl apply -f service/js/v1/js-v1.yml</span><br><span class="line">kubectl apply -f service/js/v2/js-v2.yml</span><br><span class="line">kubectl apply -f service/node/v1/node-v1.yml</span><br><span class="line">kubectl apply -f service/node/v2/node-v2.yml</span><br><span class="line">kubectl apply -f service/lua/v1/lua-v1.yml</span><br><span class="line">kubectl apply -f service/lua/v2/lua-v2.yml</span><br></pre></td></tr></table></figure><h3 id="暴露服务"><a href="#暴露服务" class="headerlink" title="暴露服务"></a>暴露服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用istio提供的ingress功能</span></span><br><span class="line"><span class="comment"># 暴露js和python服务让k8s集群外部访问</span></span><br><span class="line">kubectl apply -f istio/ingress-python.yml</span><br><span class="line">kubectl apply -f istio/ingress-js.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get ingress</span><br></pre></td></tr></table></figure><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置hosts解析</span></span><br><span class="line"><span class="comment"># 11.11.11.112为其中一个node的ip</span></span><br><span class="line">11.11.11.112 istio-test.will</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用curl</span></span><br><span class="line">curl -I istio-test.will</span><br><span class="line">curl -s istio-test.will | egrep <span class="string">"vue|React"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时如果作用浏览器，可能会出会页面显示不正常的情况。</span></span><br><span class="line"><span class="comment"># 因为此时请求会轮流分发到后端js服务的v1/v2版本，因此css/js并不能正常加载</span></span><br></pre></td></tr></table></figure><h3 id="流量管理"><a href="#流量管理" class="headerlink" title="流量管理"></a>流量管理</h3><p>根据请求的信息，把流量路由到服务的不同版本。实验过程如果没有达到预期效果，很有可能是因为存在路由规则冲突，而且没有设置优先级，可以先删除之前设置的路由规则或者把优先级设置高一点。</p><h4 id="把所有流量导向v1版本"><a href="#把所有流量导向v1版本" class="headerlink" title="把所有流量导向v1版本"></a>把所有流量导向v1版本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line">istioctl create -f istio/route-rule-all-v1.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看路由规则</span></span><br><span class="line">istioctl get routerule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问浏览器测试</span></span><br><span class="line">http://istio-test.will/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时你会看到react app的界面</span></span><br><span class="line"><span class="comment"># 点击发射按钮，会发送ajax请求到python服务</span></span><br><span class="line"><span class="comment"># 由于把所有流量都导向了v1版本</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮会得到一样的内容</span></span><br><span class="line"><span class="comment"># react-----&gt;Python2.7.15-----&gt;Gogo1.9.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-all-v1.yml</span><br></pre></td></tr></table></figure><h4 id="根据请求把流量导向不同版本（A-B测试）"><a href="#根据请求把流量导向不同版本（A-B测试）" class="headerlink" title="根据请求把流量导向不同版本（A/B测试）"></a>根据请求把流量导向不同版本（A/B测试）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line"><span class="comment"># 根据浏览器的不同返回不同内容</span></span><br><span class="line">istioctl create -f istio/route-rule-js-by-agent.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用访问浏览器</span></span><br><span class="line"><span class="comment"># 如果你用chrome浏览器你会看到react app的界面</span></span><br><span class="line"><span class="comment"># 如果你用firefox浏览器你会看到vue app的界面</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮，会获取到不同的内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据前端app不同使用不同版本的python服务</span></span><br><span class="line">istioctl create -f istio/route-rule-python-by-header.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此步骤创建的第一个路由规则保留不删除，为下面做实验提供方便</span></span><br><span class="line">istioctl delete -f istio/route-rule-python-by-header.yml</span><br></pre></td></tr></table></figure><h4 id="根据源服务把流量导向不同版本"><a href="#根据源服务把流量导向不同版本" class="headerlink" title="根据源服务把流量导向不同版本"></a>根据源服务把流量导向不同版本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-by-source.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时规则如下</span></span><br><span class="line"><span class="comment"># 所有chrome浏览器都走v1版本服务</span></span><br><span class="line"><span class="comment"># 所有firefox浏览器都走v2版本服务</span></span><br><span class="line"><span class="comment"># react-----&gt;Python2.7.15-----&gt;Gogo1.9.6</span></span><br><span class="line"><span class="comment"># vue-----&gt;Python3.6.5-----&gt;Gogo1.10.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-go-by-source.yml</span><br></pre></td></tr></table></figure><h4 id="指定权重进行流量分隔"><a href="#指定权重进行流量分隔" class="headerlink" title="指定权重进行流量分隔"></a>指定权重进行流量分隔</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定权重把流量分隔</span></span><br><span class="line"><span class="comment"># 25%流量路由到v1版本</span></span><br><span class="line"><span class="comment"># 75%流量路由到v2版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-v1-v2.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-go-v1-v2.yaml</span><br></pre></td></tr></table></figure><h4 id="集群内访问公开服务"><a href="#集群内访问公开服务" class="headerlink" title="集群内访问公开服务"></a>集群内访问公开服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下，启用了istio的服务是无法访问外部url的</span></span><br><span class="line"><span class="comment"># 如果需要访问外部url，需要使用egress进行配置</span></span><br><span class="line"><span class="comment"># egress同样支持设置路由规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http</span></span><br><span class="line">istioctl create -f istio/egress-rule-http-bin.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp</span></span><br><span class="line">istioctl create -f istio/egress-rule-tcp-wikipedia.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">istioctl get egressrule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 使用exec进入作为测试源使用的pod</span></span><br><span class="line">kubectl apply -f istio/sleep.yaml</span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="built_in">export</span> SOURCE_POD=$(kubectl get pod -l app=sleep -o jsonpath=&#123;.items..metadata.name&#125;)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$SOURCE_POD</span> -c sleep bash</span><br><span class="line"><span class="comment"># http测试</span></span><br><span class="line">curl http://httpbin.org/headers</span><br><span class="line"><span class="comment"># tcp测试</span></span><br><span class="line">curl -o /dev/null -s -w <span class="string">"%&#123;http_code&#125;\n"</span> https://www.wikipedia.org</span><br><span class="line">curl -s https://en.wikipedia.org/wiki/Main_Page | grep articlecount | grep <span class="string">'Special:Statistics'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">istioctl delete -f istio/egress-rule-http-bin.yml</span><br><span class="line">istioctl delete -f istio/egress-rule-tcp-wikipedia.yml</span><br><span class="line">kubectl delete -f istio/sleep.yaml</span><br></pre></td></tr></table></figure><h3 id="故障管理"><a href="#故障管理" class="headerlink" title="故障管理"></a>故障管理</h3><ul><li>调用超时设置和重试设置</li><li>故障注入，模拟服务故障</li></ul><h4 id="设置超时时间与模拟服务超时故障"><a href="#设置超时时间与模拟服务超时故障" class="headerlink" title="设置超时时间与模拟服务超时故障"></a>设置超时时间与模拟服务超时故障</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置python服务超时时间</span></span><br><span class="line">istioctl create -f istio/route-rule-python-timeout.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟go服务超时故障</span></span><br><span class="line">istioctl create -f istio/route-rule-go-delay.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用浏览器访问并打开调试面板查看网络标签（按F12键）</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮观察响应时间</span></span><br><span class="line"><span class="comment"># 会看到平均50%的请求会返回504超时</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-python-timeout.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-delay.yml</span><br></pre></td></tr></table></figure><p><img src="/posts/25/istio-timeout-delay-test.png" alt="超时模拟"></p><h4 id="设置重试与模拟服务500故障"><a href="#设置重试与模拟服务500故障" class="headerlink" title="设置重试与模拟服务500故障"></a>设置重试与模拟服务500故障</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置python服务超时时间</span></span><br><span class="line">istioctl create -f istio/route-rule-python-retry.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟go服务超时故障</span></span><br><span class="line">istioctl create -f istio/route-rule-go-abort.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用浏览器访问并打开调试面板查看网络标签（按F12键）</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮观察响应时间</span></span><br><span class="line"><span class="comment"># 会看到部分请求会返回500错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-python-retry.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-abort.yml</span><br></pre></td></tr></table></figure><p><img src="/posts/25/istio-retry-abort-test.png" alt="模拟服务500故障"></p><h4 id="超时和服务故障模拟配合使用"><a href="#超时和服务故障模拟配合使用" class="headerlink" title="超时和服务故障模拟配合使用"></a>超时和服务故障模拟配合使用</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有请求延迟5秒钟，然后失败其中的10％</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">  route:</span></span><br><span class="line"><span class="attr">  - labels:</span></span><br><span class="line"><span class="attr">      version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">  httpFault:</span></span><br><span class="line"><span class="attr">    delay:</span></span><br><span class="line"><span class="attr">      fixedDelay:</span> <span class="number">5</span><span class="string">s</span></span><br><span class="line"><span class="attr">    abort:</span></span><br><span class="line"><span class="attr">      percent:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      httpStatus:</span> <span class="number">400</span></span><br></pre></td></tr></table></figure><h4 id="熔断器"><a href="#熔断器" class="headerlink" title="熔断器"></a>熔断器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 熔断器规则需要应用到路由规则上</span></span><br><span class="line"><span class="comment"># 需要先配置至少一个路由规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置路由规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-default.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置熔断规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-cb.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看规则</span></span><br><span class="line">istioctl get destinationpolicy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试用的fortio</span></span><br><span class="line">kubectl apply -f &lt;(istioctl kube-inject --debug -f istio/fortio-deploy.yaml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常访问测试</span></span><br><span class="line">FORTIO_POD=$(kubectl get pod | grep fortio | awk <span class="string">'&#123; print $1 &#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -curl http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试熔断 2并发</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -c 2 -qps 0 -n 20 -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试熔断 3并发</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -c 3 -qps 0 -n 20 -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加并发会看到失败的请求占比增高</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line"><span class="comment"># upstream_rq_pending_overflow 表示被熔断的请求数</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c istio-proxy  -- sh -c <span class="string">'curl localhost:15000/stats'</span> | grep service-go | grep pending</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f istio/fortio-deploy.yaml</span><br><span class="line">istioctl delete -f istio/route-rule-go-default.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-cb.yml</span><br></pre></td></tr></table></figure><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p>动态设置服务qps</p><ul><li><a href="https://github.com/istio/istio/blob/master/samples/bookinfo/kube/mixer-rule-ratings-ratelimit.yaml" target="_blank" rel="noopener">https://github.com/istio/istio/blob/master/samples/bookinfo/kube/mixer-rule-ratings-ratelimit.yaml</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建service-python默认路由</span></span><br><span class="line"><span class="comment"># 经测试，一定要配置路由规则，否则无法完成限流</span></span><br><span class="line"><span class="comment"># 所以极有可能限流是配置在路由规则上的</span></span><br><span class="line"><span class="comment"># 在路由时进行限流统计</span></span><br><span class="line">istioctl create -f istio/route-rule-python-default.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置一个速率限制的memquota适配器</span></span><br><span class="line"><span class="comment"># 默认设置500qps</span></span><br><span class="line">istioctl create -f istio/ratelimit-handler.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置速率限制实例和规则</span></span><br><span class="line">istioctl create -f istio/ratelimit-rule-service-go.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get memquota -n istio-system</span><br><span class="line">kubectl get quota -n istio-system</span><br><span class="line">kubectl get rule -n istio-system</span><br><span class="line">kubectl get quotaspec -n istio-system</span><br><span class="line">kubectl get quotaspecbinding -n istio-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试用的fortio</span></span><br><span class="line">kubectl apply -f &lt;(istioctl kube-inject -f istio/fortio-deploy.yaml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常访问测试</span></span><br><span class="line">FORTIO_POD=$(kubectl get pod | grep fortio | awk <span class="string">'&#123; print $1 &#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -curl http://service-python/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 会出现部分请求不正常</span></span><br><span class="line"><span class="comment"># python 返回 code 500</span></span><br><span class="line"><span class="comment"># go 返回 code 429</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -qps 20 -n 100 -loglevel Warning http://service-python/env</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -qps 50 -n 100 -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">istioctl delete -f istio/route-rule-python-default.yml</span><br><span class="line">istioctl delete -f istio/ratelimit-handler.yaml</span><br><span class="line">istioctl delete -f istio/ratelimit-rule-service-go.yaml</span><br><span class="line">kubectl delete -f istio/fortio-deploy.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带条件的速率限制</span></span><br><span class="line">apiVersion: config.istio.io/v1alpha2</span><br><span class="line">kind: rule</span><br><span class="line">metadata:</span><br><span class="line"> name: quota</span><br><span class="line"> namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line"> match: source.namespace != destination.namespace</span><br><span class="line"> actions:</span><br><span class="line"> - handler: handler.memquota</span><br><span class="line">   instances:</span><br><span class="line">   - requestcount.quota</span><br></pre></td></tr></table></figure><h3 id="流量镜像"><a href="#流量镜像" class="headerlink" title="流量镜像"></a>流量镜像</h3><p>复制服务的流量到别一个镜像服务，一般用于线上新上服务的测试。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建默认策略</span></span><br><span class="line"><span class="comment"># 默认所有流量路由到v1</span></span><br><span class="line">istioctl create -f istio/route-rule-go-default.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试用的fortio</span></span><br><span class="line">kubectl apply -f &lt;(istioctl kube-inject -f istio/fortio-deploy.yaml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常访问测试</span></span><br><span class="line">FORTIO_POD=$(kubectl get pod | grep fortio | awk <span class="string">'&#123; print $1 &#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -curl http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看v1的日志</span></span><br><span class="line">kubectl logs -f $(kubectl get pods | grep service-go-v1 | awk <span class="string">'&#123;print $1&#125;'</span>| head -n 1) -c service-go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看v2的日志</span></span><br><span class="line"><span class="comment"># 再开一个终端查看日志</span></span><br><span class="line">kubectl logs -f $(kubectl get pods | grep service-go-v2 | awk <span class="string">'&#123;print $1&#125;'</span>| head -n 1) -c service-go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建镜像规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-mirror.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试多次访问</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -c 10 -qps 0 -t 10s -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f istio/fortio-deploy.yaml</span><br><span class="line">istioctl delete -f istio/route-rule-go-default.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-mirror.yml</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除相关deploy和svc</span></span><br><span class="line">kubectl delete -f service/go/v1/go-v1.yml</span><br><span class="line">kubectl delete -f service/go/v2/go-v2.yml</span><br><span class="line">kubectl delete -f service/python/v1/python-v1.yml</span><br><span class="line">kubectl delete -f service/python/v2/python-v2.yml</span><br><span class="line">kubectl delete -f service/js/v1/js-v1.yml</span><br><span class="line">kubectl delete -f service/js/v2/js-v2.yml</span><br><span class="line">kubectl delete -f service/node/v1/node-v1.yml</span><br><span class="line">kubectl delete -f service/node/v2/node-v2.yml</span><br><span class="line">kubectl delete -f service/lua/v1/lua-v1.yml</span><br><span class="line">kubectl delete -f service/lua/v2/lua-v2.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">kubectl delete -f istio/ingress-python.yml</span><br><span class="line">kubectl delete -f istio/ingress-js.yml</span><br><span class="line">istioctl delete routerule $(istioctl get routerule | grep RouteRule | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://istio.doczh.cn" target="_blank" rel="noopener">http://istio.doczh.cn</a></li><li><a href="https://istio.io/docs" target="_blank" rel="noopener">https://istio.io/docs</a></li><li><a href="https://istio.io/docs/reference/config/istio.networking.v1alpha3.html" target="_blank" rel="noopener">https://istio.io/docs/reference/config/istio.networking.v1alpha3.html</a></li><li><a href="https://istio.io/docs/reference/config/istio.routing.v1alpha1.html" target="_blank" rel="noopener">https://istio.io/docs/reference/config/istio.routing.v1alpha1.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> service mesh </tag>
            
            <tag> istio </tag>
            
            <tag> k8s </tag>
            
            <tag> microservice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio安装测试</title>
      <link href="/posts/24/"/>
      <url>/posts/24/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>istio</code>是一个<code>service mesh</code>开源实现，由Google/IBM/Lyft共同开发。与之类似的还有<code>conduit</code>，但是功能不如<code>istio</code>丰富稳定。架构图如下：<br><a id="more"></a><br><img src="/posts/24/istio-arch.svg" alt="istio-arch"> </p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去下面的地址下载压缩包</span></span><br><span class="line"><span class="comment"># https://github.com/istio/istio/releases</span></span><br><span class="line">wget https://github.com/istio/istio/releases/download/0.7.1/istio-0.7.1-linux.tar.gz</span><br><span class="line">tar xf istio-0.7.1-linux.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用官方的安装脚本安装</span></span><br><span class="line">curl -L https://git.io/getLatestIstio | sh -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装配置环境变量</span></span><br><span class="line">mv istio-0.7.1 /usr/<span class="built_in">local</span>/</span><br><span class="line">ln -sv /usr/<span class="built_in">local</span>/istio-0.7.1 /usr/<span class="built_in">local</span>/istio</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=/usr/local/istio/bin:$PATH'</span> &gt; /etc/profile.d/istio.sh</span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/istio.sh</span><br><span class="line">istioctl version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果环境不是云环境，不支持LoadBalancer</span></span><br><span class="line"><span class="comment"># 作如下修改，使得 ingress 监听在80和443端口</span></span><br><span class="line"><span class="comment"># 修改 Istio ingress 使用 NodePort</span></span><br><span class="line"><span class="comment"># 修改使用主机端口映射</span></span><br><span class="line"><span class="comment"># 使用此修改版本之后，每台机器只能运行单个实例</span></span><br><span class="line"><span class="comment"># 大概在1548-1590行左右</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line">cp install/kubernetes/istio.yaml install/kubernetes/istio.yaml.ori</span><br><span class="line">vim install/kubernetes/istio.yaml</span><br><span class="line">...</span><br><span class="line"><span class="comment">################################</span></span><br><span class="line"><span class="comment"># Istio ingress</span></span><br><span class="line"><span class="comment">################################</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: istio-ingress</span><br><span class="line">  namespace: istio-system</span><br><span class="line">  labels:</span><br><span class="line">    istio: ingress</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment">#type: LoadBalancer</span></span><br><span class="line">  <span class="comment"># 使用NodePort方式</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line"><span class="comment">#   nodePort: 32000</span></span><br><span class="line">    name: http</span><br><span class="line">  - port: 443</span><br><span class="line">    name: https</span><br><span class="line">  selector:</span><br><span class="line">    istio: ingress</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line"><span class="comment">#kind: Deployment</span></span><br><span class="line"><span class="comment"># 使用DaemonSet部署方式</span></span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: istio-ingress</span><br><span class="line">  namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment">#DaemonSet不支持replicas</span></span><br><span class="line">  <span class="comment">#replicas: 1</span></span><br><span class="line">  template:</span><br><span class="line">...</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          <span class="comment">#主机80端口映射</span></span><br><span class="line">          hostPort: 80</span><br><span class="line">        - containerPort: 443</span><br><span class="line">          <span class="comment">#主机443端口映射</span></span><br><span class="line">          hostPort: 443</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下两种选择一种安装方式</span></span><br><span class="line"><span class="comment"># 安装不使用认证（不使用tls）</span></span><br><span class="line">kubectl apply -f install/kubernetes/istio.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装使用认证（使用tls）</span></span><br><span class="line">kubectl apply -f install/kubernetes/istio-auth.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get svc -n istio-system</span><br><span class="line">kubectl get pods -n istio-system</span><br></pre></td></tr></table></figure><h3 id="启用自动注入-sidecar"><a href="#启用自动注入-sidecar" class="headerlink" title="启用自动注入 sidecar"></a>启用自动注入 sidecar</h3><ul><li><p>不开启自动注入部署应用需要使用如下方式的命令</p><p><code>kubectl apply -f &lt;(istioctl kube-inject -f samples/bookinfo/kube/bookinfo.yaml)</code></p></li><li><p>开启自动注入后，使用正常命令即可部署应用</p><p><code>kubectl apply -f samples/bookinfo/kube/bookinfo.yaml</code></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k8s 1.9 版本以后才能使用</span></span><br><span class="line"><span class="comment"># 查看是否支持</span></span><br><span class="line">kubectl api-versions | grep admissionregistration</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除了要满足以上条件外还需要检查kube-apiserver启动的参数</span></span><br><span class="line"><span class="comment"># k8s 1.9 版本要确保 --admission-control 里有 MutatingAdmissionWebhook,ValidatingAdmissionWebhook</span></span><br><span class="line"><span class="comment"># k8s 1.9 之后的版本要确保 --enable-admission-plugins 里有MutatingAdmissionWebhook,ValidatingAdmissionWebhook</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成所需要的证书</span></span><br><span class="line">./install/kubernetes/webhook-create-signed-cert.sh \</span><br><span class="line">    --service istio-sidecar-injector \</span><br><span class="line">    --namespace istio-system \</span><br><span class="line">    --secret sidecar-injector-certs</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 创建配置configmap</span></span><br><span class="line">kubectl apply -f install/kubernetes/istio-sidecar-injector-configmap-release.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成相关yaml</span></span><br><span class="line">cat install/kubernetes/istio-sidecar-injector.yaml | \</span><br><span class="line">     ./install/kubernetes/webhook-patch-ca-bundle.sh &gt; \</span><br><span class="line">     install/kubernetes/istio-sidecar-injector-with-ca-bundle.yaml</span><br><span class="line">     </span><br><span class="line"><span class="comment"># 安装webhook</span></span><br><span class="line">kubectl apply -f install/kubernetes/istio-sidecar-injector-with-ca-bundle.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl -n istio-system get deployment -listio=sidecar-injector</span><br><span class="line">kubectl get namespace -L istio-injection</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试自动注入</span></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f samples/sleep/sleep.yaml </span><br><span class="line">kubectl get deployment -o wide</span><br><span class="line">kubectl get pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 default namespace 开启自动注入</span></span><br><span class="line">kubectl label namespace default istio-injection=enabled</span><br><span class="line">kubectl get namespace -L istio-injection</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除创建的pod，等待重建</span></span><br><span class="line">kubectl delete pod $(kubectl get pod | grep sleep | cut -d <span class="string">' '</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看重建后的pod</span></span><br><span class="line"><span class="comment"># 查看是否有istio-proxy容器</span></span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl describe pod $(kubectl get pod | grep sleep | cut -d <span class="string">' '</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f samples/sleep/sleep.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭自动注入</span></span><br><span class="line">kubectl label namespace default istio-injection-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭部分pod的自动注入功能</span></span><br><span class="line">...</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      annotations:</span><br><span class="line">        sidecar.istio.io/inject: <span class="string">"false"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="部署官方测试用例"><a href="#部署官方测试用例" class="headerlink" title="部署官方测试用例"></a>部署官方测试用例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动（未开启自动注入）</span></span><br><span class="line">kubectl apply -f &lt;(istioctl kube-inject -f samples/bookinfo/kube/bookinfo.yaml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动（已开启自动注入）</span></span><br><span class="line">kubectl apply -f samples/bookinfo/kube/bookinfo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get services</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get ingress -o wide</span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行访问测试</span></span><br><span class="line">GATEWAY_URL=$(kubectl get po -l istio=ingress -n istio-system -o <span class="string">'jsonpath=&#123;.items[0].status.hostIP&#125;'</span>):$(kubectl get svc istio-ingress -n istio-system -o <span class="string">'jsonpath=&#123;.spec.ports[0].nodePort&#125;'</span>)</span><br><span class="line"></span><br><span class="line">curl -o /dev/null -s -w <span class="string">"%&#123;http_code&#125;\n"</span> http://<span class="variable">$&#123;GATEWAY_URL&#125;</span>/productpage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问测试</span></span><br><span class="line">NODE_PORT=$(kubectl get svc istio-ingress -n istio-system -o jsonpath=<span class="string">'&#123;.spec.ports[0].nodePort&#125;'</span>)</span><br><span class="line">NODE_IP=<span class="string">'11.11.11.112'</span></span><br><span class="line"><span class="built_in">echo</span> http://<span class="variable">$&#123;NODE_IP&#125;</span>:<span class="variable">$&#123;NODE_PORT&#125;</span>/productpage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用daemonset方式部署可以使用如下方式访问</span></span><br><span class="line"><span class="comment"># 11.11.11.112为其中一个node节点的ip</span></span><br><span class="line">curl http://11.11.11.112/productpage</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理官方用例</span></span><br><span class="line">samples/bookinfo/kube/cleanup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理istio</span></span><br><span class="line">kubectl delete -f install/kubernetes/istio.yaml</span><br><span class="line"><span class="comment"># kubectl delete -f install/kubernetes/istio-auth.yaml</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://istio.io/docs/setup/kubernetes/quick-start.html" target="_blank" rel="noopener">https://istio.io/docs/setup/kubernetes/quick-start.html</a></li><li><a href="https://istio.io/docs/guides/bookinfo.html" target="_blank" rel="noopener">https://istio.io/docs/guides/bookinfo.html</a></li><li><a href="https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection" target="_blank" rel="noopener">https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> service mesh </tag>
            
            <tag> istio </tag>
            
            <tag> k8s </tag>
            
            <tag> microservice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s安装traefik作为ingress</title>
      <link href="/posts/23/"/>
      <url>/posts/23/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>traefik 是一个前端负载均衡器，对于微服务架构尤其是 kubernetes 等编排工具具有良好的支持；同 nginx 等相比，traefik 能够自动感知后端容器变化，从而实现自动服务发现。</p><p>traefik部署在k8s上分为daemonset和deployment两种方式各有优缺点：</p><ul><li>daemonset  能确定有哪些node在运行traefik，所以可以确定的知道后端ip，但是不能方便的伸缩</li><li>deployment 可以更方便的伸缩，但是不能确定有哪些node在运行traefik所以不能确定的知道后端ip</li></ul><a id="more"></a><p>一般部署两种不同类型的traefik:</p><ul><li>面向内部(internal)服务的traefik，建议可以使用deployment的方式</li><li>面向外部(external)服务的traefik，建议可以使用daemonset的方式</li></ul><p>建议使用traffic-type标签</p><ul><li>traffic-type: external</li><li>traffic-type: internal</li></ul><p>traefik相应地使用labelSelector</p><ul><li>traffic-type=internal</li><li>traffic-type=external</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mkdir traefik &amp;&amp; <span class="built_in">cd</span> traefik</span><br><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/traefik-rbac.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置rbac</span></span><br><span class="line">kubectl apply -f traefik-rbac.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下两种方式选择一个</span></span><br><span class="line"><span class="comment"># 80 提供正常服务，8080 是其自带的 UI 界面</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以daemonset方式启动traefik</span></span><br><span class="line"><span class="comment"># 会在所有node节点启动一个traefik并监听在80端口</span></span><br><span class="line"><span class="comment"># master节点不会启动traefik</span></span><br><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/traefik-ds.yaml</span><br><span class="line">kubectl apply -f traefik-ds.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以deployment方式启动traefik</span></span><br><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/traefik-deployment.yaml</span><br><span class="line">kubectl apply -f traefik-deployment.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问测试，如果有响应说明安装正确</span></span><br><span class="line"><span class="comment"># 应该返回404</span></span><br><span class="line"><span class="comment"># 如果以daemonset方式启动traefik使用如下方式验证</span></span><br><span class="line"><span class="comment"># 11.11.11.112为任何一个node节点的ip</span></span><br><span class="line">curl 11.11.11.112</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果以deployment方式启动traefik</span></span><br><span class="line"><span class="comment"># 访问node:nodeport或者集群ip验证</span></span><br></pre></td></tr></table></figure><h3 id="部署Traefik-Web-UI"><a href="#部署Traefik-Web-UI" class="headerlink" title="部署Træfik Web UI"></a>部署Træfik Web UI</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/ui.yaml</span><br><span class="line">kubectl apply -f ui.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问webui</span></span><br><span class="line"><span class="comment"># 需要先配置host</span></span><br><span class="line"><span class="comment"># 11.11.11.112为任何一个node节点的ip</span></span><br><span class="line">11.11.11.112 traefik-ui.minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问如下地址</span></span><br><span class="line">http://traefik-ui.minikube/</span><br></pre></td></tr></table></figure><h3 id="使用basic验证"><a href="#使用basic验证" class="headerlink" title="使用basic验证"></a>使用basic验证</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成加密密码，如果没有安装htpasswd可以在线生成</span></span><br><span class="line"><span class="comment"># https://tool.lu/htpasswd/</span></span><br><span class="line">htpasswd -c ./auth myusername</span><br><span class="line">cat auth</span><br><span class="line">myusername:<span class="variable">$apr1</span><span class="variable">$78Jyn</span>/1K<span class="variable">$ERHKVRPPlzAX8eBtLuvRZ0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从密码文件创建secret</span></span><br><span class="line"><span class="comment"># monitoring必须和ingress rule处于同一个namespace </span></span><br><span class="line">kubectl create secret generic mysecret --from-file auth --namespace=monitoring</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建ingress</span></span><br><span class="line">cat &gt;prometheus-ingress.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line"> name: prometheus-dashboard</span><br><span class="line"> namespace: monitoring</span><br><span class="line"> annotations:</span><br><span class="line">   kubernetes.io/ingress.class: traefik</span><br><span class="line">   ingress.kubernetes.io/auth-type: <span class="string">"basic"</span></span><br><span class="line">   ingress.kubernetes.io/auth-secret: <span class="string">"mysecret"</span></span><br><span class="line">spec:</span><br><span class="line"> rules:</span><br><span class="line"> - host: dashboard.prometheus.example.com</span><br><span class="line">   http:</span><br><span class="line">     paths:</span><br><span class="line">     - backend:</span><br><span class="line">         serviceName: prometheus</span><br><span class="line">         servicePort: 9090</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">kubectl create -f prometheus-ingress.yaml -n monitoring</span><br></pre></td></tr></table></figure><h3 id="官方实例"><a href="#官方实例" class="headerlink" title="官方实例"></a>官方实例</h3><p><strong>1. 根据域名(host)路由</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># deployment</span></span><br><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/cheese-deployments.yaml</span><br><span class="line">kubectl apply -f cheese-deployments.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># service</span></span><br><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/cheese-services.yaml</span><br><span class="line">kubectl apply -f cheese-services.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># ingress</span></span><br><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/cheese-ingress.yaml</span><br><span class="line">kubectl apply -f cheese-ingress.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl get ingress</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 配置hosts</span></span><br><span class="line">11.11.11.112 stilton.minikube cheddar.minikube wensleydale.minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问测试</span></span><br><span class="line">http://stilton.minikube/</span><br><span class="line">http://cheddar.minikube/</span><br><span class="line">http://wensleydale.minikube/</span><br></pre></td></tr></table></figure></p><p><strong>2. 根据路径(path)路由</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用新的ingress</span></span><br><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/cheeses-ingress.yaml</span><br><span class="line">kubectl apply -f cheeses-ingress.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 配置hosts</span></span><br><span class="line">11.11.11.112 cheeses.minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问测试</span></span><br><span class="line">http://cheeses.minikube/stilton/</span><br><span class="line">http://cheeses.minikube/cheddar/</span><br><span class="line">http://cheeses.minikube/wensleydale/</span><br></pre></td></tr></table></figure></p><p><strong>3. 指定路由优先级</strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">wildcard-cheeses</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">traefik.frontend.priority:</span> <span class="string">"1"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">*.minikube</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">        backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">stilton</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="string">http</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">specific-cheeses</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">traefik.frontend.priority:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">specific.minikube</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">        backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">stilton</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="string">http</span></span><br></pre></td></tr></table></figure></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://docs.traefik.io/user-guide/kubernetes/" target="_blank" rel="noopener">https://docs.traefik.io/user-guide/kubernetes/</a></li><li><a href="https://mritd.me/2016/12/06/try-traefik-on-kubernetes/" target="_blank" rel="noopener">https://mritd.me/2016/12/06/try-traefik-on-kubernetes/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> ingress </tag>
            
            <tag> traefik </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10安装配置minikube</title>
      <link href="/posts/22/"/>
      <url>/posts/22/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>minukube</code>是一个可以让开发人员在本地环境运行k8s的软件，便于开发人员在本地测试运行k8s</p><a id="more"></a><blockquote><p>相关下载链接</p><p>链接：<a href="https://pan.baidu.com/s/10dJLJiUnXsZcA5c6HwWVqQ" target="_blank" rel="noopener">https://pan.baidu.com/s/10dJLJiUnXsZcA5c6HwWVqQ</a> 密码：qh6k</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>1. 安装minikube</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 到 minikube release 页面下载 minikube 安装文件</span></span><br><span class="line">https://github.com/kubernetes/minikube/releases/download/v0.26.1/minikube-installer.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接双击安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="comment"># 如果不设置，默认会在C盘中安装相关文件</span></span><br><span class="line">MINIKUBE_HOME=D:\minikube</span><br></pre></td></tr></table></figure><p><strong>2. 安装kubectl</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 如果不能正常下载 可能需要翻墙</span></span><br><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/windows/amd64/kubectl.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把kubectl所在目录放在系统path中</span></span><br><span class="line"><span class="comment"># 也可以放在minikube的安装目录中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">kubectl version</span><br></pre></td></tr></table></figure><p><strong>3.安装virtualbox</strong></p><blockquote><p>官方下载<code>virtualbox</code>对应平台的软件包安装</p></blockquote><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取k8s可用版本</span></span><br><span class="line">minikube get-k8s-versions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动之前因为需要下载minikube-iso和localkube，所以需要使用代理</span></span><br><span class="line"><span class="comment"># 有时不需要使用代理也能下载，但是启动之后 由于需要拉取gcr.io上面的镜像</span></span><br><span class="line"><span class="comment"># 所以仍然需要配置docker的代理</span></span><br><span class="line"><span class="comment"># 使用minikube ssh连接到minikube主机里</span></span><br><span class="line"><span class="comment"># 下载好相关镜像，再重新打tag为gcr.io也是一种方法</span></span><br><span class="line"><span class="comment"># 下载存储在 MINIKUBE_HOME/.minikube/cache 目录下</span></span><br><span class="line"><span class="comment"># MINIKUBE_HOME 如果没有设置 默认为用户的家目录 </span></span><br><span class="line">https_proxy=http://127.0.0.1:1080 minikube start \</span><br><span class="line">--vm-driver virtualbox \</span><br><span class="line">--memory 2048 --<span class="built_in">disable</span>-driver-mounts \</span><br><span class="line">--registry-mirror https://tfhzn46h.mirror.aliyuncs.com \</span><br><span class="line">--docker-env http_proxy=http://172.16.0.10:1080 \</span><br><span class="line">--docker-env https_proxy=http://172.16.0.10:1080 \</span><br><span class="line">--docker-env no_proxy=<span class="string">'192.168.99.0/24,.docker.io,.aliyuncs.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后根据提示操作</span></span><br></pre></td></tr></table></figure><h3 id="基本测试使用"><a href="#基本测试使用" class="headerlink" title="基本测试使用"></a>基本测试使用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取minikube的ip</span></span><br><span class="line">minikube ip</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh连接到minikube主机里</span></span><br><span class="line"><span class="comment"># 使用git-bash可能会无法正常连接</span></span><br><span class="line">minikube ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方示例</span></span><br><span class="line">kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.8 --port=8080</span><br><span class="line">kubectl expose deployment hello-minikube --<span class="built_in">type</span>=NodePort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx并创建服务</span></span><br><span class="line">kubectl run nginx --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看访问</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">curl $(minikube service hello-minikube --url)</span><br><span class="line">curl $(minikube service nginx --url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete deployment nginx hello-minikube</span><br><span class="line">kubectl delete svc nginx hello-minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止删除minikube集群</span></span><br><span class="line">minikube stop</span><br><span class="line">minikube delete</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看其他组件</span></span><br><span class="line">minikube addons list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用组件</span></span><br><span class="line">minikube addons <span class="built_in">enable</span> heapster</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在浏览器中打开组件</span></span><br><span class="line">minikube addons open heapster</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/getting-started-guides/minikube/" target="_blank" rel="noopener">https://kubernetes.io/docs/getting-started-guides/minikube/</a></li><li><a href="https://github.com/kubernetes/minikube/blob/v0.24.1/README.md" target="_blank" rel="noopener">https://github.com/kubernetes/minikube/blob/v0.24.1/README.md</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> minikube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vagrant基于官方的box制作自己的基础box</title>
      <link href="/posts/21/"/>
      <url>/posts/21/</url>
      
        <content type="html"><![CDATA[<h3 id="使用vagrant启动虚拟机"><a href="#使用vagrant启动虚拟机" class="headerlink" title="使用vagrant启动虚拟机"></a>使用vagrant启动虚拟机</h3><a id="more"></a><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mkdir base &amp;&amp; <span class="built_in">cd</span> base</span><br><span class="line">cat &gt;Vagrantfile&lt;&lt;EOF</span><br><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">  <span class="comment"># centos-7.4-docker-17为你想使用的基础box</span></span><br><span class="line">  config.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">  config.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">  config.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">    v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"will"</span>]</span><br><span class="line">  end</span><br><span class="line">  config.vm.synced_folder <span class="string">"."</span>, <span class="string">"/vagrant"</span>, disabled: <span class="literal">true</span></span><br><span class="line">end</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure><h3 id="登录配置安装相关软件"><a href="#登录配置安装相关软件" class="headerlink" title="登录配置安装相关软件"></a>登录配置安装相关软件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用xshell等ssh工具登录</span></span><br><span class="line"><span class="comment"># 配置源</span></span><br><span class="line"><span class="comment"># 安装配置所需要的软件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成关机前做如下清理操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除网卡mac信息</span></span><br><span class="line">rm -f /etc/udev/rules.d/70-persistent-net.rules</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除临时文件</span></span><br><span class="line">yum clean all</span><br><span class="line">apt-get clean</span><br><span class="line">rm -rf /tmp/*</span><br><span class="line">rm -f /var/<span class="built_in">log</span>/wtmp /var/<span class="built_in">log</span>/btmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除命令历史记录</span></span><br><span class="line"><span class="built_in">history</span> -c</span><br><span class="line">&gt; .bash_history</span><br><span class="line">sudo su - vagrant</span><br><span class="line"><span class="built_in">history</span> -c</span><br><span class="line">&gt; .bash_history</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关机</span></span><br><span class="line">vagrant halt</span><br></pre></td></tr></table></figure><h3 id="制作基础box"><a href="#制作基础box" class="headerlink" title="制作基础box"></a>制作基础box</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;Vagrantfile.base&lt;&lt;EOF</span><br><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(2) <span class="keyword">do</span> |config|</span><br><span class="line">    <span class="comment"># Disable synced folders</span></span><br><span class="line">    config.vm.synced_folder <span class="string">"."</span>, <span class="string">"/vagrant"</span>, disabled: <span class="literal">true</span></span><br><span class="line">end</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># will为之前启动时设置的vm名</span></span><br><span class="line">vagrant package --base will --vagrantfile Vagrantfile.base --output will-base.box</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加制作完成的box</span></span><br><span class="line">vagrant box add base will-base.box</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">vagrant init base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line"><span class="comment"># 如果能ssh连接成功，表示基础box配置正确</span></span><br><span class="line">vagrant ssh-config</span><br><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://thornelabs.net/2013/11/11/create-a-centos-6-vagrant-base-box-from-scratch-using-virtualbox.html" target="_blank" rel="noopener">https://thornelabs.net/2013/11/11/create-a-centos-6-vagrant-base-box-from-scratch-using-virtualbox.html</a></li><li><a href="https://www.dravetech.com/blog/2016/01/14/vagrant_box_ios_xr.html" target="_blank" rel="noopener">https://www.dravetech.com/blog/2016/01/14/vagrant_box_ios_xr.html</a></li><li><a href="http://blog.pangyanhan.com/posts/2015-11-10-creating-a-vagrant-base-box.html" target="_blank" rel="noopener">http://blog.pangyanhan.com/posts/2015-11-10-creating-a-vagrant-base-box.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vagrant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vagrant快速搭建linux实验环境</title>
      <link href="/posts/20/"/>
      <url>/posts/20/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文主要介绍如何使用<code>vagrant</code>配合<code>virtualbox</code>快速搭建实验环境。<br><code>virtualbox</code>是一个开源跨平台虚拟机管理软件，功能类似收费的<code>vmware</code><br><code>vagrant</code>是一个开源的虚拟机配置编排软件，可以在命令行快速启动管理虚拟机。</p><a id="more"></a><blockquote><p>相关资源的百度云下载链接<br>链接：<a href="https://pan.baidu.com/s/1nt_b96SEOIIWl2gIrabPpg" target="_blank" rel="noopener">https://pan.baidu.com/s/1nt_b96SEOIIWl2gIrabPpg</a> 密码：6c3d</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>1.安装<code>virtualbox</code></strong></p><blockquote><p>官方下载<code>virtualbox</code>对应平台的软件包安装</p></blockquote><p><strong>2.安装<code>vagrant</code></strong></p><blockquote><p>官方下载<code>vagrant</code>对应平台的软件包安装，由于官方网站在国外，可能下载比较慢。</p></blockquote><p><strong>3.设置<code>virtualbox</code>虚拟机存方目录</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下 virtualbox 启动虚拟机会存放在用户的家目录里</span></span><br><span class="line"><span class="comment"># windows 下C盘可能过小，需要设置特定目录存储虚拟机</span></span><br><span class="line">VBoxManage setproperty machinefolder D:\virtualbox</span><br><span class="line">VBoxManage list systemproperties | grep machine</span><br></pre></td></tr></table></figure><h3 id="搭建实验环境"><a href="#搭建实验环境" class="headerlink" title="搭建实验环境"></a>搭建实验环境</h3><p><strong>1.下载导入相关box</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由于需要从国外拉取box，可能会很慢。推荐使用我存储在百度云的box</span></span><br><span class="line"><span class="comment"># 导入box</span></span><br><span class="line">vagrant box add centos-7.4-base centos-7.4-base.box</span><br><span class="line">vagrant box list</span><br></pre></td></tr></table></figure><p><strong>2.启动单机</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mkdir single &amp;&amp; <span class="built_in">cd</span> single</span><br><span class="line">cat &gt;Vagrantfile&lt;&lt;EOF</span><br><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">    config.vm.box = <span class="string">"centos-7.4-base"</span></span><br><span class="line">    config.vm.hostname = <span class="string">"will"</span></span><br><span class="line">    config.ssh.insert_key = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指定CPU和内存大小</span></span><br><span class="line">    config.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">      v.memory = 1024</span><br><span class="line">      v.cpus = 2</span><br><span class="line">      v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"will"</span>]</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置网络</span></span><br><span class="line">    config.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"11.11.11.111"</span></span><br><span class="line">    <span class="comment"># config.vm.network "private_network", ip: "192.168.22.10"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置启动后的操作</span></span><br><span class="line">    config.vm.provision <span class="string">"shell"</span>, inline: &lt;&lt;-SHELL</span><br><span class="line">      hostname</span><br><span class="line">    SHELL</span><br><span class="line">end</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure><p><strong>3.启动多主机</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mkdir double &amp;&amp; <span class="built_in">cd</span> double</span><br><span class="line">cat &gt;Vagrantfile&lt;&lt;EOF</span><br><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">    config.vm.define <span class="string">"web"</span> <span class="keyword">do</span> |web|</span><br><span class="line">        web.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">            v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"web"</span>, <span class="string">"--memory"</span>, <span class="string">"512"</span>]</span><br><span class="line">        end</span><br><span class="line">        web.vm.box = <span class="string">"centos-6.9"</span></span><br><span class="line">        web.vm.hostname = <span class="string">"web"</span></span><br><span class="line">        web.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"11.11.11.11"</span></span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    config.vm.define <span class="string">"db"</span> <span class="keyword">do</span> |db|</span><br><span class="line">        db.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">            v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"db"</span>, <span class="string">"--memory"</span>, <span class="string">"512"</span>]</span><br><span class="line">        end</span><br><span class="line">        db.vm.box = <span class="string">"centos-6.9"</span></span><br><span class="line">        db.vm.hostname = <span class="string">"db"</span></span><br><span class="line">        db.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"11.11.11.22"</span></span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure><p><strong>3.启动集群</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mkdir cluster &amp;&amp; <span class="built_in">cd</span> cluster</span><br><span class="line">cat &gt;Vagrantfile&lt;&lt;EOF</span><br><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">    (1..6).each <span class="keyword">do</span> |i|</span><br><span class="line">      config.vm.define <span class="string">"lab#&#123;i&#125;"</span> <span class="keyword">do</span> |node|</span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab#&#123;i&#125;"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"11.11.11.11#&#123;i&#125;"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"11.11.12.11#&#123;i&#125;"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          inline: <span class="string">"echo hello from node #&#123;i&#125;"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">          v.cpus = 4</span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"lab#&#123;i&#125;"</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</span><br><span class="line">        end</span><br><span class="line">      end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure><p><strong>4.连接虚拟机</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一般情况下虚拟机ssh连接用户名为 vagrant</span></span><br><span class="line"><span class="comment"># 一般情况下都不支持 密码登录， 可以登录之后自行配置支持密码登录</span></span><br><span class="line"><span class="comment"># 连接的sshkey存储在用户家目录下 .vagrant.d 目录下</span></span><br><span class="line"><span class="comment"># C:\Users\will\.vagrant.d\insecure_private_key</span></span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><blockquote><p>以下命令后面都可以接虚拟机名，只对指定虚拟机作操作</p><ul><li>启动虚拟机<ul><li>vagrant up</li></ul></li></ul></blockquote><ul><li><p>暂停虚拟机</p><ul><li>vagrant suspend</li></ul></li><li><p>关闭虚拟机</p><ul><li>vagrant halt</li></ul></li><li><p>删除虚拟机</p><ul><li>vagrant destroy</li></ul></li><li><p>存储快照</p><ul><li>vagrant snapshot save lab1 init</li></ul></li><li><p>恢复快照</p><ul><li>vagrant snapshot restore lab1 init</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vagrant </tag>
            
            <tag> virtualbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7配置k8s集群使用coredns</title>
      <link href="/posts/19/"/>
      <url>/posts/19/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>CoreDNS</code>是一个<code>Go</code>语言实现的链式插件<code>DNS服务端</code>，是CNCF成员，是一个高性能、易扩展的<code>DNS服务端</code>。可以很方便的部署在k8s集群中，用来代替<code>kube-dns</code>。</p><a id="more"></a><h3 id="使用kubeadm初始化时指定"><a href="#使用kubeadm初始化时指定" class="headerlink" title="使用kubeadm初始化时指定"></a>使用kubeadm初始化时指定</h3><blockquote><p> 安装方法与《centos7使用kubeadm安装k8s集群》基本一致<br>只需要简单修改<code>kubeadm-master.config</code>配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">MasterConfiguration</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.9.0</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">registry.cn-shanghai.aliyuncs.com/gcr-k8s</span></span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">registry.cn-shanghai.aliyuncs.com/gcr-k8s/etcd-amd64:3.1.10</span></span><br><span class="line"><span class="attr">api:</span></span><br><span class="line"><span class="attr">  advertiseAddress:</span> <span class="number">11.11</span><span class="number">.11</span><span class="number">.111</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line"><span class="attr">  podSubnet:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">featureGates:</span></span><br><span class="line"><span class="attr">  CoreDNS:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="单独部署coredns"><a href="#单独部署coredns" class="headerlink" title="单独部署coredns"></a>单独部署coredns</h3><blockquote><p>不依赖kubeadm的方式，适用于不是使用kubeadm创建的k8s集群，或者kubeadm初始化集群之后，删除了dns相关部署。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在calico网络中也配置一个coredns</span></span><br><span class="line"><span class="comment"># 10.96.0.10 为k8s官方指定的kube-dns地址</span></span><br><span class="line">mkdir coredns &amp;&amp; <span class="built_in">cd</span> coredns</span><br><span class="line">wget https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/coredns.yaml.sed</span><br><span class="line">wget https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/deploy.sh</span><br><span class="line">chmod +x deploy.sh</span><br><span class="line">./deploy.sh -i 10.96.0.10 &gt; coredns.yml</span><br><span class="line">kubectl apply -f coredns.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s与各网络插件集成</title>
      <link href="/posts/18/"/>
      <url>/posts/18/</url>
      
        <content type="html"><![CDATA[<h3 id="通用说明"><a href="#通用说明" class="headerlink" title="通用说明"></a>通用说明</h3><ul><li><p>如果多次换不同网络插件实验，每次实验前先把<code>/etc/cni/net.d/</code>目录下文件清空</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/cni/net.d/*</span><br></pre></td></tr></table></figure></li></ul><h3 id="flannel"><a href="#flannel" class="headerlink" title="flannel"></a>flannel</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建flannel目录下载相关文件</span></span><br><span class="line">mkdir flannel &amp;&amp; <span class="built_in">cd</span> flannel</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与kubeadm的pod-network参数配置的一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="calico"><a href="#calico" class="headerlink" title="calico"></a>calico</h3><p><strong>1.配置启动etcd集群</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次实验使用与k8s一个etcd集群</span></span><br><span class="line"><span class="comment"># 生境环境建议使用单独的一套集群</span></span><br></pre></td></tr></table></figure><p><strong>2.配置启动calico</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建calico目录下载相关文件</span></span><br><span class="line">mkdir calico &amp;&amp; <span class="built_in">cd</span> calico</span><br><span class="line">wget https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/rbac.yaml</span><br><span class="line">wget https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果启用了RBAC（默认k8s集群启用），配置RBAC</span></span><br><span class="line">kubectl apply -f rbac.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改calico.yaml文件中名为calico-config的ConfigMap中的etcd_endpoints参数为自己的etcd集群</span></span><br><span class="line">etcd_endpoints: <span class="string">"http://11.11.11.111:2379,http://11.11.11.112:2379,http://11.11.11.113:2379"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像为国内镜像</span></span><br><span class="line">sed -i <span class="string">'s@image: quay.io/calico/@image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/calico-@g'</span> calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><p><strong>3.参考文档</strong></p><ul><li><a href="https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/calico#installing-with-the-etcd-datastore" target="_blank" rel="noopener">https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/calico#installing-with-the-etcd-datastore</a></li></ul><h3 id="canal"><a href="#canal" class="headerlink" title="canal"></a>canal</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建flannel目录下载相关文件</span></span><br><span class="line">mkdir canal &amp;&amp; <span class="built_in">cd</span> canal</span><br><span class="line">wget https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/canal/rbac.yaml</span><br><span class="line">wget https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/canal/canal.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与kubeadm的pod-network参数配置的一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改calico镜像</span></span><br><span class="line">sed -i <span class="string">'s@image: quay.io/calico/@image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/calico-@g'</span> canal.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改flannel镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">       <span class="built_in">command</span>: [ <span class="string">"/opt/bin/flanneld"</span>, <span class="string">"--ip-masq"</span>, <span class="string">"--kube-subnet-mgr"</span>, <span class="string">"--iface=eth1"</span> ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f rbac.yaml</span><br><span class="line">kubectl apply -f canal.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><h3 id="kube-router"><a href="#kube-router" class="headerlink" title="kube-router"></a>kube-router</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次实验重新创建了集群，使用之前测试其他网络插件的集群环境没有成功</span></span><br><span class="line"><span class="comment"># 可能是由于环境干扰，实验时需要注意</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建kube-router目录下载相关文件</span></span><br><span class="line">mkdir kube-router &amp;&amp; <span class="built_in">cd</span> kube-router</span><br><span class="line">wget https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter-all-features.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下两种部署方式任选其一</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 只启用 pod网络通信，网络隔离策略 功能</span></span><br><span class="line">kubectl apply -f kubeadm-kuberouter.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 启用 pod网络通信，网络隔离策略，服务代理 所有功能</span></span><br><span class="line"><span class="comment"># 删除kube-proxy和其之前配置的服务代理</span></span><br><span class="line">kubectl apply -f kubeadm-kuberouter-all-features.yaml</span><br><span class="line">kubectl -n kube-system delete ds kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line">docker run --privileged --net=host registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.10.2 kube-proxy --cleanup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><h3 id="romana"><a href="#romana" class="headerlink" title="romana"></a>romana</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建flannel目录下载相关文件</span></span><br><span class="line">mkdir romana &amp;&amp; <span class="built_in">cd</span> romana</span><br><span class="line">wget https://raw.githubusercontent.com/romana/romana/master/containerize/specs/romana-kubeadm.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">sed -i <span class="string">'s@gcr.io/@registry.cn-hangzhou.aliyuncs.com/@g'</span> romana-kubeadm.yml</span><br><span class="line">sed -i <span class="string">'s@quay.io/romana/@registry.cn-shanghai.aliyuncs.com/gcr-k8s/romana-@g'</span> romana-kubeadm.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f romana-kubeadm.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><h3 id="CNI-Genie"><a href="#CNI-Genie" class="headerlink" title="CNI-Genie"></a>CNI-Genie</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CNI-Genie是华为开源的网络组件，可以使k8s同时部署多个网络插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在k8s集群中安装calico组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在k8s集群中安装flannel组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在k8s集群中安装Genie组件</span></span><br><span class="line">mkdir CNI-Genie &amp;&amp; <span class="built_in">cd</span> CNI-Genie</span><br><span class="line">wget  https://raw.githubusercontent.com/Huawei-PaaS/CNI-Genie/master/conf/1.8/genie.yaml</span><br><span class="line">sed -i <span class="string">'s@image: quay.io/cnigenie/v1.5:latest@image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/cnigenie-v1.5:latest@g'</span> genie.yaml</span><br><span class="line">kubectl apply -f genie.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">cat &gt;nginx-calico.yml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-calico</span><br><span class="line">  labels:</span><br><span class="line">    app: web</span><br><span class="line">  annotations:</span><br><span class="line">    cni: <span class="string">"calico"</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: nginx</span><br><span class="line">      image: nginx:alpine</span><br><span class="line">      imagePullPolicy: IfNotPresent</span><br><span class="line">      ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">EOF</span><br><span class="line">cat &gt;nginx-flannel.yml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-flannel</span><br><span class="line">  labels:</span><br><span class="line">    app: web</span><br><span class="line">  annotations:</span><br><span class="line">    cni: <span class="string">"flannel"</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: nginx</span><br><span class="line">      image: nginx:alpine</span><br><span class="line">      imagePullPolicy: IfNotPresent</span><br><span class="line">      ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f nginx-calico.yml</span><br><span class="line">kubectl apply -f nginx-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试网络通信</span></span><br><span class="line">kubectl <span class="built_in">exec</span> nginx-calico -i -t -- ping -c4 1.1.1.1</span><br><span class="line">kubectl <span class="built_in">exec</span> nginx-flannel -i -t -- ping -c4 1.1.1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于先启动的flannel，然后k8s创建了coredns，所以使用flannel cni的能正常使用dns</span></span><br><span class="line"><span class="comment"># 使用calico cni无法使用正常dns</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试dns</span></span><br><span class="line">kubectl <span class="built_in">exec</span> nginx-calico -i -t -- ping -c4 www.baidu.com</span><br><span class="line">kubectl <span class="built_in">exec</span> nginx-flannel -i -t -- ping -c4 www.baidu.com</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p> kube-router性能损失最小，时延最小，其他网络插件性能差距不大。除了flannel没有网络隔离策略，其他均支持网络隔离策略。CNI-Genie是一个可以让k8s使用多个cni网络插件的组件，暂时不支持隔离策略。</p><p>理论结果： kube-router &gt; calico &gt; canal = flannel = romana</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7使用kubeadm配置高可用k8s集群</title>
      <link href="/posts/17/"/>
      <url>/posts/17/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>使用<code>kubeadm</code>配置多<code>master</code>节点，实现高可用。<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="实验环境说明"><a href="#实验环境说明" class="headerlink" title="实验环境说明"></a>实验环境说明</h4><h5 id="实验架构图"><a href="#实验架构图" class="headerlink" title="实验架构图"></a>实验架构图</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lab1: etcd master haproxy keepalived 11.11.11.111</span><br><span class="line">lab2: etcd master haproxy keepalived 11.11.11.112</span><br><span class="line">lab3: etcd master haproxy keepalived 11.11.11.113</span><br><span class="line">lab4: node  11.11.11.114</span><br><span class="line">lab5: node  11.11.11.115</span><br><span class="line">lab6: node  11.11.11.116</span><br><span class="line"></span><br><span class="line">vip(loadblancer ip): 11.11.11.110</span><br></pre></td></tr></table></figure><h5 id="实验使用的Vagrantfile"><a href="#实验使用的Vagrantfile" class="headerlink" title="实验使用的Vagrantfile"></a>实验使用的<code>Vagrantfile</code></h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">6</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      config.vm.define <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"11.11.11.11<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          <span class="symbol">inline:</span> <span class="string">"echo hello from node <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">          v.cpus = <span class="number">2</span></span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--name"</span>, <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="在所有机器上安装kubeadm"><a href="#在所有机器上安装kubeadm" class="headerlink" title="在所有机器上安装kubeadm"></a>在所有机器上安装kubeadm</h4><p>参考之前的文章《centos7安装kubeadm》</p><h4 id="配置所有节点的kubelet"><a href="#配置所有节点的kubelet" class="headerlink" title="配置所有节点的kubelet"></a>配置所有节点的kubelet</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置kubelet使用国内可用镜像</span></span><br><span class="line"><span class="comment"># 修改/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span></span><br><span class="line"><span class="comment"># 添加如下配置 </span></span><br><span class="line">Environment=<span class="string">"KUBELET_EXTRA_ARGS=--pod-infra-container-image=registry.cn-shanghai.aliyuncs.com/gcr-k8s/pause-amd64:3.0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用命令</span></span><br><span class="line">sed -i <span class="string">'/ExecStart=$/i Environment="KUBELET_EXTRA_ARGS=--pod-infra-container-image=registry.cn-shanghai.aliyuncs.com/gcr-k8s/pause-amd64:3.0"'</span>  /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新载入配置</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h4 id="配置所有节点的hosts"><a href="#配置所有节点的hosts" class="headerlink" title="配置所有节点的hosts"></a>配置所有节点的hosts</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt;/etc/hosts&lt;&lt;EOF</span><br><span class="line">11.11.11.111 lab1</span><br><span class="line">11.11.11.112 lab2</span><br><span class="line">11.11.11.113 lab3</span><br><span class="line">11.11.11.114 lab4</span><br><span class="line">11.11.11.115 lab5</span><br><span class="line">11.11.11.116 lab6</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="启动etcd集群"><a href="#启动etcd集群" class="headerlink" title="启动etcd集群"></a>启动etcd集群</h4><p>在<code>lab1,lab2,lab3</code>节点上启动<code>etcd</code>集群</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lab1</span></span><br><span class="line">docker stop etcd &amp;&amp; docker rm etcd</span><br><span class="line">rm -rf /data/etcd</span><br><span class="line">mkdir -p /data/etcd</span><br><span class="line">docker run -d \</span><br><span class="line">--restart always \</span><br><span class="line">-v /etc/etcd/ssl/certs:/etc/ssl/certs \</span><br><span class="line">-v /data/etcd:/var/lib/etcd \</span><br><span class="line">-p 2380:2380 \</span><br><span class="line">-p 2379:2379 \</span><br><span class="line">--name etcd \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.1.12 \</span><br><span class="line">etcd --name=etcd0 \</span><br><span class="line">--advertise-client-urls=http://11.11.11.111:2379 \</span><br><span class="line">--listen-client-urls=http://0.0.0.0:2379 \</span><br><span class="line">--initial-advertise-peer-urls=http://11.11.11.111:2380 \</span><br><span class="line">--listen-peer-urls=http://0.0.0.0:2380 \</span><br><span class="line">--initial-cluster-token=9477af68bbee1b9ae037d6fd9e7efefd \</span><br><span class="line">--initial-cluster=etcd0=http://11.11.11.111:2380,etcd1=http://11.11.11.112:2380,etcd2=http://11.11.11.113:2380 \</span><br><span class="line">--initial-cluster-state=new \</span><br><span class="line">--auto-tls \</span><br><span class="line">--peer-auto-tls \</span><br><span class="line">--data-dir=/var/lib/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># lab2</span></span><br><span class="line">docker stop etcd &amp;&amp; docker rm etcd</span><br><span class="line">rm -rf /data/etcd</span><br><span class="line">mkdir -p /data/etcd</span><br><span class="line">docker run -d \</span><br><span class="line">--restart always \</span><br><span class="line">-v /etc/etcd/ssl/certs:/etc/ssl/certs \</span><br><span class="line">-v /data/etcd:/var/lib/etcd \</span><br><span class="line">-p 2380:2380 \</span><br><span class="line">-p 2379:2379 \</span><br><span class="line">--name etcd \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.1.12 \</span><br><span class="line">etcd --name=etcd1 \</span><br><span class="line">--advertise-client-urls=http://11.11.11.112:2379 \</span><br><span class="line">--listen-client-urls=http://0.0.0.0:2379 \</span><br><span class="line">--initial-advertise-peer-urls=http://11.11.11.112:2380 \</span><br><span class="line">--listen-peer-urls=http://0.0.0.0:2380 \</span><br><span class="line">--initial-cluster-token=9477af68bbee1b9ae037d6fd9e7efefd \</span><br><span class="line">--initial-cluster=etcd0=http://11.11.11.111:2380,etcd1=http://11.11.11.112:2380,etcd2=http://11.11.11.113:2380 \</span><br><span class="line">--initial-cluster-state=new \</span><br><span class="line">--auto-tls \</span><br><span class="line">--peer-auto-tls \</span><br><span class="line">--data-dir=/var/lib/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># lab3</span></span><br><span class="line">docker stop etcd &amp;&amp; docker rm etcd</span><br><span class="line">rm -rf /data/etcd</span><br><span class="line">mkdir -p /data/etcd</span><br><span class="line">docker run -d \</span><br><span class="line">--restart always \</span><br><span class="line">-v /etc/etcd/ssl/certs:/etc/ssl/certs \</span><br><span class="line">-v /data/etcd:/var/lib/etcd \</span><br><span class="line">-p 2380:2380 \</span><br><span class="line">-p 2379:2379 \</span><br><span class="line">--name etcd \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.1.12 \</span><br><span class="line">etcd --name=etcd2 \</span><br><span class="line">--advertise-client-urls=http://11.11.11.113:2379 \</span><br><span class="line">--listen-client-urls=http://0.0.0.0:2379 \</span><br><span class="line">--initial-advertise-peer-urls=http://11.11.11.113:2380 \</span><br><span class="line">--listen-peer-urls=http://0.0.0.0:2380 \</span><br><span class="line">--initial-cluster-token=9477af68bbee1b9ae037d6fd9e7efefd \</span><br><span class="line">--initial-cluster=etcd0=http://11.11.11.111:2380,etcd1=http://11.11.11.112:2380,etcd2=http://11.11.11.113:2380 \</span><br><span class="line">--initial-cluster-state=new \</span><br><span class="line">--auto-tls \</span><br><span class="line">--peer-auto-tls \</span><br><span class="line">--data-dir=/var/lib/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证查看集群</span></span><br><span class="line">docker <span class="built_in">exec</span> -ti etcd ash</span><br><span class="line">etcdctl member list</span><br><span class="line">etcdctl cluster-health</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h4 id="在第一台master节点初始化"><a href="#在第一台master节点初始化" class="headerlink" title="在第一台master节点初始化"></a>在第一台master节点初始化</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成token</span></span><br><span class="line"><span class="comment"># 保留token后面还要使用</span></span><br><span class="line">token=$(kubeadm token generate)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$token</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha1</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.10.1</span><br><span class="line"><span class="comment">#imageRepository: registry.cn-shanghai.aliyuncs.com/gcr-k8s</span></span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: 11.11.11.111</span><br><span class="line"></span><br><span class="line">apiServerExtraArgs:</span><br><span class="line">  endpoint-reconciler-type: lease</span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 192.168.0.0/16</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  endpoints:</span><br><span class="line">  - <span class="string">"http://11.11.11.111:2379"</span></span><br><span class="line">  - <span class="string">"http://11.11.11.112:2379"</span></span><br><span class="line">  - <span class="string">"http://11.11.11.113:2379"</span></span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- <span class="string">"lab1"</span></span><br><span class="line">- <span class="string">"lab2"</span></span><br><span class="line">- <span class="string">"lab3"</span></span><br><span class="line">- <span class="string">"11.11.11.111"</span></span><br><span class="line">- <span class="string">"11.11.11.112"</span></span><br><span class="line">- <span class="string">"11.11.11.113"</span></span><br><span class="line">- <span class="string">"11.11.11.110"</span></span><br><span class="line">- <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">token: <span class="variable">$token</span></span><br><span class="line">tokenTTL: <span class="string">"0"</span></span><br><span class="line"></span><br><span class="line">featureGates:</span><br><span class="line">  CoreDNS: <span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存初始化完成之后的join命令</span></span><br><span class="line"><span class="comment"># 如果丢失可以使用命令"kubeadm token list"获取</span></span><br><span class="line"><span class="comment"># kubeadm join 11.11.11.111:6443 --token nevmjk.iuh214fc8i0k3iue --discovery-token-ca-cert-hash sha256:0e4f738348be836ff810bce754e059054845f44f01619a37b817eba83282d80f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubectl使用</span></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装网络插件</span></span><br><span class="line"><span class="comment"># 下载配置</span></span><br><span class="line">mkdir flannel &amp;&amp; <span class="built_in">cd</span> flannel</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与上面kubeadm的pod-network一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件</span></span><br><span class="line"><span class="comment"># 如 dashboard, heapster, efk等</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><h4 id="启动其他master节点"><a href="#启动其他master节点" class="headerlink" title="启动其他master节点"></a>启动其他master节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包第一台master初始化之后的/etc/kubernetes/pki目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/kubernetes &amp;&amp; tar czvf /root/pki.tgz pki/ &amp;&amp; <span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到其他master的/etc/kubernetes目录下</span></span><br><span class="line">tar xf pki.tgz -C /etc/kubernetes/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除pki目录下的apiserver.crt 和 apiserver.key文件</span></span><br><span class="line">rm -rf /etc/kubernetes/pki/&#123;apiserver.crt,apiserver.key&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line"><span class="comment"># 使用和之前master一样的配置文件</span></span><br><span class="line"><span class="comment"># token保持一致</span></span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha1</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.10.1</span><br><span class="line"><span class="comment">#imageRepository: registry.cn-shanghai.aliyuncs.com/gcr-k8s</span></span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意修改IP</span></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: 11.11.11.112</span><br><span class="line"></span><br><span class="line">apiServerExtraArgs:</span><br><span class="line">  endpoint-reconciler-type: lease</span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 192.168.0.0/16</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  endpoints:</span><br><span class="line">  - <span class="string">"http://11.11.11.111:2379"</span></span><br><span class="line">  - <span class="string">"http://11.11.11.112:2379"</span></span><br><span class="line">  - <span class="string">"http://11.11.11.113:2379"</span></span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- lab1</span><br><span class="line">- lab2</span><br><span class="line">- lab3</span><br><span class="line">- <span class="string">"11.11.11.111"</span></span><br><span class="line">- <span class="string">"11.11.11.112"</span></span><br><span class="line">- <span class="string">"11.11.11.113"</span></span><br><span class="line">- <span class="string">"11.11.11.110"</span></span><br><span class="line">- <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">token: nevmjk.iuh214fc8i0k3iue</span><br><span class="line">tokenTTL: <span class="string">"0"</span></span><br><span class="line"></span><br><span class="line">featureGates:</span><br><span class="line">  CoreDNS: <span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab1</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab2</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab3</span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><h4 id="配置haproxy代理和keepalived"><a href="#配置haproxy代理和keepalived" class="headerlink" title="配置haproxy代理和keepalived"></a>配置haproxy代理和keepalived</h4><p>在<code>lab1,lab2,lab3</code>节点上启动<code>haproxy</code>和<code>keepalived</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取haproxy镜像</span></span><br><span class="line">docker pull haproxy:1.7.8-alpine</span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line">cat &gt;/etc/haproxy/haproxy.cfg&lt;&lt;EOF</span><br><span class="line">global</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  uid 99</span><br><span class="line">  gid 99</span><br><span class="line">  <span class="comment">#daemon</span></span><br><span class="line">  nbproc 1</span><br><span class="line">  pidfile haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  retries 3</span><br><span class="line">  timeout connect 5s</span><br><span class="line">  timeout client 30s</span><br><span class="line">  timeout server 30s</span><br><span class="line">  timeout check 2s</span><br><span class="line"></span><br><span class="line">listen admin_stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:1080</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  stats refresh 30s</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats realm   Haproxy\ Statistics</span><br><span class="line">  stats auth    will:will</span><br><span class="line">  stats hide-version</span><br><span class="line">  stats admin <span class="keyword">if</span> TRUE</span><br><span class="line"></span><br><span class="line">frontend k8s-https</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:8443</span><br><span class="line">  mode tcp</span><br><span class="line">  <span class="comment">#maxconn 50000</span></span><br><span class="line">  default_backend k8s-https</span><br><span class="line"></span><br><span class="line">backend k8s-https</span><br><span class="line">  mode tcp</span><br><span class="line">  balance roundrobin</span><br><span class="line">  server lab1 11.11.11.111:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab2 11.11.11.112:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab3 11.11.11.113:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动haproxy</span></span><br><span class="line">docker run -d --name my-haproxy \</span><br><span class="line">-v /etc/haproxy:/usr/<span class="built_in">local</span>/etc/haproxy:ro \</span><br><span class="line">-p 8443:8443 \</span><br><span class="line">-p 1080:1080 \</span><br><span class="line">--restart always \</span><br><span class="line">haproxy:1.7.8-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker logs my-haproxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器查看状态</span></span><br><span class="line">http://11.11.11.111:1080/haproxy-status</span><br><span class="line">http://11.11.11.112:1080/haproxy-status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取keepalived镜像</span></span><br><span class="line">docker pull osixia/keepalived:1.4.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="comment"># 载入内核相关模块</span></span><br><span class="line">lsmod | grep ip_vs</span><br><span class="line">modprobe ip_vs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动keepalived</span></span><br><span class="line"><span class="comment"># eth1为本次实验11.11.11.0/24网段的所在网卡</span></span><br><span class="line">docker run --net=host --<span class="built_in">cap</span>-add=NET_ADMIN \</span><br><span class="line">-e KEEPALIVED_INTERFACE=eth1 \</span><br><span class="line">-e KEEPALIVED_VIRTUAL_IPS=<span class="string">"#PYTHON2BASH:['11.11.11.110']"</span> \</span><br><span class="line">-e KEEPALIVED_UNICAST_PEERS=<span class="string">"#PYTHON2BASH:['11.11.11.111','11.11.11.112','11.11.11.113']"</span> \</span><br><span class="line">-e KEEPALIVED_PASSWORD=hello \</span><br><span class="line">--name k8s-keepalived \</span><br><span class="line">--restart always \</span><br><span class="line">-d osixia/keepalived:1.4.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line"><span class="comment"># 会看到两个成为backup 一个成为master</span></span><br><span class="line">docker logs k8s-keepalived</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时会配置 11.11.11.110 到其中一台机器</span></span><br><span class="line"><span class="comment"># ping测试</span></span><br><span class="line">ping -c4 11.11.11.110</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果失败后清理后，重新实验</span></span><br><span class="line">docker rm -f k8s-keepalived</span><br><span class="line">ip a del 11.11.11.110/32 dev eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改~/.kube/config文件里ip和端口，然后使用kubectl测试</span></span><br><span class="line">rm -rf .kube/cache .kube/http-cache</span><br><span class="line">kubectl get pods -n kube-system -o wide</span><br></pre></td></tr></table></figure><h4 id="修改master节点相关组件配置指向vip"><a href="#修改master节点相关组件配置指向vip" class="headerlink" title="修改master节点相关组件配置指向vip"></a>修改master节点相关组件配置指向vip</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lab1 lab2 lab3</span></span><br><span class="line">sed -i <span class="string">'s@server: https://11.11.11.*:6443@server: https://11.11.11.110:8443@g'</span> /etc/kubernetes/&#123;admin.conf,kubelet.conf,scheduler.conf,controller-manager.conf&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启kubelet</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有节点状态</span></span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><h4 id="修改kube-proxy的配置"><a href="#修改kube-proxy的配置" class="headerlink" title="修改kube-proxy的配置"></a>修改kube-proxy的配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改kube-proxy的配置指定vip</span></span><br><span class="line"><span class="comment"># 执行命令之后修改为 server: https://11.11.11.110:8443</span></span><br><span class="line">kubectl edit -n kube-system configmap/kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看设置</span></span><br><span class="line">kubectl get -n kube-system configmap/kube-proxy -o yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除重建kube-proxy</span></span><br><span class="line">kubectl get pods --all-namespaces -o wide | grep proxy</span><br><span class="line">all_proxy_pods=$(kubectl get pods --all-namespaces -o wide | grep proxy | awk <span class="string">'&#123;print $2&#125;'</span> | xargs)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$all_proxy_pods</span></span><br><span class="line">kubectl delete pods <span class="variable">$all_proxy_pods</span> -n kube-system</span><br><span class="line">kubectl get pods --all-namespaces -o wide | grep proxy</span><br></pre></td></tr></table></figure><h4 id="启动node节点"><a href="#启动node节点" class="headerlink" title="启动node节点"></a>启动node节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加入master节点</span></span><br><span class="line"><span class="comment"># 这个命令是之前初始化master完成时，输出的命令</span></span><br><span class="line">kubeadm join 11.11.11.110:8443 --token nevmjk.iuh214fc8i0k3iue --discovery-token-ca-cert-hash sha256:0e4f738348be836ff810bce754e059054845f44f01619a37b817eba83282d80f</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h4 id="修改node节点kubelet配置并重启"><a href="#修改node节点kubelet配置并重启" class="headerlink" title="修改node节点kubelet配置并重启"></a>修改node节点kubelet配置并重启</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line">sed -i <span class="string">'s@server: https://11.11.11.*:6443@server: https://11.11.11.110:8443@g'</span> /etc/kubernetes/kubelet.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启kubelet</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有节点状态</span></span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><p><strong>禁止master节点发布应用</strong></p><blockquote><p>设置master不接受负载<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置</span></span><br><span class="line"><span class="comment"># kubectl patch node lab1 -p '&#123;"spec":&#123;"unschedulable":true&#125;&#125;'</span></span><br><span class="line">kubectl taint nodes lab1 lab2 lab3 node-role.kubernetes.io/master=<span class="literal">true</span>:NoSchedule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="重建多个coredns副本"><a href="#重建多个coredns副本" class="headerlink" title="重建多个coredns副本"></a>重建多个coredns副本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除coredns的pods</span></span><br><span class="line">kubectl get pods -n kube-system -o wide | grep coredns</span><br><span class="line">all_coredns_pods=$(kubectl get pods -n kube-system -o wide | grep coredns | awk <span class="string">'&#123;print $1&#125;'</span> | xargs)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$all_coredns_pods</span></span><br><span class="line">kubectl delete pods <span class="variable">$all_coredns_pods</span> -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改副本数</span></span><br><span class="line"><span class="comment"># replicas: 3</span></span><br><span class="line"><span class="comment"># 可以修改为node节点的个数</span></span><br><span class="line">kubectl edit deploy coredns -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods -n kube-system -o wide | grep coredns</span><br></pre></td></tr></table></figure><h4 id="基础测试"><a href="#基础测试" class="headerlink" title="基础测试"></a>基础测试</h4><p><strong>1. 启动</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用命令测试</span></span><br><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置文件测试</span></span><br><span class="line">cat &gt;example-nginx.yml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:alpine</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /</span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 3</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /</span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 3</span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: example-service</span><br><span class="line">spec:</span><br><span class="line">    selector:</span><br><span class="line">      app: nginx</span><br><span class="line">    ports:</span><br><span class="line">      - name: http</span><br><span class="line">        port: 80</span><br><span class="line">        targetPort: 80</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: example-service-nodeport</span><br><span class="line">spec:</span><br><span class="line">    selector:</span><br><span class="line">      app: nginx</span><br><span class="line">    <span class="built_in">type</span>: NodePort</span><br><span class="line">    ports:</span><br><span class="line">      - name: http-nodeport</span><br><span class="line">        port: 80</span><br><span class="line">        nodePort: 32223</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f example-nginx.yml</span><br></pre></td></tr></table></figure></p><p><strong>2. 查看状态</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure></p><p><strong>3. DNS解析</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果时间过长会返回错误，可以使用如下方式再进入测试</span></span><br><span class="line">curlPod=$(kubectl get pod | grep curl | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -ti <span class="variable">$curlPod</span> -- sh</span><br></pre></td></tr></table></figure></p><p><strong>4. 访问测试</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.96.59.56 为查看svc时获取到的clusterip</span></span><br><span class="line">curl <span class="string">"10.96.59.56:80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 32223 为查看svc时获取到的 nodeport</span></span><br><span class="line">http://11.11.11.114:32223/</span><br><span class="line">http://11.11.11.115:32223/</span><br></pre></td></tr></table></figure></p><p><strong>3. 清理删除</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure></p><h4 id="高可用测试"><a href="#高可用测试" class="headerlink" title="高可用测试"></a>高可用测试</h4><p>关闭<code>master</code>节点测试集群是能否正常执行上一步的<code>基础测试</code>，查看相关信息，不能同时关闭<code>lab1</code>和<code>lab2</code>，因为上面有<code>haproxy</code>和<code>keepalived</code>服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod --all-namespaces -o wide</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab1</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab2</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab3</span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>当直接把<code>node</code>节点关闭时，只有过了<code>5分钟</code>之后，上面的pod才会被检测到有问题，并迁移到其他节点</p><blockquote><p>如果想快速迁移可以执行 <code>kubectl delete node</code></p><p>也可以修改<code>controller-manager的</code>的<code>pod-eviction-timeout</code>参数，默认5m</p><p><code>node-monitor-grace-period</code>参数，默认40s</p></blockquote></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/admin/high-availability/" target="_blank" rel="noopener">https://kubernetes.io/docs/admin/high-availability/</a></li><li><a href="https://www.kubernetes.org.cn/3536.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/3536.html</a></li><li><a href="https://github.com/indiketa/kubeadm-ha" target="_blank" rel="noopener">https://github.com/indiketa/kubeadm-ha</a></li><li><a href="https://zhuanlan.zhihu.com/p/34740013" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34740013</a></li><li><a href="https://github.com/cookeem/kubeadm-ha/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/cookeem/kubeadm-ha/blob/master/README_CN.md</a></li><li><a href="https://blog.frognew.com/2017/04/install-etcd-cluster.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/04/install-etcd-cluster.html</a></li><li><a href="https://blog.frognew.com/2017/04/install-ha-kubernetes-1.6-cluster.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/04/install-ha-kubernetes-1.6-cluster.html</a></li><li><a href="https://medium.com/@bambash/ha-kubernetes-cluster-via-kubeadm-b2133360b198" target="_blank" rel="noopener">https://medium.com/@bambash/ha-kubernetes-cluster-via-kubeadm-b2133360b198</a></li><li><a href="https://github.com/kubernetes/kubeadm/issues/546" target="_blank" rel="noopener">https://github.com/kubernetes/kubeadm/issues/546</a></li><li><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7使用kubeadm安装k8s集群</title>
      <link href="/posts/16/"/>
      <url>/posts/16/</url>
      
        <content type="html"><![CDATA[<h3 id="实验环境说明"><a href="#实验环境说明" class="headerlink" title="实验环境说明"></a>实验环境说明</h3><h4 id="实验架构"><a href="#实验架构" class="headerlink" title="实验架构"></a>实验架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lab1: master 11.11.11.111</span><br><span class="line">lab2: node 11.11.11.112</span><br><span class="line">lab3: node 11.11.11.113</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="实验使用的Vagrantfile"><a href="#实验使用的Vagrantfile" class="headerlink" title="实验使用的Vagrantfile"></a>实验使用的<code>Vagrantfile</code></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">3</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      config.vm.define <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"11.11.11.11<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          <span class="symbol">inline:</span> <span class="string">"echo hello from node <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">          v.cpus = <span class="number">2</span></span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--name"</span>, <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h4><ul><li>需要在每个节点上先安装好kubeadm</li><li>有每个节点配置好hosts解析 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt;/etc/hosts&lt;&lt;EOF</span><br><span class="line">11.11.11.111 lab1</span><br><span class="line">11.11.11.112 lab2</span><br><span class="line">11.11.11.113 lab3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装配置master节点"><a href="#安装配置master节点" class="headerlink" title="安装配置master节点"></a>安装配置master节点</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote><p>由于kubeadm默认会去拉取gcr.io上的镜像来启动master相关的组件，由于在国内无法访问gcr.io所以会导致无法成功启动。有如下几种解决办法：</p><ul><li>在能翻墙的机器上拉取镜像，再打包导入到master机器上（docker save/load）</li><li>直接拉国内别人的镜像，然后打tag为gcr.io的镜像</li><li>启动配置集群的时候指定镜像相关配置，使用阿里镜像（本次实验采用）</li></ul></blockquote><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha1</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.10.7</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">etcd:</span><br><span class="line">  image: registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.1.12</span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: 11.11.11.111</span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubelet使用国内可用pause镜像</span></span><br><span class="line"><span class="comment"># 修改/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span></span><br><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line">sed -i <span class="string">'/ExecStart=$/i Environment="KUBELET_EXTRA_ARGS=--pod-infra-container-image=registry.cn-shanghai.aliyuncs.com/gcr-k8s/pause-amd64:3.0"'</span>  /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新载入配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置kubelet开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置文件方式</span></span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br></pre></td></tr></table></figure><blockquote><p>没有经过测试的另一种初始化方法<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用命令行方式</span></span><br><span class="line">KUBE_REPO_PREFIX=<span class="string">'registry.cn-hangzhou.aliyuncs.com/google_containers'</span> kubeadm init \</span><br><span class="line">--kubernetes-version=v1.10.3 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">--apiserver-advertise-address=11.11.11.111</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="配置kubectl使用"><a href="#配置kubectl使用" class="headerlink" title="配置kubectl使用"></a>配置kubectl使用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="variable">$HOME</span>/.kube</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看node节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有网络插件也安装配置完成之后，才能会显示为ready状态</span></span><br><span class="line"><span class="comment"># 设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件</span></span><br><span class="line"><span class="comment"># 如 dashboard, heapster, efk等</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><h3 id="配置使用网络插件"><a href="#配置使用网络插件" class="headerlink" title="配置使用网络插件"></a>配置使用网络插件</h3><p>配置使用<code>flannel</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载配置</span></span><br><span class="line">mkdir flannel &amp;&amp; <span class="built_in">cd</span> flannel</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与上面kubeadm的pod-network一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"10.244.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><h3 id="安装配置node节点"><a href="#安装配置node节点" class="headerlink" title="安装配置node节点"></a>安装配置node节点</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置kubelet使用国内可用pause镜像</span></span><br><span class="line"><span class="comment"># 修改/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span></span><br><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line">sed -i <span class="string">'/ExecStart=$/i Environment="KUBELET_EXTRA_ARGS=--pod-infra-container-image=registry.cn-shanghai.aliyuncs.com/gcr-k8s/pause-amd64:3.0"'</span>  /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新载入配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置kubelet开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h4 id="加入集群"><a href="#加入集群" class="headerlink" title="加入集群"></a>加入集群</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此命令为启动master成功后返回的结果</span></span><br><span class="line">kubeadm join --token 55a6f8.1091208463fe1252 11.11.11.111:6443 --discovery-token-ca-cert-hash sha256:790c6b38b087b167c1f52c04526d8729115192a305eb91c01c0fd8dc7facbbcd</span><br></pre></td></tr></table></figure><h3 id="测试容器间的通信和DNS"><a href="#测试容器间的通信和DNS" class="headerlink" title="测试容器间的通信和DNS"></a>测试容器间的通信和DNS</h3><blockquote><p>配置好calico网络之后，kubeadm会自动部署kube-dns</p></blockquote><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br></pre></td></tr></table></figure><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure><h4 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.96.59.56 为查看svc时获取到的clusterip</span></span><br><span class="line">curl <span class="string">"10.96.59.56:80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 32223 为查看svc时获取到的 nodeport</span></span><br><span class="line">http://11.11.11.112:32223/</span><br><span class="line">http://11.11.11.113:32223/</span><br></pre></td></tr></table></figure><h4 id="清理删除"><a href="#清理删除" class="headerlink" title="清理删除"></a>清理删除</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="挖坑记"><a href="#挖坑记" class="headerlink" title="挖坑记"></a>挖坑记</h3><p><strong>1. 如果删除kube-dns后怎么修复</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方法</span></span><br><span class="line">kubeadm upgrade apply v1.10.3 --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方法</span></span><br><span class="line">kubeadm config upload from-file --config kubeadm-master.config</span><br><span class="line">kubeadm upgrade apply v1.10.3</span><br></pre></td></tr></table></figure></p><p><strong>2. 忘记初始master节点时的node节点加入集群命令怎么办</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单方法</span></span><br><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方法</span></span><br><span class="line">token=$(kubeadm token generate)</span><br><span class="line">kubeadm token create <span class="variable">$token</span> --<span class="built_in">print</span>-join-command --ttl=0</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/</a></li><li><a href="https://blog.frognew.com/2017/12/kubeadm-install-kubernetes-1.9.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/12/kubeadm-install-kubernetes-1.9.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装kubeadm</title>
      <link href="/posts/15/"/>
      <url>/posts/15/</url>
      
        <content type="html"><![CDATA[<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><h3 id="安装配置docker"><a href="#安装配置docker" class="headerlink" title="安装配置docker"></a>安装配置docker</h3><blockquote><p>v1.9.0版本推荐使用docker v1.12,<br>v1.11, v1.13, 17.03也可以使用，再高版本的docker可能无法正常使用。<br>测试发现17.09无法正常使用，不能使用资源限制(内存CPU)</p></blockquote><a id="more"></a><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载安装指定版本docker-ce</span></span><br><span class="line">yum remove -y docker-ce docker-ce-selinux container-selinux</span><br><span class="line">yum install -y --<span class="built_in">setopt</span>=obsoletes=0 \</span><br><span class="line">docker-ce-17.03.1.ce-1.el7.centos \</span><br><span class="line">docker-ce-selinux-17.03.1.ce-1.el7.centos</span><br></pre></td></tr></table></figure><h4 id="修改docker配置使用systemd"><a href="#修改docker配置使用systemd" class="headerlink" title="修改docker配置使用systemd"></a>修改docker配置使用systemd</h4><blockquote><p>在/etc/docker/daemon.json文件添加如下配置<br>centos7安装的docker12不能添加此参数，否则会无法启动<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用了加速器配置格式如下</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://tfhzn46h.mirror.aliyuncs.com"</span>],</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="安装-kubeadm-kubelet-和-kubectl"><a href="#安装-kubeadm-kubelet-和-kubectl" class="headerlink" title="安装 kubeadm, kubelet 和 kubectl"></a>安装 kubeadm, kubelet 和 kubectl</h3><p>如下的安装方法，选择其中一个即可。</p><h4 id="翻墙安装"><a href="#翻墙安装" class="headerlink" title="翻墙安装"></a>翻墙安装</h4><blockquote><p>需要翻墙才能正常安装，如果不能翻墙，可以使用阿里云或其他云提供的容器海外构建功能，下载好包。<br>启动容器，之后从容器中把文件获取出来安装即可。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum install -y ebtables socat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在能翻墙的机器上下载rpm包</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line">yum install -y yum-utils</span><br><span class="line">k8s_version=$(yum info kubelet | grep Version | awk -F <span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span> | tr -d <span class="string">' '</span>)</span><br><span class="line">mkdir k8s-<span class="variable">$k8s_version</span> &amp;&amp; <span class="built_in">cd</span> k8s-<span class="variable">$k8s_version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载最新版本</span></span><br><span class="line">yumdownloader kubelet kubeadm kubectl kubernetes-cni</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载指定版本</span></span><br><span class="line">yumdownloader kubelet-1.10.7 kubeadm-1.10.7 kubectl-1.10.7 kubernetes-cni</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包下载到要安装的机器上</span></span><br><span class="line"><span class="built_in">cd</span> .. &amp;&amp; tar cvzf k8s-<span class="variable">$&#123;k8s_version&#125;</span>.tgz k8s-<span class="variable">$k8s_version</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">tar xf k8s-*.tgz &amp;&amp; <span class="built_in">cd</span> k8s-* &amp;&amp; yum localinstall -y *.rpm</span><br></pre></td></tr></table></figure><h4 id="使用阿里镜像安装"><a href="#使用阿里镜像安装" class="headerlink" title="使用阿里镜像安装"></a>使用阿里镜像安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置源</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版本</span></span><br><span class="line">yum install -y kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">yum install -y kubelet-1.10.7 kubeadm-1.10.7 kubectl-1.10.7</span><br></pre></td></tr></table></figure><h4 id="二进制安装方法（不推荐）"><a href="#二进制安装方法（不推荐）" class="headerlink" title="二进制安装方法（不推荐）"></a>二进制安装方法（不推荐）</h4><p>此需要自己安装<code>kubernetes-cni</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载安装</span></span><br><span class="line">version=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/<span class="variable">$version</span>/bin/linux/amd64/kubectl</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/<span class="variable">$version</span>/bin/linux/amd64/kubeadm</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/<span class="variable">$version</span>/bin/linux/amd64/kubelet</span><br><span class="line">chmod +x kubectl kubeadm kubelet</span><br><span class="line">mv kubectl kubeadm kubelet /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><blockquote><p>实验所用<code>kubeadm</code>相关文件已经上传到了百度网盘<br>链接：<a href="https://pan.baidu.com/s/1pl7YYUYZsPd98J0DhNLWEQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1pl7YYUYZsPd98J0DhNLWEQ</a> 密码：40na</p></blockquote><h3 id="配置系统相关参数"><a href="#配置系统相关参数" class="headerlink" title="配置系统相关参数"></a>配置系统相关参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时禁用selinux</span></span><br><span class="line"><span class="comment"># 永久关闭 修改/etc/sysconfig/selinux文件设置</span></span><br><span class="line">sed -i <span class="string">'s/SELINUX=permissive/SELINUX=disabled/'</span> /etc/sysconfig/selinux</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时关闭swap</span></span><br><span class="line"><span class="comment"># 永久关闭 注释/etc/fstab文件里swap相关的行</span></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启forward</span></span><br><span class="line"><span class="comment"># Docker从1.13版本开始调整了默认的防火墙规则</span></span><br><span class="line"><span class="comment"># 禁用了iptables filter表中FOWARD链</span></span><br><span class="line"><span class="comment"># 这样会引起Kubernetes集群中跨Node的Pod无法通信</span></span><br><span class="line"></span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置转发相关参数，否则可能会出错</span></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/install-kubeadm/</a></li><li><a href="https://blog.frognew.com/2017/12/kubeadm-install-kubernetes-1.9.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/12/kubeadm-install-kubernetes-1.9.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装终端记录回放器asciinema</title>
      <link href="/posts/14/"/>
      <url>/posts/14/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>终端记录器，可以记录你在终端的任务操作，然后回放。<br>官方示例网站<code>https://asciinema.org/</code></p><p><a href="https://asciinema.org/a/14" target="_blank" rel="noopener"><img src="https://asciinema.org/a/14.png" alt="asciicast"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y asciinema</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p><strong>1.简单记录并传到asciinema.org</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单</span></span><br><span class="line">asciinema rec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定标题</span></span><br><span class="line">asciinema rec -t <span class="string">"My git tutorial"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录保存到本地 </span></span><br><span class="line">asciinema rec demo.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定最多等待间隔2.5s</span></span><br><span class="line">asciinema rec -w 2.5 demo.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重放操作</span></span><br><span class="line">asciinema play demo.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重放asciinema.org上的操作</span></span><br><span class="line">asciinema play https://asciinema.org/a/difqlgx86ym6emrmd8u62yqu8</span><br></pre></td></tr></table></figure></p><h3 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.config/asciinema/config</span><br><span class="line">[api]</span><br><span class="line">url = http://asciinema.example.com</span><br></pre></td></tr></table></figure><h3 id="安装配置自己的asciinema-server"><a href="#安装配置自己的asciinema-server" class="headerlink" title="安装配置自己的asciinema-server"></a>安装配置自己的<code>asciinema-server</code></h3><blockquote><p>安装之前先安装docker-ce， 测试发现docker-12版本不能正常使用</p></blockquote><p><strong>1. 安装配置</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/asciinema/asciinema-server.git</span><br><span class="line"><span class="built_in">cd</span> asciinema-server</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">cp .env.production.sample .env.production</span><br><span class="line">vim .env.production</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置url相关</span></span><br><span class="line">URL_SCHEME=http</span><br><span class="line">URL_HOST=asciinema.example.com</span><br><span class="line">URL_PORT=80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置密钥</span></span><br><span class="line">secret=$(docker-compose run --rm web mix phx.gen.secret)</span><br><span class="line">SECRET_KEY_BASE=<span class="variable">$secret</span></span><br></pre></td></tr></table></figure></p><p><strong>2. 初始化</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d postgres</span><br><span class="line">docker-compose run --rm web setup</span><br></pre></td></tr></table></figure></p><p><strong>3. 启动</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">docker ps -f <span class="string">'name=asciinema_'</span></span><br></pre></td></tr></table></figure></p><p><strong>4. 浏览器访问测试</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置hosts</span></span><br><span class="line">11.11.11.111 asciinema.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://asciinema.example.com/</span><br></pre></td></tr></table></figure></p><p><strong>5. 配置客户端</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置host</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'11.11.11.111 asciinema.example.com'</span> &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># ~/.config/asciinema/config</span></span><br><span class="line">[api]</span><br><span class="line">url = http://asciinema.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用环境变量</span></span><br><span class="line">ASCIINEMA_API_URL=http://asciinema.example.com asciinema rec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意</span></span><br><span class="line"><span class="comment"># 如果没有token配置项会无法上传，可以先直接执行asciinema rec生成配置文件后</span></span><br><span class="line"><span class="comment"># 再添加url的配置项</span></span><br></pre></td></tr></table></figure></p><p><strong>6. 测试使用</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asciinema rec</span><br></pre></td></tr></table></figure></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/asciinema/asciinema/blob/master/README.md" target="_blank" rel="noopener">https://github.com/asciinema/asciinema/blob/master/README.md</a></li><li><a href="https://github.com/asciinema/asciinema-server/blob/master/docs/INSTALL.md" target="_blank" rel="noopener">https://github.com/asciinema/asciinema-server/blob/master/docs/INSTALL.md</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7配置使用代理</title>
      <link href="/posts/13/"/>
      <url>/posts/13/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p> 本文档主要介绍如何在centos7上使用代理，访问墙外的网站。<br> <code>shadowsocks</code>实现sock5代理，<code>privoxy</code>把sock5代理转换为http代理。<br><a id="more"></a></p><h3 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装<code>shadowsocks</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo su - root</span><br><span class="line">yum -y install python-pip</span><br><span class="line">pip install shadowsocks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">mkdir /etc/shadowsocks</span><br><span class="line">cat &gt;/etc/shadowsocks/shadowsocks.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"47.52.xx.xx"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>:52113,</span><br><span class="line">    <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"xxxxxx"</span>,</span><br><span class="line">    <span class="string">"timeout"</span>:300,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"workers"</span>: 1</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动脚本</span></span><br><span class="line">cat &gt;/etc/systemd/system/shadowsocks.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/sslocal -c /etc/shadowsocks/shadowsocks.json</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动并加入开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> shadowsocks.service</span><br><span class="line">systemctl start shadowsocks.service</span><br><span class="line">systemctl status shadowsocks.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">curl --socks5 127.0.0.1:1080 ip.cn</span><br></pre></td></tr></table></figure><h3 id="安装privoxy"><a href="#安装privoxy" class="headerlink" title="安装privoxy"></a>安装<code>privoxy</code></h3><blockquote><p>另一种选择<code>polipo</code></p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install privoxy</span><br></pre></td></tr></table></figure><blockquote><p>以下两种模式选择一种</p></blockquote><p><strong>简单全局模式配置</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'forward-socks5t / 127.0.0.1:1080 . #转发到本地端口'</span> &gt;&gt; /etc/privoxy/config</span><br></pre></td></tr></table></figure></p><p><strong>PAC模式配置（推荐）</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载生成privoxy-action配置的脚本</span></span><br><span class="line">curl -skL https://raw.github.com/zfl9/gfwlist2privoxy/master/gfwlist2privoxy -o gfwlist2privoxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置启动</span></span><br><span class="line"><span class="comment"># '127.0.0.1:1080' 为你的sock5代理地址</span></span><br><span class="line">bash gfwlist2privoxy <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">cp -af gfwlist.action /etc/privoxy/</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'actionsfile gfwlist.action'</span> &gt;&gt; /etc/privoxy/config</span><br></pre></td></tr></table></figure></p><h4 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动并加入开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> privoxy.service</span><br><span class="line">systemctl start privoxy.service</span><br><span class="line">systemctl status privoxy.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># export http_proxy=http://127.0.0.1:8118</span></span><br><span class="line"><span class="comment"># export https_proxy=http://127.0.0.1:8118</span></span><br><span class="line"><span class="comment"># export all_proxy=http://127.0.0.1:8118</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入环境变量中</span></span><br><span class="line">cat &gt;/etc/profile.d/proxy.sh&lt;&lt;EOF</span><br><span class="line"><span class="built_in">alias</span> proxy=<span class="string">'export all_proxy=http://127.0.0.1:8118'</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">'unset all_proxy'</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">. /etc/profile.d/proxy.sh</span><br><span class="line"><span class="comment"># 使用代理</span></span><br><span class="line">proxy</span><br><span class="line">curl www.google.com</span><br><span class="line">curl ip.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不使用代理</span></span><br><span class="line">unproxy</span><br><span class="line">curl ip.cn</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码整洁之道</title>
      <link href="/posts/12/"/>
      <url>/posts/12/</url>
      
        <content type="html"><![CDATA[<p><img src="/posts/12/代码整洁之道.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装kubernetes-v1.7 Volumes和Persistent Volumes</title>
      <link href="/posts/11/"/>
      <url>/posts/11/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Volumes用来存储要持久保留的数据，不想重启容器后就消失。POD中容器之间共享数据。<br>PersistentVolume（PV）和 PersistentVolumeClaim（PVC）是kubernetes提供的</p><p>两种API资源，用于抽象存储细节。管理员关注于如何通过pv提供存储功能而无需<br>关注用户如何使用，同样的用户只需要挂载PVC到容器中而不需要关注存储卷采用<br>何种技术实现。PVC和PV的关系跟pod和node关系类似，前者消耗后者的资源。PVC可以向PV申<br>请指定大小的存储资源并设置访问模式。<br><a id="more"></a></p><blockquote><p>基本使用<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: counter</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: count</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - -c</span><br><span class="line">    - &gt;</span><br><span class="line">      i=0;</span><br><span class="line">      <span class="keyword">while</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>: <span class="variable">$(date)</span>"</span> &gt;&gt; /var/<span class="built_in">log</span>/1.log;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$(date)</span> INFO <span class="variable">$i</span>"</span> &gt;&gt; /var/<span class="built_in">log</span>/2.log;</span><br><span class="line">        i=$((i+1));</span><br><span class="line">        sleep 1;</span><br><span class="line">      <span class="keyword">done</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: varlog</span><br><span class="line">      mountPath: /var/<span class="built_in">log</span></span><br><span class="line">  - name: count-log-1</span><br><span class="line">    image: busybox</span><br><span class="line">    args: [/bin/sh, -c, <span class="string">'tail -n+1 -f /var/log/1.log'</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: varlog</span><br><span class="line">      mountPath: /var/<span class="built_in">log</span></span><br><span class="line">  - name: count-log-2</span><br><span class="line">    image: busybox</span><br><span class="line">    args: [/bin/sh, -c, <span class="string">'tail -n+1 -f /var/log/2.log'</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: varlog</span><br><span class="line">      mountPath: /var/<span class="built_in">log</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: varlog</span><br><span class="line">    emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="安装配置glusterfs"><a href="#安装配置glusterfs" class="headerlink" title="安装配置glusterfs"></a>安装配置glusterfs</h3><p><strong>1. 安装glusterfs</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先安装 gluster 源</span></span><br><span class="line">yum install centos-release-gluster -y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 glusterfs 组件</span></span><br><span class="line">yum install -y glusterfs glusterfs-server glusterfs-fuse \</span><br><span class="line">glusterfs-rdma glusterfs-geo-replication glusterfs-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 glusterfs</span></span><br><span class="line">systemctl start glusterd.service</span><br><span class="line">systemctl <span class="built_in">enable</span> glusterd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status glusterd.service</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置集群</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 hosts</span></span><br><span class="line">192.168.12.211 lab1</span><br><span class="line">192.168.12.212 lab2</span><br><span class="line">192.168.12.213 lab3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建存储目录</span></span><br><span class="line">mkdir -pv /data/gfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加节点到 集群</span></span><br><span class="line"><span class="comment"># 执行操作的本机不需要probe 本机</span></span><br><span class="line">gluster peer probe lab2</span><br><span class="line">gluster peer probe lab3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群状态</span></span><br><span class="line">gluster peer status</span><br></pre></td></tr></table></figure></p><p><strong>3. 配置 volume</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分布卷</span></span><br><span class="line">gluster volume create k8s-volume transport tcp \</span><br><span class="line">lab1:/data/gfs \</span><br><span class="line">lab2:/data/gfs \</span><br><span class="line">lab3:/data/gfs force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看volume状态</span></span><br><span class="line">gluster volume info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 分布卷</span></span><br><span class="line">gluster volume start k8s-volume</span><br></pre></td></tr></table></figure></p><h3 id="Kubernetes中配置glusterfs"><a href="#Kubernetes中配置glusterfs" class="headerlink" title="Kubernetes中配置glusterfs"></a>Kubernetes中配置glusterfs</h3><p><strong>1. kubernetes安装客户端</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在所有 node 节点安装</span></span><br><span class="line">yum install centos-release-gluster -y</span><br><span class="line">yum install -y glusterfs glusterfs-fuse</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置 hosts</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.12.211 lab1</span><br><span class="line">192.168.12.212 lab2</span><br><span class="line">192.168.12.213 lab3</span><br></pre></td></tr></table></figure></p><p><strong>3. 配置 endpoints</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">curl -O https://raw.githubusercontent.com/kubernetes/kubernetes/master/examples/volumes/glusterfs/glusterfs-endpoints.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 glusters 集群节点ip每一个 addresses 为一个 ip 组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f glusterfs-endpoints.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get ep</span><br></pre></td></tr></table></figure></p><p><strong>4. 配置 service</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/kubernetes/kubernetes/master/examples/volumes/glusterfs/glusterfs-service.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 port 的刚刚上一步中修改的 port</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f glusterfs-service.json</span><br><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><strong>1. 创建测试 pod</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/kubernetes/kubernetes/master/examples/volumes/glusterfs/glusterfs-pod.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 volumes 下的 path 为上面创建的 k8s-volume</span></span><br><span class="line"><span class="string">"path"</span>: <span class="string">"k8s-volume"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f glusterfs-pod.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl describe pods/glusterfs</span><br><span class="line"></span><br><span class="line"><span class="comment">#登陆 node 物理机，使用 df 可查看挂载目录</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure></p><h3 id="PV和PVC"><a href="#PV和PVC" class="headerlink" title="PV和PVC"></a>PV和PVC</h3><p><strong>1. 配置PV</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建pv</span></span><br><span class="line">cat &gt;glusterfs-pv.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: gluster-dev-volume</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 8Gi</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  glusterfs:</span><br><span class="line">    endpoints: <span class="string">"glusterfs-cluster"</span></span><br><span class="line">    path: <span class="string">"k8s-volume"</span></span><br><span class="line">    readOnly: <span class="literal">false</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f glusterfs-pv.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 pv</span></span><br><span class="line">kubectl get pv</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置PVC</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;glusterfs-pvc.yaml&lt;&lt;EOF</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: glusterfs-nginx</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 8Gi</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 pvc</span></span><br><span class="line">kubectl apply -f glusterfs-pvc.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 pvc</span></span><br><span class="line">kubectl get pv</span><br><span class="line">kubectl get pvc</span><br></pre></td></tr></table></figure></p><p><strong>3. 创建 nginx deployment 挂载 volume</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;nginx-deployment.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-dm</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx</span><br><span class="line">          image: nginx:alpine</span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: gluster-dev-volume</span><br><span class="line">              mountPath: <span class="string">"/usr/share/nginx/html"</span></span><br><span class="line">      volumes:</span><br><span class="line">      - name: gluster-dev-volume</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: glusterfs-nginx</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f nginx-deployment.yaml</span><br><span class="line">kubectl expose deployment nginx-dm --name=nginx-dm-svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 deployment</span></span><br><span class="line">kubectl get pods |grep nginx-dm</span><br></pre></td></tr></table></figure></p><p><strong>4. 测试</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看挂载</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it nginx-dm-2194008866-szfl2 -- df -h | grep k8s-volume</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件 测试</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it nginx-dm-2194008866-szfl2 -- touch /usr/share/nginx/html/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it nginx-dm-2194008866-szfl2 -- ls -lt /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure></p><h3 id="StorageClass"><a href="#StorageClass" class="headerlink" title="StorageClass"></a>StorageClass</h3><p><a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#storageclasses" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#storageclasses</a></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/concepts/storage/volumes/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/volumes/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装kubernetes-v1.7插件</title>
      <link href="/posts/10/"/>
      <url>/posts/10/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本教程紧接 centos7安装kubernetes-v1.7 请参考。</p></blockquote><h4 id="安装和配置-kubedns-插件"><a href="#安装和配置-kubedns-插件" class="headerlink" title="安装和配置 kubedns 插件"></a>安装和配置 kubedns 插件</h4><p><strong>1. 拉取镜像</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在所有node节点上操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull</span></span><br><span class="line">docker pull jicki/k8s-dns-sidecar-amd64:1.14.4</span><br><span class="line">docker pull jicki/k8s-dns-kube-dns-amd64:1.14.4</span><br><span class="line">docker pull jicki/k8s-dns-dnsmasq-nanny-amd64:1.14.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># tag</span></span><br><span class="line">docker tag jicki/k8s-dns-sidecar-amd64:1.14.4 gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.4</span><br><span class="line">docker tag jicki/k8s-dns-kube-dns-amd64:1.14.4 gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.4</span><br><span class="line">docker tag jicki/k8s-dns-dnsmasq-nanny-amd64:1.14.4 gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.4</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>2. 修改配置ymal</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir /server/software/k8s/dns</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s/dns</span><br><span class="line"></span><br><span class="line"><span class="comment"># config map</span></span><br><span class="line">cat &gt;kubedns-cm.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io/mode: EnsureExists</span><br><span class="line">data:</span><br><span class="line">  upstreamNameservers: |</span><br><span class="line">      [<span class="string">"114.114.114.114"</span>, <span class="string">"8.8.8.8"</span>]</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># service account</span></span><br><span class="line">cat &gt;kubedns-sa.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># controller</span></span><br><span class="line">cat &gt;kubedns-controller.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># replicas: not specified here:</span></span><br><span class="line">  <span class="comment"># 1. In order to make Addon Manager do not reconcile this replicas parameter.</span></span><br><span class="line">  <span class="comment"># 2. Default is 1.</span></span><br><span class="line">  <span class="comment"># 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.</span></span><br><span class="line">  strategy:</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 10%</span><br><span class="line">      maxUnavailable: 0</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kube-dns</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kube-dns</span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">    spec:</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: <span class="string">"CriticalAddonsOnly"</span></span><br><span class="line">        operator: <span class="string">"Exists"</span></span><br><span class="line">      volumes:</span><br><span class="line">      - name: kube-dns-config</span><br><span class="line">        configMap:</span><br><span class="line">          name: kube-dns</span><br><span class="line">          optional: <span class="literal">true</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: kubedns</span><br><span class="line">        image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.4</span><br><span class="line">        resources:</span><br><span class="line">          <span class="comment"># <span class="doctag">TODO:</span> Set memory limits when we've profiled the container for large</span></span><br><span class="line">          <span class="comment"># clusters, then set request = limit to keep this container in</span></span><br><span class="line">          <span class="comment"># guaranteed class. Currently, this container falls into the</span></span><br><span class="line">          <span class="comment"># "burstable" category so the kubelet doesn't backoff from restarting it.</span></span><br><span class="line">          limits:</span><br><span class="line">            memory: 170Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 70Mi</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /healthcheck/kubedns</span><br><span class="line">            port: 10054</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 60</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">          successThreshold: 1</span><br><span class="line">          failureThreshold: 5</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /readiness</span><br><span class="line">            port: 8081</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          <span class="comment"># we poll on pod startup for the Kubernetes master service and</span></span><br><span class="line">          <span class="comment"># only setup the /readiness HTTP server once that's available.</span></span><br><span class="line">          initialDelaySeconds: 3</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">        args:</span><br><span class="line">        - --domain=cluster.local.</span><br><span class="line">        - --dns-port=10053</span><br><span class="line">        - --config-dir=/kube-dns-config</span><br><span class="line">        - --v=2</span><br><span class="line">        <span class="comment">#__PILLAR__FEDERATIONS__DOMAIN__MAP__</span></span><br><span class="line">        env:</span><br><span class="line">        - name: PROMETHEUS_PORT</span><br><span class="line">          value: <span class="string">"10055"</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 10053</span><br><span class="line">          name: dns-local</span><br><span class="line">          protocol: UDP</span><br><span class="line">        - containerPort: 10053</span><br><span class="line">          name: dns-tcp-local</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 10055</span><br><span class="line">          name: metrics</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: kube-dns-config</span><br><span class="line">          mountPath: /kube-dns-config</span><br><span class="line">      - name: dnsmasq</span><br><span class="line">        image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.4</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /healthcheck/dnsmasq</span><br><span class="line">            port: 10054</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 60</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">          successThreshold: 1</span><br><span class="line">          failureThreshold: 5</span><br><span class="line">        args:</span><br><span class="line">        - -v=2</span><br><span class="line">        - -logtostderr</span><br><span class="line">        - -configDir=/etc/k8s/dns/dnsmasq-nanny</span><br><span class="line">        - -restartDnsmasq=<span class="literal">true</span></span><br><span class="line">        - --</span><br><span class="line">        - -k</span><br><span class="line">        - --cache-size=1000</span><br><span class="line">        - --<span class="built_in">log</span>-facility=-</span><br><span class="line">        - --server=/cluster.local./127.0.0.1<span class="comment">#10053</span></span><br><span class="line">        - --server=/<span class="keyword">in</span>-addr.arpa/127.0.0.1<span class="comment">#10053</span></span><br><span class="line">        - --server=/ip6.arpa/127.0.0.1<span class="comment">#10053</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 53</span><br><span class="line">          name: dns</span><br><span class="line">          protocol: UDP</span><br><span class="line">        - containerPort: 53</span><br><span class="line">          name: dns-tcp</span><br><span class="line">          protocol: TCP</span><br><span class="line">        <span class="comment"># see: https://github.com/kubernetes/kubernetes/issues/29055 for details</span></span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 150m</span><br><span class="line">            memory: 20Mi</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: kube-dns-config</span><br><span class="line">          mountPath: /etc/k8s/dns/dnsmasq-nanny</span><br><span class="line">      - name: sidecar</span><br><span class="line">        image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.4</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /metrics</span><br><span class="line">            port: 10054</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 60</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">          successThreshold: 1</span><br><span class="line">          failureThreshold: 5</span><br><span class="line">        args:</span><br><span class="line">        - --v=2</span><br><span class="line">        - --logtostderr</span><br><span class="line">        - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local.,5,A</span><br><span class="line">        - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local.,5,A</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 10054</span><br><span class="line">          name: metrics</span><br><span class="line">          protocol: TCP</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            memory: 20Mi</span><br><span class="line">            cpu: 10m</span><br><span class="line">      dnsPolicy: Default  <span class="comment"># Don't use cluster DNS.</span></span><br><span class="line">      serviceAccountName: kube-dns</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># service</span></span><br><span class="line">cat &gt;kubedns-svc.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">    kubernetes.io/name: <span class="string">"KubeDNS"</span></span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">  clusterIP: 10.254.0.2</span><br><span class="line">  ports:</span><br><span class="line">  - name: dns</span><br><span class="line">    port: 53</span><br><span class="line">    protocol: UDP</span><br><span class="line">  - name: dns-tcp</span><br><span class="line">    port: 53</span><br><span class="line">    protocol: TCP</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3. 系统预定义的 RoleBinding</strong><br>预定义的 RoleBinding system:kube-dns 将 kube-system 命名空间的 kubedns<br>ServiceAccount 与 system:kube-dns Role 绑定， 该 Role 具有访问 kubeapiserver<br>DNS 相关 API 的权限；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get clusterrolebindings system:kube-dns -o yaml</span><br></pre></td></tr></table></figure><p><strong>4. 创建 kube-dns</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /server/software/k8s/dns</span><br><span class="line">kubectl create -f .</span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get deploy -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure></p><p><strong>5. 测试DNS</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建deploy</span></span><br><span class="line">cat &gt;my-nginx.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: my-nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        run: my-nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: my-nginx</span><br><span class="line">        image: nginx:1.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">EOF</span><br><span class="line">kubectl create -f my-nginx.yaml</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get deploy</span><br><span class="line">kubectl expose deploy my-nginx</span><br><span class="line">kubectl get services --all-namespaces |grep my-nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">kubectl run dns-test --rm -ti --image busybox /bin/sh</span><br><span class="line">nslookup kubernetes</span><br><span class="line">cat /etc/resolv.conf</span><br><span class="line">ping my-nginx</span><br><span class="line">ping kubernetes</span><br><span class="line">wget -q my-nginx -O -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除测试相关的pod</span></span><br><span class="line">kubectl delete -f my-nginx.yaml</span><br></pre></td></tr></table></figure></p><blockquote><p>可以自行指定特殊的域名使用指定的dns服务器 ，也可以自行指定上游服务器。参考<br><a href="https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/</a></p></blockquote><h4 id="安装dashboard插件"><a href="#安装dashboard插件" class="headerlink" title="安装dashboard插件"></a>安装dashboard插件</h4><p><strong>1. 拉取镜像</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull jicki/kubernetes-dashboard-amd64:v1.6.1</span><br><span class="line">docker tag jicki/kubernetes-dashboard-amd64:v1.6.1 gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置yaml文件</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /server/software/k8s/dashboard</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s/dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># Controller</span></span><br><span class="line">cat &gt;dashboard-controller.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kubernetes-dashboard</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kubernetes-dashboard</span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: dashboard</span><br><span class="line">      containers:</span><br><span class="line">      - name: kubernetes-dashboard</span><br><span class="line">        image: gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 50Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 50Mi</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9090</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /</span><br><span class="line">            port: 9090</span><br><span class="line">          initialDelaySeconds: 30</span><br><span class="line">          timeoutSeconds: 30</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: <span class="string">"CriticalAddonsOnly"</span></span><br><span class="line">        operator: <span class="string">"Exists"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># service</span></span><br><span class="line">cat &gt;dashboard-service.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 9090</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># rbac</span></span><br><span class="line">cat &gt;dashboard-rbac.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: dashboard</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: dashboard</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>增加了一个dashboard-rbac.yaml文件，定义一个名为 dashboard 的 ServiceAccount，<br>然后将它和 Cluster Role view 绑定。</li><li>指定端口类型为 NodePort，这样外界可以通过地址 nodeIP:nodePort 访问 dashboard；</li></ul></blockquote><p><strong>3. 创建dashboard</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f  .</span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get deploy -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nodePort</span></span><br><span class="line">kubectl get services kubernetes-dashboard -n kube-system</span><br></pre></td></tr></table></figure></p><p><strong>4. 测试访问</strong></p><ul><li>暴露了 NodePort，可以使用 <a href="http://NodeIP:nodePort" target="_blank" rel="noopener">http://NodeIP:nodePort</a> 地址访问 dashboard；<br><a href="http://192.168.12.212:31680" target="_blank" rel="noopener">http://192.168.12.212:31680</a></li><li><p>通过 kube-apiserver 访问 dashboard；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取地址信息</span></span><br><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">https://192.168.12.211:6443/api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能会遇到的问题</span></span><br><span class="line">https://github.com/opsnull/follow-me-install-kubernetes-cluster/issues/5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出证书</span></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -<span class="keyword">in</span> admin.pem  -out admin.p12 -inkey admin-key.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入证书</span></span><br><span class="line"><span class="comment"># 将生成的admin.p12证书导入的你的电脑，导出的时候记住你设置的密码，导入的时候还要用到。</span></span><br><span class="line"><span class="comment"># 密码可以设置为空，直接回车即可。</span></span><br></pre></td></tr></table></figure></li><li><p>通过 kubectl proxy 访问 dashboard</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl proxy --address=<span class="string">'192.168.12.211'</span> --port=8086 --accept-hosts=<span class="string">'^*$'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">http://192.168.12.211:8086/ui</span><br></pre></td></tr></table></figure></li></ul><h4 id="配置和安装-Heapster"><a href="#配置和安装-Heapster" class="headerlink" title="配置和安装 Heapster"></a>配置和安装 Heapster</h4><p><strong>1. 拉取镜像</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker pull daocloud.io/will835559313/k8s:master-f7ff86e</span><br><span class="line">docker tag daocloud.io/will835559313/k8s:master-f7ff86e gcr.io/google_containers/heapster-amd64:v1.3.0</span><br><span class="line"></span><br><span class="line">docker pull daocloud.io/will835559313/k8s:master-545d95d</span><br><span class="line">docker tag daocloud.io/will835559313/k8s:master-545d95d gcr.io/google_containers/heapster-grafana-amd64:v4.0.2</span><br><span class="line"></span><br><span class="line">docker pull daocloud.io/will835559313/k8s:master-f694b85</span><br><span class="line">docker tag daocloud.io/will835559313/k8s:master-f694b85 gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置yaml</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /server/software/k8s/heapster</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s/heapster</span><br><span class="line"></span><br><span class="line"><span class="comment"># influxdb</span></span><br><span class="line"><span class="comment"># ConfigMap的配置主要为了开启 admin UI 插件</span></span><br><span class="line"><span class="comment"># 可以根据需求来删除此配置。</span></span><br><span class="line">cat &gt;influxdb.yaml&lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: influxdb-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  config.toml: |</span><br><span class="line">    reporting-disabled = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">bind</span>-address = <span class="string">":8088"</span></span><br><span class="line">    [meta]</span><br><span class="line">      dir = <span class="string">"/data/meta"</span></span><br><span class="line">      retention-autocreate = <span class="literal">true</span></span><br><span class="line">      logging-enabled = <span class="literal">true</span></span><br><span class="line">    [data]</span><br><span class="line">      dir = <span class="string">"/data/data"</span></span><br><span class="line">      wal-dir = <span class="string">"/data/wal"</span></span><br><span class="line">      query-log-enabled = <span class="literal">true</span></span><br><span class="line">      cache-max-memory-size = 1073741824</span><br><span class="line">      cache-snapshot-memory-size = 26214400</span><br><span class="line">      cache-snapshot-write-cold-duration = <span class="string">"10m0s"</span></span><br><span class="line">      compact-full-write-cold-duration = <span class="string">"4h0m0s"</span></span><br><span class="line">      max-series-per-database = 1000000</span><br><span class="line">      max-values-per-tag = 100000</span><br><span class="line">      trace-logging-enabled = <span class="literal">false</span></span><br><span class="line">    [coordinator]</span><br><span class="line">      write-timeout = <span class="string">"10s"</span></span><br><span class="line">      max-concurrent-queries = 0</span><br><span class="line">      query-timeout = <span class="string">"0s"</span></span><br><span class="line">      <span class="built_in">log</span>-queries-after = <span class="string">"0s"</span></span><br><span class="line">      max-select-point = 0</span><br><span class="line">      max-select-series = 0</span><br><span class="line">      max-select-buckets = 0</span><br><span class="line">    [retention]</span><br><span class="line">      enabled = <span class="literal">true</span></span><br><span class="line">      check-interval = <span class="string">"30m0s"</span></span><br><span class="line">    [admin]</span><br><span class="line">      enabled = <span class="literal">true</span></span><br><span class="line">      <span class="built_in">bind</span>-address = <span class="string">":8083"</span></span><br><span class="line">      https-enabled = <span class="literal">false</span></span><br><span class="line">      https-certificate = <span class="string">"/etc/ssl/influxdb.pem"</span></span><br><span class="line">    [shard-precreation]</span><br><span class="line">      enabled = <span class="literal">true</span></span><br><span class="line">      check-interval = <span class="string">"10m0s"</span></span><br><span class="line">      advance-period = <span class="string">"30m0s"</span></span><br><span class="line">    [monitor]</span><br><span class="line">      store-enabled = <span class="literal">true</span></span><br><span class="line">      store-database = <span class="string">"_internal"</span></span><br><span class="line">      store-interval = <span class="string">"10s"</span></span><br><span class="line">    [subscriber]</span><br><span class="line">      enabled = <span class="literal">true</span></span><br><span class="line">      http-timeout = <span class="string">"30s"</span></span><br><span class="line">      insecure-skip-verify = <span class="literal">false</span></span><br><span class="line">      ca-certs = <span class="string">""</span></span><br><span class="line">      write-concurrency = 40</span><br><span class="line">      write-buffer-size = 1000</span><br><span class="line">    [http]</span><br><span class="line">      enabled = <span class="literal">true</span></span><br><span class="line">      <span class="built_in">bind</span>-address = <span class="string">":8086"</span></span><br><span class="line">      auth-enabled = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">log</span>-enabled = <span class="literal">true</span></span><br><span class="line">      write-tracing = <span class="literal">false</span></span><br><span class="line">      pprof-enabled = <span class="literal">false</span></span><br><span class="line">      https-enabled = <span class="literal">false</span></span><br><span class="line">      https-certificate = <span class="string">"/etc/ssl/influxdb.pem"</span></span><br><span class="line">      https-private-key = <span class="string">""</span></span><br><span class="line">      max-row-limit = 10000</span><br><span class="line">      max-connection-limit = 0</span><br><span class="line">      shared-secret = <span class="string">""</span></span><br><span class="line">      realm = <span class="string">"InfluxDB"</span></span><br><span class="line">      unix-socket-enabled = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">bind</span>-socket = <span class="string">"/var/run/influxdb.sock"</span></span><br><span class="line">    [[graphite]]</span><br><span class="line">      enabled = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">bind</span>-address = <span class="string">":2003"</span></span><br><span class="line">      database = <span class="string">"graphite"</span></span><br><span class="line">      retention-policy = <span class="string">""</span></span><br><span class="line">      protocol = <span class="string">"tcp"</span></span><br><span class="line">      batch-size = 5000</span><br><span class="line">      batch-pending = 10</span><br><span class="line">      batch-timeout = <span class="string">"1s"</span></span><br><span class="line">      consistency-level = <span class="string">"one"</span></span><br><span class="line">      separator = <span class="string">"."</span></span><br><span class="line">      udp-read-buffer = 0</span><br><span class="line">    [[collectd]]</span><br><span class="line">      enabled = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">bind</span>-address = <span class="string">":25826"</span></span><br><span class="line">      database = <span class="string">"collectd"</span></span><br><span class="line">      retention-policy = <span class="string">""</span></span><br><span class="line">      batch-size = 5000</span><br><span class="line">      batch-pending = 10</span><br><span class="line">      batch-timeout = <span class="string">"10s"</span></span><br><span class="line">      <span class="built_in">read</span>-buffer = 0</span><br><span class="line">      typesdb = <span class="string">"/usr/share/collectd/types.db"</span></span><br><span class="line">    [[opentsdb]]</span><br><span class="line">      enabled = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">bind</span>-address = <span class="string">":4242"</span></span><br><span class="line">      database = <span class="string">"opentsdb"</span></span><br><span class="line">      retention-policy = <span class="string">""</span></span><br><span class="line">      consistency-level = <span class="string">"one"</span></span><br><span class="line">      tls-enabled = <span class="literal">false</span></span><br><span class="line">      certificate = <span class="string">"/etc/ssl/influxdb.pem"</span></span><br><span class="line">      batch-size = 1000</span><br><span class="line">      batch-pending = 5</span><br><span class="line">      batch-timeout = <span class="string">"1s"</span></span><br><span class="line">      <span class="built_in">log</span>-point-errors = <span class="literal">true</span></span><br><span class="line">    [[udp]]</span><br><span class="line">      enabled = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">bind</span>-address = <span class="string">":8089"</span></span><br><span class="line">      database = <span class="string">"udp"</span></span><br><span class="line">      retention-policy = <span class="string">""</span></span><br><span class="line">      batch-size = 5000</span><br><span class="line">      batch-pending = 10</span><br><span class="line">      <span class="built_in">read</span>-buffer = 0</span><br><span class="line">      batch-timeout = <span class="string">"1s"</span></span><br><span class="line">      precision = <span class="string">""</span></span><br><span class="line">    [continuous_queries]</span><br><span class="line">      <span class="built_in">log</span>-enabled = <span class="literal">true</span></span><br><span class="line">      enabled = <span class="literal">true</span></span><br><span class="line">      run-interval = <span class="string">"1s"</span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: monitoring-influxdb</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        task: monitoring</span><br><span class="line">        k8s-app: influxdb</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: influxdb</span><br><span class="line">        image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /data</span><br><span class="line">          name: influxdb-storage</span><br><span class="line">        - mountPath: /etc/</span><br><span class="line">          name: influxdb-config</span><br><span class="line">      volumes:</span><br><span class="line">      - name: influxdb-storage</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      - name: influxdb-config</span><br><span class="line">        configMap:</span><br><span class="line">          name: influxdb-config</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    task: monitoring</span><br><span class="line">    <span class="comment"># For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)</span></span><br><span class="line">    <span class="comment"># If you are NOT using this as an addon, you should comment out this line.</span></span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">'true'</span></span><br><span class="line">    kubernetes.io/name: monitoring-influxdb</span><br><span class="line">  name: monitoring-influxdb</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8086</span><br><span class="line">    targetPort: 8086</span><br><span class="line">    name: http</span><br><span class="line">  - port: 8083</span><br><span class="line">    targetPort: 8083</span><br><span class="line">    name: admin</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: influxdb</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># grafana</span></span><br><span class="line">cat &gt;grafana.yaml&lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: monitoring-grafana</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        task: monitoring</span><br><span class="line">        k8s-app: grafana</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: grafana</span><br><span class="line">        image: gcr.io/google_containers/heapster-grafana-amd64:v4.0.2</span><br><span class="line">        ports:</span><br><span class="line">          - containerPort: 3000</span><br><span class="line">            protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /var</span><br><span class="line">          name: grafana-storage</span><br><span class="line">        env:</span><br><span class="line">        - name: INFLUXDB_HOST</span><br><span class="line">          value: monitoring-influxdb</span><br><span class="line">        - name: GRAFANA_PORT</span><br><span class="line">          value: <span class="string">"3000"</span></span><br><span class="line">          <span class="comment"># The following env variables are required to make Grafana accessible via</span></span><br><span class="line">          <span class="comment"># the kubernetes api-server proxy. On production clusters, we recommend</span></span><br><span class="line">          <span class="comment"># removing these env variables, setup auth for grafana, and expose the grafana</span></span><br><span class="line">          <span class="comment"># service using a LoadBalancer or a public IP.</span></span><br><span class="line">        - name: GF_AUTH_BASIC_ENABLED</span><br><span class="line">          value: <span class="string">"false"</span></span><br><span class="line">        - name: GF_AUTH_ANONYMOUS_ENABLED</span><br><span class="line">          value: <span class="string">"true"</span></span><br><span class="line">        - name: GF_AUTH_ANONYMOUS_ORG_ROLE</span><br><span class="line">          value: Admin</span><br><span class="line">        - name: GF_SERVER_ROOT_URL</span><br><span class="line">          <span class="comment"># If you're only using the API Server proxy, set this value instead:</span></span><br><span class="line">          value: /api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/</span><br><span class="line">          <span class="comment">#value: /</span></span><br><span class="line">      volumes:</span><br><span class="line">      - name: grafana-storage</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    <span class="comment"># For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)</span></span><br><span class="line">    <span class="comment"># If you are NOT using this as an addon, you should comment out this line.</span></span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">'true'</span></span><br><span class="line">    kubernetes.io/name: monitoring-grafana</span><br><span class="line">  name: monitoring-grafana</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># In a production setup, we recommend accessing Grafana through an external Loadbalancer</span></span><br><span class="line">  <span class="comment"># or through a public IP.</span></span><br><span class="line">  <span class="comment"># type: LoadBalancer</span></span><br><span class="line">  <span class="comment"># You could also use NodePort to expose the service at a randomly-generated port</span></span><br><span class="line">  ports:</span><br><span class="line">  - port : 80</span><br><span class="line">    targetPort: 3000</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: grafana</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># heapster</span></span><br><span class="line">cat &gt;heapster.yaml&lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: heapster</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: heapster</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: heapster</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: heapster</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        task: monitoring</span><br><span class="line">        k8s-app: heapster</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: heapster</span><br><span class="line">      containers:</span><br><span class="line">      - name: heapster</span><br><span class="line">        image: gcr.io/google_containers/heapster-amd64:v1.3.0</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /heapster</span><br><span class="line">        - --<span class="built_in">source</span>=kubernetes:https://kubernetes.default</span><br><span class="line">        - --sink=influxdb:http://monitoring-influxdb.kube-system.svc:8086</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    task: monitoring</span><br><span class="line">    <span class="comment"># For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)</span></span><br><span class="line">    <span class="comment"># If you are NOT using this as an addon, you should comment out this line.</span></span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">'true'</span></span><br><span class="line">    kubernetes.io/name: Heapster</span><br><span class="line">  name: heapster</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 8082</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: heapster</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3. 创建</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f .</span><br><span class="line"></span><br><span class="line">kubectl get deploy -n kube-system</span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问dashboard查有无监控图表</span></span><br></pre></td></tr></table></figure></p><p><strong>4. 访问 grafana</strong></p><ul><li><p>通过 kube-apiserver 访问</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl cluster-info</span><br><span class="line"><span class="comment"># https://192.168.12.211:6443/api/v1/namespaces/kube-system/services/monitoring-grafana/proxy</span></span><br></pre></td></tr></table></figure></li><li><p>通过 kubectl proxy 访问</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl proxy --address=<span class="string">'192.168.12.211'</span> --port=8086 --accept-hosts=<span class="string">'^*$'</span></span><br><span class="line"><span class="comment"># http://192.168.12.211:8086/api/v1/proxy/namespaces/kube-system/services/monitoring-grafana</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>5. 访问 influxdb admin UI</strong></p><ul><li><p>通过NodePort</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc -n kube-system|grep influxdb</span><br><span class="line"><span class="comment"># http://192.168.12.212:31083/</span></span><br></pre></td></tr></table></figure></li><li><p>通过api-server</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://192.168.12.211:8080/api/v1/proxy/namespaces/kube-system/services/monitoring-influxdb:8083/</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>如果后续使用 kube-apiserver 或者 kubectl proxy 访问 grafana dashboard，则必须将 GF_SERVER_ROOT_URL 设置为/api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/，否则后续访问grafana时访问时提示找不到<a href="http://192.168.12.211:8086/api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/api/dashboards/home" target="_blank" rel="noopener">http://192.168.12.211:8086/api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/api/dashboards/home</a> 页面；<br>heapster1.4版本会有问题，造成grafana无法成功启动，建议使用1.3版本</p></blockquote><h4 id="配置和安装-EFK"><a href="#配置和安装-EFK" class="headerlink" title="配置和安装 EFK"></a>配置和安装 EFK</h4><p><strong>1. 拉取镜像</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker pull daocloud.io/will835559313/k8s:master-6ccfe3d</span><br><span class="line">docker tag daocloud.io/will835559313/k8s:master-6ccfe3d gcr.io/google_containers/kibana:v4.6.1-1</span><br><span class="line"></span><br><span class="line">docker pull daocloud.io/will835559313/k8s:master-425d70b</span><br><span class="line">docker tag daocloud.io/will835559313/k8s:master-425d70b gcr.io/google_containers/fluentd-elasticsearch:1.22</span><br><span class="line"></span><br><span class="line">docker pull daocloud.io/will835559313/k8s:master-1e3ccdf</span><br><span class="line">docker tag daocloud.io/will835559313/k8s:master-1e3ccdf gcr.io/google_containers/elasticsearch:v2.4.1-2</span><br></pre></td></tr></table></figure></p><p><strong>2. 修改yaml</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /server/software/k8s/efk</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s/efk</span><br><span class="line"></span><br><span class="line"><span class="comment"># rbac</span></span><br><span class="line">cat &gt;efk-rbac.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: efk</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: efk</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: efk</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># es</span></span><br><span class="line">cat &gt;es.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ReplicationController</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-logging-v1</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    version: v1</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    version: v1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: elasticsearch-logging</span><br><span class="line">        version: v1</span><br><span class="line">        kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: efk</span><br><span class="line">      containers:</span><br><span class="line">      - image: gcr.io/google_containers/elasticsearch:v2.4.1-2</span><br><span class="line">        name: elasticsearch-logging</span><br><span class="line">        resources:</span><br><span class="line">          <span class="comment"># need more cpu upon initialization, therefore burstable class</span></span><br><span class="line">          limits:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9200</span><br><span class="line">          name: db</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 9300</span><br><span class="line">          name: transport</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: es-persistent-storage</span><br><span class="line">          mountPath: /data</span><br><span class="line">        env:</span><br><span class="line">        - name: <span class="string">"NAMESPACE"</span></span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.namespace</span><br><span class="line">      volumes:</span><br><span class="line">      - name: es-persistent-storage</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">    kubernetes.io/name: <span class="string">"Elasticsearch"</span></span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 9200</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: db</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># kibana</span></span><br><span class="line">cat &gt;kibana.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: kibana-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kibana-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kibana-logging</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kibana-logging</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: efk</span><br><span class="line">      containers:</span><br><span class="line">      - name: kibana-logging</span><br><span class="line">        image: gcr.io/google_containers/kibana:v4.6.1-1</span><br><span class="line">        resources:</span><br><span class="line">          <span class="comment"># keep request = limit to keep this container in guaranteed class</span></span><br><span class="line">          limits:</span><br><span class="line">            cpu: 100m</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">        env:</span><br><span class="line">          - name: <span class="string">"ELASTICSEARCH_URL"</span></span><br><span class="line">            value: <span class="string">"http://elasticsearch-logging:9200"</span></span><br><span class="line">          - name: <span class="string">"KIBANA_BASE_URL"</span></span><br><span class="line">            value: <span class="string">"/api/v1/proxy/namespaces/kube-system/services/kibana-logging"</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 5601</span><br><span class="line">          name: ui</span><br><span class="line">          protocol: TCP</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kibana-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kibana-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">    kubernetes.io/name: <span class="string">"Kibana"</span></span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 5601</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: ui</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kibana-logging</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># flentd</span></span><br><span class="line">cat &gt;fluentd-es-ds.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-es-v1.22</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-es</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">    version: v1.22</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: fluentd-es</span><br><span class="line">        kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">        version: v1.22</span><br><span class="line">      <span class="comment"># This annotation ensures that fluentd does not get evicted if the node</span></span><br><span class="line">      <span class="comment"># supports critical pod annotation based priority scheme.</span></span><br><span class="line">      <span class="comment"># Note that this does not guarantee admission on the nodes (#40573).</span></span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: efk</span><br><span class="line">      containers:</span><br><span class="line">      - name: fluentd-es</span><br><span class="line">        image: gcr.io/google_containers/fluentd-elasticsearch:1.22</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">          - <span class="string">'/bin/sh'</span></span><br><span class="line">          - <span class="string">'-c'</span></span><br><span class="line">          - <span class="string">'/usr/sbin/td-agent 2&gt;&amp;1 &gt;&gt; /var/log/fluentd.log'</span></span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            memory: 200Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 200Mi</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: varlog</span><br><span class="line">          mountPath: /var/<span class="built_in">log</span></span><br><span class="line">        - name: varlibdockercontainers</span><br><span class="line">          mountPath: /var/lib/docker/containers</span><br><span class="line">          readOnly: <span class="literal">true</span></span><br><span class="line">      nodeSelector:</span><br><span class="line">        beta.kubernetes.io/fluentd-ds-ready: <span class="string">"true"</span></span><br><span class="line">      tolerations:</span><br><span class="line">      - key : <span class="string">"node.alpha.kubernetes.io/ismaster"</span></span><br><span class="line">        effect: <span class="string">"NoSchedule"</span></span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      volumes:</span><br><span class="line">      - name: varlog</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/<span class="built_in">log</span></span><br><span class="line">      - name: varlibdockercontainers</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/lib/docker/containers</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3. 给 Node 设置标签</strong></p><blockquote><p>定义 DaemonSet fluentd-es-v1.22 时设置了 nodeSelector beta.kubernetes.io/fluentd-ds-ready=true ，所以需要在期望运行 fluentd 的 Node 上设置该标签；</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line">kubectl label nodes 192.168.12.212 beta.kubernetes.io/fluentd-ds-ready=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>4. 创建</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f .</span><br><span class="line">kubectl get deploy -n kube-system</span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># kibana Pod 第一次启动时会用**较长时间(10-20分钟)**来优化和 Cache 状态页面，</span></span><br><span class="line"><span class="comment"># 可以 tailf 该 Pod 的日志观察进度：</span></span><br><span class="line">kubectl logs -f kibana-logging-269483651-c2tl0 -n kube-system</span><br></pre></td></tr></table></figure></p><p><strong>5. 访问</strong></p><ul><li><p>通过 kube-apiserver 访问</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl cluster-info</span><br><span class="line"><span class="comment"># https://192.168.12.211:6443/api/v1/namespaces/kube-system/services/kibana-logging/proxy</span></span><br></pre></td></tr></table></figure></li><li><p>通过 kubectl proxy 访问</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl proxy --address=<span class="string">'192.168.12.211'</span> --port=8086 --accept-hosts=<span class="string">'^*$'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http://192.168.12.211:8086/api/v1/proxy/namespaces/kube-system/services/kibana-logging</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>可能遇到的问题<br>如果你在这里发现Create按钮是灰色的无法点击，且Time-filed name中没有选项，fluentd要读取/var/log/containers/目录下的log日志，这些日志是从/var/lib/docker/containers/${CONTAINER_ID}/${CONTAINER_ID}-json.log链接过来的，查看你的docker配置，—log-dirver需要设置为json-file格式，默认的可能是journald，参考docker logging。</p></blockquote><h4 id="安装配置-traefik-ingress"><a href="#安装配置-traefik-ingress" class="headerlink" title="安装配置 traefik ingress"></a>安装配置 traefik ingress</h4><p><strong>1. 简介</strong></p><ul><li><p>理解Ingress</p><p>简单的说，ingress就是从kubernetes集群外访问集群的入口，将用户的URL请求转<br>发到不同的service上。Ingress相当于nginx、apache等负载均衡方向代理服务器，<br>其中还包括规则定义，即URL的路由信息，路由信息得的刷新由Ingress controller<br>来提供。</p></li><li><p>理解Ingress Controller</p><p>Ingress Controller 实质上可以理解为是个监视器，Ingress Controller 通过不断地跟<br>kubernetes API 打交道，实时的感知后端 service、pod 等变化，比如新增和减少<br>pod，service 增加与减少等；当得到这些变化信息后，Ingress Controller 再结合下<br>文的 Ingress 生成配置，然后更新反向代理负载均衡器，并刷新其配置，达到服务<br>发现的作用。</p></li></ul><p><strong>2. 配置yaml文件</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">mkdir /server/software/k8s/traefik</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s/traefik</span><br><span class="line"></span><br><span class="line"><span class="comment"># rbac</span></span><br><span class="line">cat &gt;ingress-rbac.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: ingress</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># ingress</span></span><br><span class="line">cat &gt;ingress.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: traefik.nginx.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: my-nginx</span><br><span class="line">          servicePort: 80</span><br><span class="line">  - host: traefik.frontend.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: frontend</span><br><span class="line">          servicePort: 80</span><br><span class="line">  - host: rolling-update-test.traefik.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: rolling-update-test</span><br><span class="line">          servicePort: 9090</span><br><span class="line">  - host: k8s-app-monitor-agent.jimmysong.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: k8s-app-monitor-agent</span><br><span class="line">          servicePort: 8080</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># traefik</span></span><br><span class="line">cat &gt;traefik.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-lb</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: traefik-ingress-lb</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 60</span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      serviceAccountName: ingress</span><br><span class="line">      containers:</span><br><span class="line">      - image: traefik</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 200m</span><br><span class="line">            memory: 30Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 20Mi</span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: 80</span><br><span class="line">          hostPort: 80</span><br><span class="line">        - name: admin</span><br><span class="line">          containerPort: 8580</span><br><span class="line">          hostPort: 8580</span><br><span class="line">        args:</span><br><span class="line">        - --web</span><br><span class="line">        - --web.address=:8580</span><br><span class="line">        - --kubernetes</span><br><span class="line">      nodeSelector:</span><br><span class="line">        edgenode: <span class="string">"true"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># ui</span></span><br><span class="line">cat &gt;ui.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 8580</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: traefik-ui.local</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: traefik-web-ui</span><br><span class="line">          servicePort: web</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3. 创建</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 node 的 label</span></span><br><span class="line">kubectl get nodes</span><br><span class="line">kubectl label nodes 192.168.12.212 edgenode=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">kubectl create -f .</span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get ds -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure></p><p><strong>4. 访问</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管理页面</span></span><br><span class="line">http://192.168.12.212:8580/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 nginx</span></span><br><span class="line"><span class="comment"># 配置hosts</span></span><br><span class="line"><span class="comment"># 192.168.12.212 traefik.nginx.io</span></span><br><span class="line">curl traefik.nginx.io</span><br></pre></td></tr></table></figure></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.kubernetes.org.cn/1870.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/1870.html</a></li><li><a href="https://github.com/rootsongjc/kubernetes-handbook" target="_blank" rel="noopener">https://github.com/rootsongjc/kubernetes-handbook</a></li><li><a href="https://github.com/opsnull/follow-me-install-kubernetes-cluster" target="_blank" rel="noopener">https://github.com/opsnull/follow-me-install-kubernetes-cluster</a></li><li><a href="http://www.cnblogs.com/ericnie/p/6965091.html" target="_blank" rel="noopener">http://www.cnblogs.com/ericnie/p/6965091.html</a></li><li><a href="https://docs.traefik.io/user-guide/kubernetes/" target="_blank" rel="noopener">https://docs.traefik.io/user-guide/kubernetes/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装kubernetes-v1.7安装配置calico网络组件</title>
      <link href="/posts/9/"/>
      <url>/posts/9/</url>
      
        <content type="html"><![CDATA[<h3 id="安装条件"><a href="#安装条件" class="headerlink" title="安装条件"></a>安装条件</h3><ul><li><p>kube-apiserver 必须开启参数 <code>--runtime-config=extensions/v1beta1/networkpolicies=true</code></p><blockquote><ul><li>v1.6以及以前的版本需要在apiserver开启 extensions/v1beta1/networkpolicies</li><li>v1.7+版本Network Policy已经GA，API版本为 networking.k8s.io/v1</li></ul></blockquote></li><li><p>kubelet 配置使用cni网络插件 <code>--network-plugin=cni</code></p></li><li>kube-proxy 必须使用iptables模式 <code>--proxy-mode=iptables</code>，默认就是这个参数</li><li>kube-proxy 不能设置 <code>--masquerade-all</code></li><li>kubernetes &gt; v1.3.0</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>1. 配置rbac</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /server/software/k8s/calico</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s/calico</span><br><span class="line">wget http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/rbac.yaml</span><br><span class="line">kubectl apply -f rbac.yaml</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>2. 拉取镜像</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull calico/node:v2.4.0</span><br><span class="line">docker pull calico/cni:v1.10.0</span><br><span class="line">docker pull calico/kube-policy-controller:v0.7.0</span><br><span class="line"></span><br><span class="line">docker tag calico/node:v2.4.0 quay.io/calico/node:v2.4.0</span><br><span class="line">docker tag calico/cni:v1.10.0 quay.io/calico/cni:v1.10.0</span><br><span class="line">docker tag calico/kube-policy-controller:v0.7.0 quay.io/calico/kube-policy-controller:v0.7.0</span><br></pre></td></tr></table></figure></p><p><strong>3. 启动</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载配置文件</span></span><br><span class="line">wget http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改etcd相关的配置</span></span><br><span class="line">etcd_endpoints: <span class="string">"https://192.168.12.211:2379,https://192.168.12.212:2379,https://192.168.12.213:2379"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于使用了tls需要配置如下位置</span></span><br><span class="line">etcd_ca: <span class="string">"/calico-secrets/etcd-ca"</span></span><br><span class="line">etcd_cert: <span class="string">"/calico-secrets/etcd-cert"</span></span><br><span class="line">etcd_key: <span class="string">"/calico-secrets/etcd-key"</span></span><br><span class="line">...</span><br><span class="line">etcd-key: xxxxxxxxxx</span><br><span class="line">etcd-cert: xxxxxxxxxxx</span><br><span class="line">etcd-ca: xxxxxxxxxxxx</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的内容使用如下方式获取</span></span><br><span class="line">base64 /etc/kubernetes/ssl/kubernetes-key.pem | tr -d <span class="string">'\n'</span></span><br><span class="line">base64 /etc/kubernetes/ssl/kubernetes.pem | tr -d <span class="string">'\n'</span></span><br><span class="line">base64 /etc/kubernetes/ssl/ca.pem | tr -d <span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果pod不能正常上网，还可以指定网卡。</span></span><br><span class="line"><span class="comment"># 在配置node的containers段的env配置如下环境变量</span></span><br><span class="line">- name: IP_AUTODETECTION_METHOD</span><br><span class="line">  value: <span class="string">"IP_AUTODETECTION_METHOD=can-reach=www.baidu.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者配置如下形式</span></span><br><span class="line">- name: IP_AUTODETECTION_METHOD</span><br><span class="line">  value: <span class="string">"IP_AUTODETECTION_METHOD=interface=eth0"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f calico.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure></p><p><strong>4. 测试</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动多个容器查看，看是否能ping通</span></span><br><span class="line">kubectl run calico-test-1 --rm -ti --image busybox /bin/sh</span><br><span class="line">kubectl run calico-test-2 --rm -ti --image busybox /bin/sh</span><br><span class="line">kubectl run calico-test-3 --rm -ti --image busybox /bin/sh</span><br></pre></td></tr></table></figure></p><h3 id="Network-policy-测试"><a href="#Network-policy-测试" class="headerlink" title="Network policy 测试"></a>Network policy 测试</h3><p>默认网络是全部连通的，POD之间可以随意访问。</p><p><strong>1. 创建 nginx deploy</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --image=nginx --replicas=2</span><br><span class="line">kubectl expose deployment nginx --port=80</span><br><span class="line">kubectl get svc,pod</span><br></pre></td></tr></table></figure></p><p><strong>2. 测试</strong><br>测试应该通过<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.254.132.113 为上面获取到的 nginx 的集群 IP</span></span><br><span class="line">kubectl run busybox --rm -ti --image=busybox /bin/sh</span><br><span class="line">wget --spider --timeout=1 10.254.132.113</span><br></pre></td></tr></table></figure></p><p><strong>3. 限制连接</strong><br>限制连接，只有设置了<code>label access: true</code>才能访问到 nginx 服务<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;nginx-policy.yaml&lt;&lt;EOF</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: access-nginx</span><br><span class="line">spec:</span><br><span class="line">  podSelector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      run: nginx</span><br><span class="line">  ingress:</span><br><span class="line">  - from:</span><br><span class="line">    - podSelector:</span><br><span class="line">        matchLabels:</span><br><span class="line">          access: <span class="string">"true"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">kubectl create -f nginx-policy.yaml</span><br></pre></td></tr></table></figure></p><p><strong>4. 测试</strong><br>测试应该不能通过<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl run busybox --rm -ti --image=busybox /bin/sh</span><br><span class="line">wget --spider --timeout=1 10.254.132.113</span><br></pre></td></tr></table></figure></p><p><strong>5. 设置label测试</strong><br>测试应该通过<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl run busybox --rm -ti --labels=<span class="string">"access=true"</span> --image=busybox /bin/sh</span><br><span class="line">wget --spider --timeout=1 10.254.132.113</span><br></pre></td></tr></table></figure></p><p><strong>6. 清理</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete deploy nginx</span><br><span class="line">kubectl delete svc nginx</span><br></pre></td></tr></table></figure></p><blockquote><p>配置参考文档<br><a href="http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/index#configuration-options" target="_blank" rel="noopener">http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/index#configuration-options</a></p></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/" target="_blank" rel="noopener">http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/</a></li><li><a href="http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/hosted" target="_blank" rel="noopener">http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/hosted</a></li><li><a href="http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/index#configuration-options" target="_blank" rel="noopener">http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/index#configuration-options</a></li><li><a href="http://docs.projectcalico.org/v2.4/reference/node/configuration" target="_blank" rel="noopener">http://docs.projectcalico.org/v2.4/reference/node/configuration</a></li><li><a href="https://zhuanlan.zhihu.com/p/27699958" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27699958</a></li><li><a href="https://kubernetes.io/docs/tasks/administer-cluster/declare-network-policy/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/administer-cluster/declare-network-policy/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> calico </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装kubernetes-v1.7 master 高可用配置</title>
      <link href="/posts/8/"/>
      <url>/posts/8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本教程紧接 centos7安装kubernetes-v1.7 请参考。<br>所有master节点均安装 kube-apiserver,kube-scheduler,kube-controller-manager组件。<br>为了方便，本教程使用docker相关组件。</p></blockquote><h3 id="配置-haproxy"><a href="#配置-haproxy" class="headerlink" title="配置 haproxy"></a>配置 haproxy</h3><p><strong>1. 拉取镜像</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull haproxy:1.7.8-alpine</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>2. 配置</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/haproxy</span><br><span class="line">cat &gt;/etc/haproxy/haproxy.cfg&lt;&lt;EOF</span><br><span class="line">global</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 info</span><br><span class="line">  maxconn 50000</span><br><span class="line">  uid 99</span><br><span class="line">  gid 99</span><br><span class="line">  <span class="comment">#daemon</span></span><br><span class="line">  nbproc 1</span><br><span class="line">  pidfile haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 info</span><br><span class="line">  maxconn 50000</span><br><span class="line">  retries 3</span><br><span class="line">  timeout connect 5s</span><br><span class="line">  timeout client 30s</span><br><span class="line">  timeout server 30s</span><br><span class="line">  timeout check 2s</span><br><span class="line"></span><br><span class="line">listen admin_stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:1080</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  stats refresh 30s</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats realm   Haproxy\ Statistics</span><br><span class="line">  stats auth    will:will</span><br><span class="line">  stats hide-version</span><br><span class="line">  stats admin <span class="keyword">if</span> TRUE</span><br><span class="line"></span><br><span class="line">frontend k8s-https</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:6443</span><br><span class="line">  mode tcp</span><br><span class="line">  <span class="comment">#maxconn 50000</span></span><br><span class="line">  default_backend k8s-https</span><br><span class="line"></span><br><span class="line">frontend k8s-http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:8080</span><br><span class="line">  mode tcp</span><br><span class="line">  <span class="comment">#maxconn 50000</span></span><br><span class="line">  default_backend k8s-http</span><br><span class="line"></span><br><span class="line">backend k8s-https</span><br><span class="line">  mode tcp</span><br><span class="line">  balance roundrobin</span><br><span class="line">  server lab1 192.168.12.211:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab2 192.168.12.212:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab3 192.168.12.213:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line"></span><br><span class="line">backend k8s-http</span><br><span class="line">  mode tcp</span><br><span class="line">  balance roundrobin</span><br><span class="line">  server lab1 192.168.12.211:8080 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab2 192.168.12.212:8080 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab3 192.168.12.213:8080 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3. 启动</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name my-haproxy \</span><br><span class="line">-v /etc/haproxy:/usr/<span class="built_in">local</span>/etc/haproxy:ro \</span><br><span class="line">-p 6445:6443 \</span><br><span class="line">-p 8090:8080 \</span><br><span class="line">-p 1080:1080 \</span><br><span class="line">--restart always \</span><br><span class="line">haproxy:1.7.8-alpine</span><br></pre></td></tr></table></figure></p><p><strong>4. 查看日志</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs my-haproxy</span><br></pre></td></tr></table></figure></p><h3 id="配置-keepalived"><a href="#配置-keepalived" class="headerlink" title="配置 keepalived"></a>配置 keepalived</h3><p><strong>1. 拉取镜像</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker pull osixia/keepalived:1.3.5-1</span></span><br><span class="line">docker pull oberthur/docker-keepalived</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次使用的镜像不需要配置</span></span><br><span class="line">cat &gt;/etc/keepalived/keepalived.conf&lt;&lt;EOF</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3. 启动</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep ip_vs</span><br><span class="line">modprobe ip_vs</span><br><span class="line"></span><br><span class="line"><span class="comment"># master</span></span><br><span class="line">docker run --net=host --<span class="built_in">cap</span>-add=NET_ADMIN -e VIP=192.168.12.215 \</span><br><span class="line">-e VROUTERID=112 -e STATE=BACKUP -e INTERFACE=eth1 -e PRIORITY=100 \</span><br><span class="line">-e AUTHPASS=blah \</span><br><span class="line">--name keepalived0 \</span><br><span class="line">--restart always \</span><br><span class="line">-d oberthur/docker-keepalived</span><br><span class="line"></span><br><span class="line"><span class="comment"># backup</span></span><br><span class="line">docker run --net=host --<span class="built_in">cap</span>-add=NET_ADMIN -e VIP=192.168.12.215 \</span><br><span class="line">-e VROUTERID=112 -e STATE=BACKUP -e INTERFACE=eth1 -e PRIORITY=100 \</span><br><span class="line">-e AUTHPASS=blah \</span><br><span class="line">--name keepalived0 \</span><br><span class="line">--restart always \</span><br><span class="line">-d oberthur/docker-keepalived</span><br></pre></td></tr></table></figure></p><blockquote><p>此时会配置 192.168.12.215 到其中一台机器</p></blockquote><h3 id="配置k8s的注意事项"><a href="#配置k8s的注意事项" class="headerlink" title="配置k8s的注意事项"></a>配置k8s的注意事项</h3><ul><li>把api的地址指向负载均衡的地址 <code>192.168.12.215</code></li><li>在创建kubernetes.pem的时候要把这个 VIP 加入其中</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>关闭相应的组件查看日志。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">journalctl -f -u kube-controller-manager</span><br><span class="line">journalctl -f -u kube-scheduler</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装配置kubernetes-v1.7</title>
      <link href="/posts/7/"/>
      <url>/posts/7/</url>
      
        <content type="html"><![CDATA[<h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>安装kubernetes-v1.7并使用TLS认证，请提前安装好docker环境。本教程使用docker-12.3<br>安装时需要下载的文件都放在<code>/server/software/k8s目录下</code></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="创建-kubernetes-各组件-TLS-加密通信的证书和秘钥"><a href="#创建-kubernetes-各组件-TLS-加密通信的证书和秘钥" class="headerlink" title="创建 kubernetes 各组件 TLS 加密通信的证书和秘钥"></a>创建 kubernetes 各组件 TLS 加密通信的证书和秘钥</h4><p><strong>1. 安装 CFSSL</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /server/software/k8s</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s</span><br><span class="line"></span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mv cfssl-certinfo_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl-certinfo</span><br><span class="line">mv cfssl_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl</span><br><span class="line">mv cfssljson_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssljson</span><br><span class="line"></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/cfssl*</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>2. 创建 CA</strong></p><p>生成配置文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/ssl</span><br><span class="line"><span class="built_in">cd</span> /root/ssl</span><br><span class="line"><span class="comment">#cfssl print-defaults config &gt; config.json</span></span><br><span class="line"><span class="comment">#cfssl print-defaults csr &gt; csr.json</span></span><br><span class="line">cat &gt;ca-config.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"signing"</span>: &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">      <span class="string">"expiry"</span>: <span class="string">"8760h"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"profiles"</span>: &#123;</span><br><span class="line">      <span class="string">"kubernetes"</span>: &#123;</span><br><span class="line">        <span class="string">"usages"</span>: [</span><br><span class="line">            <span class="string">"signing"</span>,</span><br><span class="line">            <span class="string">"key encipherment"</span>,</span><br><span class="line">            <span class="string">"server auth"</span>,</span><br><span class="line">            <span class="string">"client auth"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"expiry"</span>: <span class="string">"8760h"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;ca-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>“CN”：Common Name，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；</li><li>“O”：Organization，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)；</li></ul></blockquote><p>生成 CA 证书和私钥<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br><span class="line">ls ca*</span><br></pre></td></tr></table></figure></p><p><strong>3. 创建 kubernetes 证书</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cat &gt;kubernetes-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"192.168.12.211"</span>,</span><br><span class="line">      <span class="string">"192.168.12.212"</span>,</span><br><span class="line">      <span class="string">"192.168.12.213"</span>,</span><br><span class="line">      <span class="string">"10.254.0.1"</span>,</span><br><span class="line">      <span class="string">"kubernetes"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc.cluster"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc.cluster.local"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes</span><br><span class="line">ls kubernetes*</span><br></pre></td></tr></table></figure><blockquote><p>如果 hosts 字段不为空则需要指定授权使用该证书的 IP 或域名列表，由于该证书后续被 etcd<br>集群和 kubernetes master集群使用，所以上面分别指定了 etcd 集群、kubernetes master<br>集群的主机 IP 和 kubernetes 服务的服务 IP（一般是kue-apiserver 指定的<br>service-cluster-ip-range 网段的第一个IP，如 10.254.0.1。<br>如果配置高可用，注意把负载均衡的VIP加入其中。</p></blockquote><p><strong>4. 创建 admin 证书</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cat &gt;admin-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"admin"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"system:masters"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes admin-csr.json | cfssljson -bare admin</span><br><span class="line">ls admin*</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>后续 kube-apiserver 使用 RBAC 对客户端(如 kubelet、kube-proxy、Pod)请求进行授权；</li><li>kube-apiserver 预定义了一些 RBAC 使用的 RoleBindings，如 cluster-admin 将<br>Group system:masters 与 Rolecluster-admin 绑定，该 Role 授予了调用kube-apiserver<br>的所有 API的权限；</li><li>OU 指定该证书的 Group 为 system:masters，kubelet 使用该证书访问 kube-apiserver<br>时 ，由于证书被 CA 签名，所以认证通过，同时由于证书用户组为经过预授权的 system:masters，<br>所以被授予访问所有 API 的权限；</li></ul></blockquote><p><strong>5. 创建 kube-proxy 证书</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cat &gt;kube-proxy-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br><span class="line">ls kube-proxy*</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>CN 指定该证书的 User 为 system:kube-proxy；</li><li>kube-apiserver 预定义的 RoleBinding cluster-admin 将User system:kube-proxy<br>与 Role system:node-proxier 绑定，该 Role 授予了调用 kube-apiserver Proxy<br>相关 API 的权限；</li></ul></blockquote><p><strong>6. 校验证书</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl-certinfo -cert kubernetes.pem</span><br></pre></td></tr></table></figure></p><p><strong>7. 分发证书</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制证书</span></span><br><span class="line">mkdir -p /etc/kubernetes/ssl</span><br><span class="line">cp *.pem /etc/kubernetes/ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy到其他机器</span></span><br><span class="line">ssh lab2 <span class="string">'mkdir -pv /etc/kubernetes'</span></span><br><span class="line">scp -r /etc/kubernetes/ssl lab2:/etc/kubernetes/ssl</span><br></pre></td></tr></table></figure></p><h4 id="创建-kubeconfig-文件"><a href="#创建-kubeconfig-文件" class="headerlink" title="创建 kubeconfig 文件"></a>创建 kubeconfig 文件</h4><blockquote><p>这一步骤的操作只需要在master节点上操作，然后把配置文件分发到其他node节点即可。</p></blockquote><p><strong>1. 安装 kubectl</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /server/software/k8s</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kubectl</span><br><span class="line">chmod +x kubectl</span><br><span class="line">mv kubectl /usr/local/bin</span><br><span class="line">kubectl version</span><br></pre></td></tr></table></figure></p><p><strong>2. 创建 TLS Bootstrapping Token</strong></p><p>kubelet、kube-proxy 等 Node 机器上的进程与 Master 机器的 kube-apiserver 进程通信时<br>需要认证和授权；kubernetes 1.4 开始支持由 kube-apiserver 为客户端生成 TLS 证书的<br>TLS Bootstrapping 功能，这样就不需要为每个客户端生成证书了；该功能当前仅支持为 kubelet<br>生成证书。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> BOOTSTRAP_TOKEN=$(head -c 16 /dev/urandom | od -An -t x | tr -d <span class="string">' '</span>)</span><br><span class="line">cat &gt; token.csv &lt;&lt;EOF</span><br><span class="line"><span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span>,kubelet-bootstrap,10001,<span class="string">"system:kubelet-bootstrap"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#将token.csv发到所有机器Master的 /etc/kubernetes/ 目录</span></span><br><span class="line">cp token.csv /etc/kubernetes</span><br><span class="line">scp token.csv lab2:/etc/kubernetes</span><br></pre></td></tr></table></figure><p><strong>3. 创建 kubelet bootstrapping kubeconfig 文件</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/kubernetes</span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://192.168.12.211:6443"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置客户端认证参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kubelet-bootstrap \</span><br><span class="line">  --token=<span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kubelet-bootstrap \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line">kubectl config use-context default --kubeconfig=bootstrap.kubeconfig</span><br></pre></td></tr></table></figure></p><p><strong>4. 创建 kube-proxy kubeconfig 文件</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://192.168.12.211:6443"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置客户端认证参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kube-proxy \</span><br><span class="line">  --client-certificate=/etc/kubernetes/ssl/kube-proxy.pem \</span><br><span class="line">  --client-key=/etc/kubernetes/ssl/kube-proxy-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kube-proxy \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line">kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</span><br></pre></td></tr></table></figure></p><p><strong>5. 分发 kubeconfig 文件</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp bootstrap.kubeconfig kube-proxy.kubeconfig /etc/kubernetes/</span><br><span class="line">scp bootstrap.kubeconfig kube-proxy.kubeconfig lab2:/etc/kubernetes/</span><br></pre></td></tr></table></figure></p><h4 id="创建高可用-etcd-集群"><a href="#创建高可用-etcd-集群" class="headerlink" title="创建高可用 etcd 集群"></a>创建高可用 etcd 集群</h4><blockquote><ul><li>本次实验使用lab1,lab2,lab3组成etcd集成，lab1为k8s-master节点，<br>lab2,lab3为k8s-node节点。</li><li>在集群启动的时候尽量一起启动。因为ca里配置是使用的ip，所有在这里<br>也全要使用ip地址。否则会无法识别ca，报错，无法成功创建集群。</li></ul></blockquote><p><strong>1. 安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /server/software/k8s</span><br><span class="line">wget https://github.com/coreos/etcd/releases/download/v3.2.4/etcd-v3.2.4-linux-amd64.tar.gz</span><br><span class="line">tar xf etcd-v3.2.4-linux-amd64.tar.gz</span><br><span class="line">cd etcd-v3.2.4-linux-amd64 &amp;&amp; cp etcd etcdctl /usr/local/bin</span><br><span class="line">etcdctl -v</span><br></pre></td></tr></table></figure></p><p><strong>2. 创建 etcd 的 systemd unit 文件</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ETCD_NAME=lab1</span><br><span class="line"><span class="built_in">export</span> INTERNAL_IP=$(hostname -i)</span><br><span class="line">mkdir -pv /data/etcd</span><br><span class="line">cat &gt; etcd.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Documentation=https://github.com/coreos</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/data/etcd</span><br><span class="line">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/etcd \\</span><br><span class="line">  --name <span class="variable">$&#123;ETCD_NAME&#125;</span> \\</span><br><span class="line">  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \\</span><br><span class="line">  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \\</span><br><span class="line">  --peer-cert-file=/etc/kubernetes/ssl/kubernetes.pem \\</span><br><span class="line">  --peer-key-file=/etc/kubernetes/ssl/kubernetes-key.pem \\</span><br><span class="line">  --trusted-ca-file=/etc/kubernetes/ssl/ca.pem \\</span><br><span class="line">  --peer-trusted-ca-file=/etc/kubernetes/ssl/ca.pem \\</span><br><span class="line">  --initial-advertise-peer-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2380 \\</span><br><span class="line">  --listen-peer-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2380 \\</span><br><span class="line">  --listen-client-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2379,https://127.0.0.1:2379 \\</span><br><span class="line">  --advertise-client-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2379 \\</span><br><span class="line">  --initial-cluster-token my-etcd-token \\</span><br><span class="line">  --initial-cluster lab1=https://192.168.12.211:2380,lab2=https://192.168.12.212:2380,lab3=https://192.168.12.213:2380 \\</span><br><span class="line">  --initial-cluster-state new \\</span><br><span class="line">  --data-dir=/data/etcd</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3. 启动</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv etcd.service /etc/systemd/system/</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> etcd</span><br><span class="line">systemctl start etcd</span><br><span class="line">systemctl status etcd</span><br></pre></td></tr></table></figure></p><p><strong>4. 测试</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">etcdctl --endpoints <span class="string">"https://127.0.0.1:2379"</span> \</span><br><span class="line">  --ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \</span><br><span class="line">  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \</span><br><span class="line">  cluster-health</span><br></pre></td></tr></table></figure></p><h4 id="配置-kubectl-命令行工具"><a href="#配置-kubectl-命令行工具" class="headerlink" title="配置 kubectl 命令行工具"></a>配置 kubectl 命令行工具</h4><blockquote><p>只需要在需要连接api-server的client上配置。主要用来操作集群。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://192.168.12.211:6443"</span></span><br><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span></span><br><span class="line"><span class="comment"># 设置客户端认证参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials admin \</span><br><span class="line">  --client-certificate=/etc/kubernetes/ssl/admin.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --client-key=/etc/kubernetes/ssl/admin-key.pem</span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context kubernetes \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=admin</span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line">kubectl config use-context kubernetes</span><br></pre></td></tr></table></figure><blockquote><p>生成的 kubeconfig 被保存到 ~/.kube/config 文件</p></blockquote><h4 id="部署高可用-kubernetes-master-集群"><a href="#部署高可用-kubernetes-master-集群" class="headerlink" title="部署高可用 kubernetes master 集群"></a>部署高可用 kubernetes master 集群</h4><blockquote><ul><li>kube-scheduler 、 kube-controller-manager 和 kube-apiserver 三者的功能紧密相关；<br>要部署在同台服务器。</li><li>同时只能有一个 kube-scheduler 、 kube-controller-manager 进程处于工作状态，<br>如果运行多个，则需要通过选举产生一个 leader；</li><li>多个master节点可以直接部署，多个master使用同一个etcd集成即可。然后把kube-apiserver<br>通过负载均衡与其他组件通信。这样就组成了高可用 master 集群。</li><li>具体可以参考<code>centos7安装kubernetes-v1.7 master 高可用配置</code>教程</li></ul></blockquote><p><strong>1. 下载安装</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /server/software/k8s</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kube-apiserver</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kube-controller-manager</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kube-scheduler</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kubectl</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kubelet</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kube-proxy</span><br><span class="line"></span><br><span class="line">chmod +x kube-apiserver kube-controller-manager kubectl kubelet kube-proxy kube-scheduler</span><br><span class="line">\cp kube-apiserver kube-controller-manager kubectl kubelet kube-proxy kube-scheduler /usr/<span class="built_in">local</span>/bin</span><br><span class="line">scp kube-apiserver kube-controller-manager kubectl kubelet kube-proxy kube-scheduler lab2:/usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置和启动 kube-apiserver</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/usr/lib/systemd/system/kube-apiserver.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Service</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line">After=etcd.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/apiserver</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kube-apiserver \\</span><br><span class="line">    \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_ETCD_SERVERS</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_API_ADDRESS</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_API_PORT</span> \\</span><br><span class="line">    \<span class="variable">$KUBELET_PORT</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_ALLOW_PRIV</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_SERVICE_ADDRESSES</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_ADMISSION_CONTROL</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_API_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">Type=notify</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该配置文件同时被kube-apiserver、kube-controller-manager、</span></span><br><span class="line"><span class="comment"># kube-scheduler、kubelet、kube-proxy使用。</span></span><br><span class="line">cat &gt;/etc/kubernetes/config&lt;&lt;EOF</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes system config</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following values are used to configure various aspects of all</span></span><br><span class="line"><span class="comment"># kubernetes services, including</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   kube-apiserver.service</span></span><br><span class="line"><span class="comment">#   kube-controller-manager.service</span></span><br><span class="line"><span class="comment">#   kube-scheduler.service</span></span><br><span class="line"><span class="comment">#   kubelet.service</span></span><br><span class="line"><span class="comment">#   kube-proxy.service</span></span><br><span class="line"><span class="comment"># logging to stderr means we get it in the systemd journal</span></span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">"--logtostderr=true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># journal message level, 0 is debug</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">"--v=0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Should this cluster be allowed to run privileged docker containers</span></span><br><span class="line">KUBE_ALLOW_PRIV=<span class="string">"--allow-privileged=true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># How the controller-manager, scheduler, and proxy find the apiserver</span></span><br><span class="line"><span class="comment">#KUBE_MASTER="--master=http://192.168.12.211:8080"</span></span><br><span class="line">KUBE_MASTER=<span class="string">"--master=http://192.168.12.211:8080"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/apiserver&lt;&lt;EOF</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">## kubernetes system config</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## The following values are used to configure the kube-apiserver</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## The address on the local server to listen to.</span></span><br><span class="line"><span class="comment">#KUBE_API_ADDRESS="--insecure-bind-address=192.168.12.211"</span></span><br><span class="line">KUBE_API_ADDRESS=<span class="string">"--advertise-address=192.168.12.211 --bind-address=192.168.12.211 --insecure-bind-address=192.168.12.211"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## The port on the local server to listen on.</span></span><br><span class="line"><span class="comment">#KUBE_API_PORT="--port=8080"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## Port minions listen on</span></span><br><span class="line"><span class="comment">#KUBELET_PORT="--kubelet-port=10250"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## Comma separated list of nodes in the etcd cluster</span></span><br><span class="line">KUBE_ETCD_SERVERS=<span class="string">"--etcd-servers=https://192.168.12.211:2379,192.168.12.212:2379,192.168.12.213:2379"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## Address range to use for services</span></span><br><span class="line">KUBE_SERVICE_ADDRESSES=<span class="string">"--service-cluster-ip-range=10.254.0.0/16"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## default admission control policies</span></span><br><span class="line">KUBE_ADMISSION_CONTROL=<span class="string">"--admission-control=ServiceAccount,NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## Add your own!</span></span><br><span class="line">KUBE_API_ARGS=<span class="string">"--authorization-mode=RBAC --runtime-config=rbac.authorization.k8s.io/v1beta1 --kubelet-https=true --experimental-bootstrap-token-auth --token-auth-file=/etc/kubernetes/token.csv --service-node-port-range=30000-32767 --tls-cert-file=/etc/kubernetes/ssl/kubernetes.pem --tls-private-key-file=/etc/kubernetes/ssl/kubernetes-key.pem --client-ca-file=/etc/kubernetes/ssl/ca.pem --service-account-key-file=/etc/kubernetes/ssl/ca-key.pem --etcd-cafile=/etc/kubernetes/ssl/ca.pem --etcd-certfile=/etc/kubernetes/ssl/kubernetes.pem --etcd-keyfile=/etc/kubernetes/ssl/kubernetes-key.pem --enable-swagger-ui=true --apiserver-count=3 --audit-log-maxage=30 --audit-log-maxbackup=3 --audit-log-maxsize=100 --audit-log-path=/var/lib/audit.log --event-ttl=1h"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-apiserver</span><br><span class="line">systemctl start kube-apiserver</span><br><span class="line">systemctl status kube-apiserver</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置和启动 kube-controller-manager</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/usr/lib/systemd/system/kube-controller-manager.service&lt;&lt;EOF</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/controller-manager</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kube-controller-manager \\</span><br><span class="line">    \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_MASTER</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_CONTROLLER_MANAGER_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/controller-manager&lt;&lt;EOF</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># The following values are used to configure the kubernetes controller-manager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># defaults from config and apiserver should be adequate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBE_CONTROLLER_MANAGER_ARGS=<span class="string">"--address=127.0.0.1 --service-cluster-ip-range=10.254.0.0/16 --cluster-name=kubernetes --cluster-signing-cert-file=/etc/kubernetes/ssl/ca.pem --cluster-signing-key-file=/etc/kubernetes/ssl/ca-key.pem  --service-account-private-key-file=/etc/kubernetes/ssl/ca-key.pem --root-ca-file=/etc/kubernetes/ssl/ca.pem --leader-elect=true"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-controller-manager</span><br><span class="line">systemctl start kube-controller-manager</span><br><span class="line">systemctl status kube-controller-manager</span><br></pre></td></tr></table></figure></p><p><strong>3. 配置和启动 kube-scheduler</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/usr/lib/systemd/system/kube-scheduler.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler Plugin</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/scheduler</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kube-scheduler \\</span><br><span class="line">            \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_MASTER</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_SCHEDULER_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/scheduler&lt;&lt;EOF</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes scheduler config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># default config should be adequate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBE_SCHEDULER_ARGS=<span class="string">"--leader-elect=true --address=127.0.0.1"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-scheduler</span><br><span class="line">systemctl start kube-scheduler</span><br><span class="line">systemctl status kube-scheduler</span><br></pre></td></tr></table></figure></p><p><strong>4. 验证节点</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get componentstatuses</span><br></pre></td></tr></table></figure></p><blockquote><p>以上3个组件在3个master节点安装运行就可以组成高可用。</p></blockquote><h4 id="部署kubernetes-node节点"><a href="#部署kubernetes-node节点" class="headerlink" title="部署kubernetes node节点"></a>部署kubernetes node节点</h4><p><strong>1. 安装配置Flanneld</strong></p><blockquote><p>本教程使用手动配置的方法，也可以使用官方的yml文件直接使用k8s部署。<br><a href="https://github.com/coreos/flannel/blob/master/Documentation/kube-flannel.yml" target="_blank" rel="noopener">https://github.com/coreos/flannel/blob/master/Documentation/kube-flannel.yml</a></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /server/software/k8s</span><br><span class="line">wget https://github.com/coreos/flannel/releases/download/v0.8.0/flannel-v0.8.0-linux-amd64.tar.gz</span><br><span class="line">tar xf flannel-v0.8.0-linux-amd64.tar.gz</span><br><span class="line">cp flanneld mk-docker-opts.sh /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">scp flanneld mk-docker-opts.sh lab2:/usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cat &gt;/usr/lib/systemd/system/flanneld.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Flanneld overlay address etcd agent</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=etcd.service</span><br><span class="line">Before=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/etc/sysconfig/flanneld</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/docker-network</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/flanneld \<span class="variable">$FLANNELD_ARGS</span></span><br><span class="line">ExecStartPost=/usr/<span class="built_in">local</span>/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/docker</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">RequiredBy=docker.service</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/sysconfig/flanneld&lt;&lt;EOF</span><br><span class="line">FLANNELD_ARGS=<span class="string">'--etcd-endpoints=https://192.168.12.211:2379,https://192.168.12.212:2379,https://192.168.12.213:2379 --etcd-cafile=/etc/kubernetes/ssl/ca.pem --etcd-certfile=/etc/kubernetes/ssl/kubernetes.pem   --etcd-keyfile=/etc/kubernetes/ssl/kubernetes-key.pem --etcd-prefix=/k8s/network --iface=eth1'</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="comment"># 如果你要使用 host-gw 模式，可以直接将vxlan改成 host-gw 即可。</span></span><br><span class="line">etcdctl --endpoints <span class="string">"https://127.0.0.1:2379"</span>   \</span><br><span class="line">--ca-file=/etc/kubernetes/ssl/ca.pem   \</span><br><span class="line">--cert-file=/etc/kubernetes/ssl/kubernetes.pem   \</span><br><span class="line">--key-file=/etc/kubernetes/ssl/kubernetes-key.pem \</span><br><span class="line"><span class="built_in">set</span> /k8s/network/config <span class="string">'&#123;"Network":"10.1.0.0/16", "Backend": &#123;"Type": "vxlan"&#125;&#125;'</span></span><br><span class="line"><span class="comment">#set /k8s/network/config '&#123;"Network":"10.1.0.0/16", "Backend": &#123;"Type": "host-gw"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> flanneld</span><br><span class="line">systemctl start flanneld</span><br><span class="line">systemctl status flanneld</span><br></pre></td></tr></table></figure><p><strong>3. 重启docker</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改docker配置</span></span><br><span class="line">mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改docker启动文件</span></span><br><span class="line">cat &gt;/usr/lib/systemd/system/docker.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line"><span class="comment"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class="line"><span class="comment"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class="line"><span class="comment"># for containers run by docker</span></span><br><span class="line">EnvironmentFile=-/run/flannel/docker</span><br><span class="line">ExecStart=/usr/bin/dockerd \<span class="variable">$DOCKER_NETWORK_OPTIONS</span> --registry-mirror=https://tfhzn46h.mirror.aliyuncs.com</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line"><span class="comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"><span class="comment"># Uncomment TasksMax if your systemd version supports it.</span></span><br><span class="line"><span class="comment"># Only systemd 226 and above support this version.</span></span><br><span class="line"><span class="comment">#TasksMax=infinity</span></span><br><span class="line">TimeoutStartSec=0</span><br><span class="line"><span class="comment"># set delegate yes so that systemd does not reset the cgroups of docker containers</span></span><br><span class="line">Delegate=yes</span><br><span class="line"><span class="comment"># kill only the docker process, not all processes in the cgroup</span></span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl status docker</span><br><span class="line">ps -ef | grep docker</span><br></pre></td></tr></table></figure></p><p><strong>4. 安装配置kubelet</strong></p><p>kubelet 启动时向 kube-apiserver 发送 TLS bootstrapping 请求，需要先将 bootstrap token 文件中的 kubelet-bootstrap 用户赋予 system:node-bootstrapper cluster 角色(role)， 然后 kubelet 才能有权限创建认证请求(certificate signing requests)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --user=kubelet-bootstrap 是在 /etc/kubernetes/token.csv 文件中指定的用户名，同时也写入了/etc/kubernetes/bootstrap.kubeconfig 文件</span></span><br><span class="line"><span class="comment"># 此步骤在master上操作</span></span><br><span class="line"><span class="built_in">cd</span> /etc/kubernetes</span><br><span class="line">kubectl create clusterrolebinding kubelet-bootstrap \</span><br><span class="line">  --clusterrole=system:node-bootstrapper \</span><br><span class="line">  --user=kubelet-bootstrap</span><br><span class="line"></span><br><span class="line">cat &gt;/usr/lib/systemd/system/kubelet.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet Server</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/data/kubelet</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/kubelet</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kubelet \\</span><br><span class="line">            \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_API_SERVER</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_ADDRESS</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_PORT</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_HOSTNAME</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_ALLOW_PRIV</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_POD_INFRA_CONTAINER</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/config&lt;&lt;EOF</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes system config</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following values are used to configure various aspects of all</span></span><br><span class="line"><span class="comment"># kubernetes services, including</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   kube-apiserver.service</span></span><br><span class="line"><span class="comment">#   kube-controller-manager.service</span></span><br><span class="line"><span class="comment">#   kube-scheduler.service</span></span><br><span class="line"><span class="comment">#   kubelet.service</span></span><br><span class="line"><span class="comment">#   kube-proxy.service</span></span><br><span class="line"><span class="comment"># logging to stderr means we get it in the systemd journal</span></span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">"--logtostderr=true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># journal message level, 0 is debug</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">"--v=0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Should this cluster be allowed to run privileged docker containers</span></span><br><span class="line">KUBE_ALLOW_PRIV=<span class="string">"--allow-privileged=true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># How the controller-manager, scheduler, and proxy find the apiserver</span></span><br><span class="line"><span class="comment">#KUBE_MASTER="--master=http://192.168.12.211:8080"</span></span><br><span class="line">KUBE_MASTER=<span class="string">"--master=http://192.168.12.211:8080"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意修改相关ip</span></span><br><span class="line">cat &gt;/etc/kubernetes/kubelet&lt;&lt;EOF</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">## kubernetes kubelet (minion) config</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## The address for the info server to serve on (set to 0.0.0.0 or "" for all interfaces)</span></span><br><span class="line">KUBELET_ADDRESS=<span class="string">"--address=192.168.12.212"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## The port for the info server to serve on</span></span><br><span class="line"><span class="comment">#KUBELET_PORT="--port=10250"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## You may leave this blank to use the actual hostname</span></span><br><span class="line">KUBELET_HOSTNAME=<span class="string">"--hostname-override=192.168.12.212"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## location of the api-server</span></span><br><span class="line">KUBELET_API_SERVER=<span class="string">"--api-servers=http://192.168.12.211:8080"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## pod infrastructure container</span></span><br><span class="line"><span class="comment">#KUBELET_POD_INFRA_CONTAINER="--pod-infra-container-image=sz-pg-oam-docker-hub-001.tendcloud.com/library/pod-infrastructure:rhel7"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## Add your own!</span></span><br><span class="line">KUBELET_ARGS=<span class="string">"--cgroup-driver=cgroupfs --cluster-dns=10.254.0.2 --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig --kubeconfig=/etc/kubernetes/kubelet.kubeconfig --require-kubeconfig --cert-dir=/etc/kubernetes/ssl --cluster-domain=cluster.local. --hairpin-mode promiscuous-bridge --serialize-image-pulls=false"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">mkdir -pv /data/kubelet</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line">systemctl start kubelet</span><br><span class="line">systemctl status kubelet</span><br></pre></td></tr></table></figure><p><strong>5. 通过 kublet 的 TLS 证书请求</strong><br>kubelet 首次启动时向 kube-apiserver 发送证书签名请求，必须通过后 kubernetes 系统才会<br>将该 Node 加入到集群。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过</span></span><br><span class="line">kubectl certificate approve csr-2b308</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在node节点查看生成的文件</span></span><br><span class="line">ls -l /etc/kubernetes/kubelet.kubeconfig</span><br><span class="line">ls -l /etc/kubernetes/ssl/kubelet*</span><br></pre></td></tr></table></figure></p><p><strong>6. 配置 kube-proxy</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/usr/lib/systemd/system/kube-proxy.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kube-Proxy Server</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/proxy</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kube-proxy \\</span><br><span class="line">    \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_MASTER</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_PROXY_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/proxy&lt;&lt;EOF</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes proxy config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># default config should be adequate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBE_PROXY_ARGS=<span class="string">"--bind-address=192.168.12.212 --hostname-override=192.168.12.212 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig --cluster-cidr=10.254.0.0/16"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-proxy</span><br><span class="line">systemctl start kube-proxy</span><br><span class="line">systemctl status kube-proxy</span><br></pre></td></tr></table></figure></p><p><strong>7. 验证测试</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取node</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动deployment</span></span><br><span class="line">kubectl run nginx --replicas=2 --labels=<span class="string">"run=load-balancer-example"</span> --image=nginx:1.9  --port=80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露服务</span></span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl describe svc example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">curl <span class="string">"10.254.142.220:80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问NodePort</span></span><br><span class="line">http://192.168.12.212:31075/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">kubectl delete svc example-service</span><br><span class="line">kubectl delete deploy nginx</span><br></pre></td></tr></table></figure></p><blockquote><p>如果无法拉取镜像手动拉取<br>docker pull pigletfly/pause-amd64:3.0<br>docker tag pigletfly/pause-amd64:3.0 gcr.io/google_containers/pause-amd64:3.0</p></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.kubernetes.org.cn/1870.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/1870.html</a></li><li><a href="https://github.com/rootsongjc/kubernetes-handbook" target="_blank" rel="noopener">https://github.com/rootsongjc/kubernetes-handbook</a></li><li><a href="https://github.com/opsnull/follow-me-install-kubernetes-cluster" target="_blank" rel="noopener">https://github.com/opsnull/follow-me-install-kubernetes-cluster</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang Web 框架 Echo 简单使用教程</title>
      <link href="/posts/6/"/>
      <url>/posts/6/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Echo是一个高性能，灵活可扩展，极简的 go web 框架。支持多种格式的响应如：json、xml、html等。<br>中间件众多，常用组件都能找到如：HTTPS、HTTP/2、WebSocket、JWT、Gzip、CORS、CSRF。天然支持<br>RESTful API 开发，使用其做API开发异常的方便，同时支持使用模板，方便MVC模式的开发。</p><h3 id="安装-Echo"><a href="#安装-Echo" class="headerlink" title="安装 Echo"></a>安装 Echo</h3><blockquote><p>如果没有翻墙，先配置如下的hosts<br>    <code>216.58.200.33 go.googlesource.com golang.org www.golang.org</code></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/labstack/<span class="built_in">echo</span></span><br><span class="line">go get github.com/labstack/<span class="built_in">echo</span>/middleware</span><br></pre></td></tr></table></figure><h3 id="Hello-World-测试"><a href="#Hello-World-测试" class="headerlink" title="Hello World 测试"></a>Hello World 测试</h3><p>写入如下内容到<code>hello.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line">e.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run hello.go</span><br></pre></td></tr></table></figure></p><p>访问<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s http://127.0.0.1:1323/</span><br></pre></td></tr></table></figure></p><h3 id="JSON-格式输出响应内容"><a href="#JSON-格式输出响应内容" class="headerlink" title="JSON 格式输出响应内容"></a>JSON 格式输出响应内容</h3><p>写入如下内容到<code>json.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span> <span class="string">`json:"name" xml:"name" form:"name" query:"name"`</span></span><br><span class="line">Email <span class="keyword">string</span> <span class="string">`json:"email" xml:"email" form:"email" query:"email"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line">e.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">u := <span class="built_in">new</span>(User)</span><br><span class="line">u.Name = <span class="string">"will"</span></span><br><span class="line">u.Email = <span class="string">"will@will.com"</span></span><br><span class="line"><span class="keyword">return</span> c.JSON(http.StatusOK, u)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run json.go</span><br></pre></td></tr></table></figure></p><p>访问<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s http://127.0.0.1:1323/</span><br></pre></td></tr></table></figure></p><p>更多输出内容格式（xml、json、file、html、string、attachment、redirect等）参考如下官方文档<br><a href="https://echo.labstack.com/guide/response" target="_blank" rel="noopener">https://echo.labstack.com/guide/response</a></p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由</span></span><br><span class="line">e.POST(<span class="string">"/users"</span>, saveUser)</span><br><span class="line">e.GET(<span class="string">"/users/:id"</span>, getUser)</span><br><span class="line">e.PUT(<span class="string">"/users/:id"</span>, updateUser)</span><br><span class="line">e.DELETE(<span class="string">"/users/:id"</span>, deleteUser)</span><br><span class="line"></span><br><span class="line"><span class="comment">// URI参数</span></span><br><span class="line"><span class="comment">// e.GET("/users/:id", getUser)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">// User ID from path `users/:id`</span></span><br><span class="line">  id := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URI查询参数"><a href="#URI查询参数" class="headerlink" title="URI查询参数"></a>URI查询参数</h3><p><code>/show?team=x-men&amp;member=wolverine</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//e.GET("/show", show)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// Get team and member from the query string</span></span><br><span class="line">team := c.QueryParam(<span class="string">"team"</span>)</span><br><span class="line">member := c.QueryParam(<span class="string">"member"</span>)</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"team:"</span> + team + <span class="string">", member:"</span> + member)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="从FORM接受参数"><a href="#从FORM接受参数" class="headerlink" title="从FORM接受参数"></a>从FORM接受参数</h3><p><code>POST /save</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// e.POST("/save", save)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// Get name and email</span></span><br><span class="line">name := c.FormValue(<span class="string">"name"</span>)</span><br><span class="line">email := c.FormValue(<span class="string">"email"</span>)</span><br><span class="line">avatar, err := c.FormFile(<span class="string">"avatar"</span>)</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"name:"</span> + name + <span class="string">", email:"</span> + email)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="REST-API-示例"><a href="#REST-API-示例" class="headerlink" title="REST API 示例"></a>REST API 示例</h3><p>写入如下内容到<code>rest.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Id    <span class="keyword">string</span> <span class="string">`json:"id" form:"id"`</span></span><br><span class="line">Name  <span class="keyword">string</span> <span class="string">`json:"name" form:"name"`</span></span><br><span class="line">Email <span class="keyword">string</span> <span class="string">`json:"email" form:"email"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">u := <span class="built_in">new</span>(User)</span><br><span class="line">u.Name = c.FormValue(<span class="string">"name"</span>)</span><br><span class="line">u.Email = c.FormValue(<span class="string">"email"</span>)</span><br><span class="line">u.Id = <span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c.JSON(http.StatusCreated, u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">u := <span class="built_in">new</span>(User)</span><br><span class="line">id := c.Param(<span class="string">"id"</span>)</span><br><span class="line">u.Name = <span class="string">"will"</span></span><br><span class="line">u.Email = <span class="string">"will@will.com"</span></span><br><span class="line">u.Id = id</span><br><span class="line"><span class="keyword">return</span> c.JSON(http.StatusOK, u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">u := <span class="built_in">new</span>(User)</span><br><span class="line">id := c.Param(<span class="string">"id"</span>)</span><br><span class="line">u.Name = <span class="string">"will"</span></span><br><span class="line">u.Email = <span class="string">"will@will.com"</span></span><br><span class="line">u.Id = id</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c.JSON(http.StatusOK, u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">u := <span class="built_in">new</span>(User)</span><br><span class="line">id := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="built_in">println</span>(u)</span><br><span class="line"><span class="built_in">println</span>(id)</span><br><span class="line"><span class="keyword">return</span> c.NoContent(http.StatusNoContent)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line">e.POST(<span class="string">"/users"</span>, saveUser)</span><br><span class="line">e.GET(<span class="string">"/users/:id"</span>, getUser)</span><br><span class="line">e.PUT(<span class="string">"/users/:id"</span>, updateUser)</span><br><span class="line">e.DELETE(<span class="string">"/users/:id"</span>, deleteUser)</span><br><span class="line">e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run rest.go</span><br></pre></td></tr></table></figure></p><p>测试访问<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET</span></span><br><span class="line">curl -s -i http://127.0.0.1:1323/users/1</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST</span></span><br><span class="line">curl -s -i -F <span class="string">"name=Joe"</span> -F <span class="string">"email=joe@labstack.com"</span> http://127.0.0.1:1323/users</span><br><span class="line"></span><br><span class="line"><span class="comment"># PUT</span></span><br><span class="line"> curl -s -i -X PUT -F <span class="string">"name=Joe"</span> -F <span class="string">"email=joe@labstack.com"</span> http://127.0.0.1:1323/users/1</span><br><span class="line"></span><br><span class="line"><span class="comment"># DELETE</span></span><br><span class="line"> curl -s -i -X DELETE  http://127.0.0.1:1323/users/1</span><br></pre></td></tr></table></figure></p><p>官方参考文档<br><a href="https://echo.labstack.com/cookbook/crud" target="_blank" rel="noopener">https://echo.labstack.com/cookbook/crud</a></p><h3 id="使用中间件"><a href="#使用中间件" class="headerlink" title="使用中间件"></a>使用中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入中间件模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/labstack/echo/middleware"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局中间件</span></span><br><span class="line">e.Use(middleware.Logger())</span><br><span class="line">e.Use(middleware.Recover())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组级中间件（只对以/admin开头的URI使用设置的中间件）</span></span><br><span class="line">g := e.Group(<span class="string">"/admin"</span>)</span><br><span class="line">g.Use(middleware.BasicAuth(<span class="function"><span class="keyword">func</span><span class="params">(username, password <span class="keyword">string</span>, c echo.Context)</span> <span class="params">(error, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> username == <span class="string">"joe"</span> &amp;&amp; password == <span class="string">"secret"</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由级中间件（只对单个URI使用设置的中间件）</span></span><br><span class="line">track := <span class="function"><span class="keyword">func</span><span class="params">(next echo.HandlerFunc)</span> <span class="title">echo</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"request to /users"</span>)</span><br><span class="line"><span class="keyword">return</span> next(c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">e.GET(<span class="string">"/users"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"/users"</span>)</span><br><span class="line">&#125;, track)</span><br></pre></td></tr></table></figure><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问URI：/static/js/main.js 会寻找文件 assets/js/main.js</span></span><br><span class="line">e := echo.New()</span><br><span class="line">e.Static(<span class="string">"/static"</span>, <span class="string">"assets"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问URI：/js/main.js 会寻找文件 assets/js/main.js</span></span><br><span class="line">e := echo.New()</span><br><span class="line">e.Static(<span class="string">"/"</span>, <span class="string">"assets"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// / ---&gt; public/index.html</span></span><br><span class="line">e.File(<span class="string">"/"</span>, <span class="string">"public/index.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// /favicon.ico ---&gt; images/favicon.ico</span></span><br><span class="line">e.File(<span class="string">"/favicon.ico"</span>, <span class="string">"images/favicon.ico"</span>)</span><br></pre></td></tr></table></figure><h3 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h3><p>创建模板文件夹<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv public/views</span><br></pre></td></tr></table></figure></p><p>添加模板文件<code>public/views/hello.html</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;define &quot;hello&quot;&#125;&#125;Hello, &#123;&#123;.&#125;&#125;!&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>写入如下内容到<code>template.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"html/template"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Template <span class="keyword">struct</span> &#123;</span><br><span class="line">templates *template.Template</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 echo.Renderer 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Template)</span> <span class="title">Render</span><span class="params">(w io.Writer, name <span class="keyword">string</span>, data <span class="keyword">interface</span>&#123;&#125;, c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> t.templates.ExecuteTemplate(w, name, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Render(http.StatusOK, <span class="string">"hello"</span>, <span class="string">"Will"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := &amp;Template&#123;</span><br><span class="line">templates: template.Must(template.ParseGlob(<span class="string">"public/views/*.html"</span>)),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e := echo.New()</span><br><span class="line">e.Renderer = t</span><br><span class="line">e.GET(<span class="string">"/hello"</span>, Hello)</span><br><span class="line">e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用测试组件"><a href="#使用测试组件" class="headerlink" title="使用测试组件"></a>使用测试组件</h3><p>写入如下内容到<code>handler.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (</span><br><span class="line">User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span> <span class="string">`json:"name" form:"name"`</span></span><br><span class="line">Email <span class="keyword">string</span> <span class="string">`json:"email" form:"email"`</span></span><br><span class="line">&#125;</span><br><span class="line">handler <span class="keyword">struct</span> &#123;</span><br><span class="line">db <span class="keyword">map</span>[<span class="keyword">string</span>]*User</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *handler)</span> <span class="title">createUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">u := <span class="built_in">new</span>(User)</span><br><span class="line"><span class="keyword">if</span> err := c.Bind(u); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.JSON(http.StatusCreated, u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *handler)</span> <span class="title">getUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">email := c.Param(<span class="string">"email"</span>)</span><br><span class="line">user := h.db[email]</span><br><span class="line"><span class="keyword">if</span> user == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> echo.NewHTTPError(http.StatusNotFound, <span class="string">"user not found"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.JSON(http.StatusOK, user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>写入如下内容到<code>handler_test.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line"><span class="string">"github.com/stretchr/testify/assert"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">mockDB = <span class="keyword">map</span>[<span class="keyword">string</span>]*User&#123;</span><br><span class="line"><span class="string">"jon@labstack.com"</span>: &amp;User&#123;<span class="string">"Jon Snow"</span>, <span class="string">"jon@labstack.com"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">userJSON = <span class="string">`&#123;"name":"Jon Snow","email":"jon@labstack.com"&#125;`</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateUser</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// Setup</span></span><br><span class="line">e := echo.New()</span><br><span class="line">req := httptest.NewRequest(echo.POST, <span class="string">"/"</span>, strings.NewReader(userJSON))</span><br><span class="line">req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)</span><br><span class="line">rec := httptest.NewRecorder()</span><br><span class="line">c := e.NewContext(req, rec)</span><br><span class="line">h := &amp;handler&#123;mockDB&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assertions</span></span><br><span class="line"><span class="keyword">if</span> assert.NoError(t, h.createUser(c)) &#123;</span><br><span class="line">assert.Equal(t, http.StatusCreated, rec.Code)</span><br><span class="line">assert.Equal(t, userJSON, rec.Body.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUser</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// Setup</span></span><br><span class="line">e := echo.New()</span><br><span class="line">req := httptest.NewRequest(echo.GET, <span class="string">"/"</span>, <span class="literal">nil</span>)</span><br><span class="line">rec := httptest.NewRecorder()</span><br><span class="line">c := e.NewContext(req, rec)</span><br><span class="line">c.SetPath(<span class="string">"/users/:email"</span>)</span><br><span class="line">c.SetParamNames(<span class="string">"email"</span>)</span><br><span class="line">c.SetParamValues(<span class="string">"jon@labstack.com"</span>)</span><br><span class="line">h := &amp;handler&#123;mockDB&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assertions</span></span><br><span class="line"><span class="keyword">if</span> assert.NoError(t, h.getUser(c)) &#123;</span><br><span class="line">assert.Equal(t, http.StatusOK, rec.Code)</span><br><span class="line">assert.Equal(t, userJSON, rec.Body.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行测试<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/stretchr/testify/assert</span><br><span class="line">go <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p>更多用法<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Form</span></span><br><span class="line">f := <span class="built_in">make</span>(url.Values)</span><br><span class="line">f.Set(<span class="string">"name"</span>, <span class="string">"Jon Snow"</span>)</span><br><span class="line">f.Set(<span class="string">"email"</span>, <span class="string">"jon@labstack.com"</span>)</span><br><span class="line">req := httptest.NewRequest(echo.POST, <span class="string">"/"</span>, strings.NewReader(f.Encode()))</span><br><span class="line">req.Header.Set(echo.HandlerContentType, echo.MIMEApplicationForm)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置URI参数</span></span><br><span class="line">c.SetParamNames(<span class="string">"id"</span>, <span class="string">"email"</span>)</span><br><span class="line">c.SetParamValues(<span class="string">"1"</span>, <span class="string">"jon@labstack.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置查询参数</span></span><br><span class="line">q := <span class="built_in">make</span>(url.Values)</span><br><span class="line">q.Set(<span class="string">"email"</span>, <span class="string">"jon@labstack.com"</span>)</span><br><span class="line">req := http.NewRequest(echo.POST, <span class="string">"/?"</span>+q.Encode(), <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure></p><h3 id="使用cookie"><a href="#使用cookie" class="headerlink" title="使用cookie"></a>使用cookie</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建cookie</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeCookie</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cookie := <span class="built_in">new</span>(http.Cookie)</span><br><span class="line">cookie.Name = <span class="string">"username"</span></span><br><span class="line">cookie.Value = <span class="string">"jon"</span></span><br><span class="line">cookie.Expires = time.Now().Add(<span class="number">24</span> * time.Hour)</span><br><span class="line">c.SetCookie(cookie)</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"write a cookie"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取单个cookie</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readCookie</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cookie, err := c.Cookie(<span class="string">"username"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(cookie.Name)</span><br><span class="line">fmt.Println(cookie.Value)</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"read a cookie"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取所有cookie</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readAllCookies</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, cookie := <span class="keyword">range</span> c.Cookies() &#123;</span><br><span class="line">fmt.Println(cookie.Name)</span><br><span class="line">fmt.Println(cookie.Value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"read all cookie"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://echo.labstack.com/guide" target="_blank" rel="noopener">https://echo.labstack.com/guide</a></li><li><a href="https://echo.labstack.com/cookbook" target="_blank" rel="noopener">https://echo.labstack.com/cookbook</a></li><li><a href="https://echo.labstack.com/middleware" target="_blank" rel="noopener">https://echo.labstack.com/middleware</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> Web开发 </tag>
            
            <tag> Echo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go常用Web框架简介</title>
      <link href="/posts/5/"/>
      <url>/posts/5/</url>
      
        <content type="html"><![CDATA[<h3 id="常用web框架"><a href="#常用web框架" class="headerlink" title="常用web框架"></a>常用web框架</h3><ul><li><p>echo<br>  高性能，可扩展，极简 go Web 框架。</p><p>  中间件多，性能高，REST支持，HTTPS支持，HTTP/2支持，WebSocket支持。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line">e.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>gin<br>  类martini，高性能 go Web 框架。</p><p>  性能高，REST支持，HTTPS支持。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"gopkg.in/gin-gonic/gin.v1"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">"/ping"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"message"</span>: <span class="string">"pong"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run() <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>iris<br>  最高性能 go Web 框架。</p><p>  中间件多，性能高，REST支持。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/kataras/iris"</span></span><br><span class="line"><span class="string">"github.com/kataras/iris/context"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">app := iris.New()</span><br><span class="line">app.Handle(<span class="string">"GET"</span>, <span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">ctx.HTML(<span class="string">"&lt;b&gt; Hello world! &lt;/b&gt;"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.Run(iris.Addr(<span class="string">":8080"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>revel<br>  高生产力，全功能 go Web 框架。</p><p>  功能完整，MVC构架。</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">revel new myapp</span><br><span class="line">revel run myapp</span><br></pre></td></tr></table></figure></li><li><p>martini<br>  Martini是一个强大为了编写模块化Web应用而生的GO语言框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/go-martini/martini"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  m := martini.Classic()</span><br><span class="line">  m.Get(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello world!"</span></span><br><span class="line">  &#125;)</span><br><span class="line">  m.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>go-json-rest<br>  易于构建RESTful JSON APIs的go Web框架。</p><p>  中间件多，REST支持，HTTPS支持，WebSocket支持。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/ant0ine/go-json-rest/rest"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    api := rest.NewApi()</span><br><span class="line">    api.Use(rest.DefaultDevStack...)</span><br><span class="line">    api.SetApp(rest.AppSimple(<span class="function"><span class="keyword">func</span><span class="params">(w rest.ResponseWriter, r *rest.Request)</span></span> &#123;</span><br><span class="line">        w.WriteJson(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"Body"</span>: <span class="string">"Hello World!"</span>&#125;)</span><br><span class="line">    &#125;))</span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, api.MakeHandler()))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>utron<br>  轻量级MVC的 go Web 框架。</p></li><li><p>macaron<br>  高生产力 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"gopkg.in/macaron.v1"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := macaron.Classic()</span><br><span class="line">m.Get(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello world!"</span></span><br><span class="line">&#125;)</span><br><span class="line">m.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>buffalo<br>  快速的 go Web 开发框架。</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buffalo new coke</span><br><span class="line">buffalo dev</span><br></pre></td></tr></table></figure></li><li><p>go-tigertonic<br>  json web 服务开发框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">ID     <span class="keyword">string</span>      <span class="string">`json:"id"`</span></span><br><span class="line">Stuff  <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:"stuff"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">ID     <span class="keyword">string</span>      <span class="string">`json:"id"`</span></span><br><span class="line">Stuff  <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:"stuff"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">(u *url.URL, h http.Header, *MyRequest)</span> <span class="params">(<span class="keyword">int</span>, http.Header, *MyResponse, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> http.StatusOK, <span class="literal">nil</span>, &amp;MyResponse&#123;<span class="string">"ID"</span>, <span class="string">"STUFF"</span>&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mux := tigertonic.NewTrieServeMux()</span><br><span class="line">mux.Handle(<span class="string">"POST"</span>, <span class="string">"/stuff"</span>, tigertonic.Timed(tigertonic.Marshaled(myHandler), <span class="string">"myHandler"</span>, <span class="literal">nil</span>))</span><br><span class="line">tigertonic.NewServer(<span class="string">":8000"</span>, tigertonic.Logged(mux, <span class="literal">nil</span>)).ListenAndServe()</span><br></pre></td></tr></table></figure></li><li><p>faygo<br>  快速方便的高性能 go Web 开发框架，特别是开发API。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="comment">// "mime/multipart"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">    <span class="string">"github.com/henrylee2cn/faygo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Index <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id        <span class="keyword">int</span>      <span class="string">`param:"&lt;in:path&gt; &lt;required&gt; &lt;desc:ID&gt; &lt;range: 0:10&gt;"`</span></span><br><span class="line">    Title     <span class="keyword">string</span>   <span class="string">`param:"&lt;in:query&gt; &lt;nonzero&gt;"`</span></span><br><span class="line">    Paragraph []<span class="keyword">string</span> <span class="string">`param:"&lt;in:query&gt; &lt;name:p&gt; &lt;len: 1:10&gt; &lt;regexp: ^[\\w]*$&gt;"`</span></span><br><span class="line">    Cookie    <span class="keyword">string</span>   <span class="string">`param:"&lt;in:cookie&gt; &lt;name:faygoID&gt;"`</span></span><br><span class="line">    <span class="comment">// Picture         *multipart.FileHeader `param:"&lt;in:formData&gt; &lt;name:pic&gt; &lt;maxmb:30&gt;"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *Index)</span> <span class="title">Serve</span><span class="params">(ctx *faygo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ctx.CookieParam(<span class="string">"faygoID"</span>) == <span class="string">""</span> &#123;</span><br><span class="line">        ctx.SetCookie(<span class="string">"faygoID"</span>, time.Now().String())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ctx.JSON(<span class="number">200</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app := faygo.New(<span class="string">"myapp"</span>, <span class="string">"0.1"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register the route in a chain style</span></span><br><span class="line">    app.GET(<span class="string">"/index/:id"</span>, <span class="built_in">new</span>(Index))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register the route in a tree style</span></span><br><span class="line">    <span class="comment">// app.Route(</span></span><br><span class="line">    <span class="comment">//     app.NewGET("/index/:id", new(Index)),</span></span><br><span class="line">    <span class="comment">// )</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the service</span></span><br><span class="line">    faygo.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>tango<br>  微内核，可插拔，高性能 go Web 开发框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"github.com/lunny/tango"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Action <span class="keyword">struct</span> &#123;</span><br><span class="line">    tango.JSON</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Action)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">            <span class="string">"say"</span>: <span class="string">"Hello tango!"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> errors.New(<span class="string">"something error"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := tango.Classic()</span><br><span class="line">    t.Get(<span class="string">"/"</span>, <span class="built_in">new</span>(Action))</span><br><span class="line">    t.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>traffic<br>  受 Sinatra 启发的多正则匹配的 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"net/http"</span></span><br><span class="line">  <span class="string">"github.com/pilu/traffic"</span></span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rootHandler</span><span class="params">(w traffic.ResponseWriter, r *traffic.Request)</span></span> &#123;</span><br><span class="line">  fmt.Fprint(w, <span class="string">"Hello World\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pageHandler</span><span class="params">(w traffic.ResponseWriter, r *traffic.Request)</span></span> &#123;</span><br><span class="line">  params := r.URL.Query()</span><br><span class="line">  fmt.Fprintf(w, <span class="string">"Category ID: %s\n"</span>, params.Get(<span class="string">"category_id"</span>))</span><br><span class="line">  fmt.Fprintf(w, <span class="string">"Page ID: %s\n"</span>, params.Get(<span class="string">"id"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  router := traffic.New()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Routes</span></span><br><span class="line">  router.Get(<span class="string">"/"</span>, rootHandler)</span><br><span class="line">  router.Get(<span class="string">"/categories/:category_id/pages/:id"</span>, pageHandler)</span><br><span class="line"></span><br><span class="line">  router.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>rest-layer<br>  让创建 REST API 更简单的 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/rs/rest-layer-mem"</span></span><br><span class="line"><span class="string">"github.com/rs/rest-layer/resource"</span></span><br><span class="line"><span class="string">"github.com/rs/rest-layer/rest"</span></span><br><span class="line"><span class="string">"github.com/rs/rest-layer/schema"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// Define a user resource schema</span></span><br><span class="line">user = schema.Schema&#123;</span><br><span class="line">Description: <span class="string">`The user object`</span>,</span><br><span class="line">Fields: schema.Fields&#123;</span><br><span class="line"><span class="string">"id"</span>: &#123;</span><br><span class="line">Required: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// When a field is read-only, on default values or hooks can</span></span><br><span class="line"><span class="comment">// set their value. The client can't change it.</span></span><br><span class="line">ReadOnly: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// This is a field hook called when a new user is created.</span></span><br><span class="line"><span class="comment">// The schema.NewID hook is a provided hook to generate a</span></span><br><span class="line"><span class="comment">// unique id when no value is provided.</span></span><br><span class="line">OnInit: schema.NewID,</span><br><span class="line"><span class="comment">// The Filterable and Sortable allows usage of filter and sort</span></span><br><span class="line"><span class="comment">// on this field in requests.</span></span><br><span class="line">Filterable: <span class="literal">true</span>,</span><br><span class="line">Sortable:   <span class="literal">true</span>,</span><br><span class="line">Validator: &amp;schema.String&#123;</span><br><span class="line">Regexp: <span class="string">"^[0-9a-v]&#123;20&#125;$"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"created"</span>: &#123;</span><br><span class="line">Required:   <span class="literal">true</span>,</span><br><span class="line">ReadOnly:   <span class="literal">true</span>,</span><br><span class="line">Filterable: <span class="literal">true</span>,</span><br><span class="line">Sortable:   <span class="literal">true</span>,</span><br><span class="line">OnInit:     schema.Now,</span><br><span class="line">Validator:  &amp;schema.Time&#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"updated"</span>: &#123;</span><br><span class="line">Required:   <span class="literal">true</span>,</span><br><span class="line">ReadOnly:   <span class="literal">true</span>,</span><br><span class="line">Filterable: <span class="literal">true</span>,</span><br><span class="line">Sortable:   <span class="literal">true</span>,</span><br><span class="line">OnInit:     schema.Now,</span><br><span class="line"><span class="comment">// The OnUpdate hook is called when the item is edited. Here we use</span></span><br><span class="line"><span class="comment">// provided Now hook which just return the current time.</span></span><br><span class="line">OnUpdate:  schema.Now,</span><br><span class="line">Validator: &amp;schema.Time&#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// Define a name field as required with a string validator</span></span><br><span class="line"><span class="string">"name"</span>: &#123;</span><br><span class="line">Required:   <span class="literal">true</span>,</span><br><span class="line">Filterable: <span class="literal">true</span>,</span><br><span class="line">Validator: &amp;schema.String&#123;</span><br><span class="line">MaxLen: <span class="number">150</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define a post resource schema</span></span><br><span class="line">post = schema.Schema&#123;</span><br><span class="line">Description: <span class="string">`Represents a blog post`</span>,</span><br><span class="line">Fields: schema.Fields&#123;</span><br><span class="line"><span class="comment">// schema.*Field are shortcuts for common fields</span></span><br><span class="line"><span class="comment">// (identical to users' same fields)</span></span><br><span class="line"><span class="string">"id"</span>:      schema.IDField,</span><br><span class="line"><span class="string">"created"</span>: schema.CreatedField,</span><br><span class="line"><span class="string">"updated"</span>: schema.UpdatedField,</span><br><span class="line"><span class="comment">// Define a user field which references the user owning the post.</span></span><br><span class="line"><span class="comment">// See bellow, the content of this field is enforced by the fact</span></span><br><span class="line"><span class="comment">// that posts is a sub-resource of users.</span></span><br><span class="line"><span class="string">"user"</span>: &#123;</span><br><span class="line">Required:   <span class="literal">true</span>,</span><br><span class="line">Filterable: <span class="literal">true</span>,</span><br><span class="line">Validator: &amp;schema.Reference&#123;</span><br><span class="line">Path: <span class="string">"users"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"published"</span>: &#123;</span><br><span class="line">Required: <span class="literal">true</span>,</span><br><span class="line">Filterable: <span class="literal">true</span>,</span><br><span class="line">Default: <span class="literal">false</span>,</span><br><span class="line">Validator: &amp;schema.Bool&#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"title"</span>: &#123;</span><br><span class="line">Required: <span class="literal">true</span>,</span><br><span class="line">Validator: &amp;schema.String&#123;</span><br><span class="line">MaxLen: <span class="number">150</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"body"</span>: &#123;</span><br><span class="line"><span class="comment">// Dependency defines that body field can't be changed if</span></span><br><span class="line"><span class="comment">// the published field is not "false".</span></span><br><span class="line">Dependency: schema.Q(<span class="string">`&#123;"published": false&#125;`</span>),</span><br><span class="line">Validator: &amp;schema.String&#123;</span><br><span class="line">MaxLen: <span class="number">100000</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Create a REST API resource index</span></span><br><span class="line">index := resource.NewIndex()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a resource on /users[/:user_id]</span></span><br><span class="line">users := index.Bind(<span class="string">"users"</span>, user, mem.NewHandler(), resource.Conf&#123;</span><br><span class="line"><span class="comment">// We allow all REST methods</span></span><br><span class="line"><span class="comment">// (rest.ReadWrite is a shortcut for []resource.Mode&#123;resource.Create,</span></span><br><span class="line">    <span class="comment">//  resource.Read, resource.Update, resource.Delete, resource,List&#125;)</span></span><br><span class="line">AllowedModes: resource.ReadWrite,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind a sub resource on /users/:user_id/posts[/:post_id]</span></span><br><span class="line"><span class="comment">// and reference the user on each post using the "user" field of the posts resource.</span></span><br><span class="line">users.Bind(<span class="string">"posts"</span>, <span class="string">"user"</span>, post, mem.NewHandler(), resource.Conf&#123;</span><br><span class="line"><span class="comment">// Posts can only be read, created and deleted, not updated</span></span><br><span class="line">AllowedModes: []resource.Mode&#123;resource.Read, resource.List,</span><br><span class="line"> resource.Create, resource.Delete&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create API HTTP handler for the resource graph</span></span><br><span class="line">api, err := rest.NewHandler(index)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"Invalid API configuration: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind the API under /api/ path</span></span><br><span class="line">http.Handle(<span class="string">"/api/"</span>, http.StripPrefix(<span class="string">"/api/"</span>, api))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Serve it</span></span><br><span class="line">log.Print(<span class="string">"Serving API on http://localhost:8080"</span>)</span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>gongular<br>  让开发 API 简单的 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> WelcomeMessage <span class="keyword">struct</span> &#123;</span><br><span class="line">  Message <span class="keyword">string</span></span><br><span class="line">  Date    time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g := gongular.NewRouter()</span><br><span class="line">g.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gongular.Context)</span> <span class="title">WelcomeMessage</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> WelcomeMessage&#123;</span><br><span class="line">    Message: <span class="string">"Hello, you are coming from: "</span> + c.Request().RemoteAddr,</span><br><span class="line">    Date:    time.Now(),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>lessgo<br>  简单、稳定、高效、灵活的 go Web 开发框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/henrylee2cn/lessgo"</span></span><br><span class="line">    <span class="string">"github.com/henrylee2cn/lessgoext/swagger"</span></span><br><span class="line"></span><br><span class="line">    _ <span class="string">"github.com/henrylee2cn/lessgoext/dbservice/xorm"</span></span><br><span class="line">    <span class="comment">// _ "github.com/henrylee2cn/lessgoext/dbservice/gorm"</span></span><br><span class="line"></span><br><span class="line">    _ <span class="string">"github.com/henrylee2cn/lessgo_demo/middleware"</span></span><br><span class="line">    _ <span class="string">"github.com/henrylee2cn/lessgo_demo/router"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 开启自动api文档，通过config/apidoc_allow.myconfig进行配置</span></span><br><span class="line">    swagger.Reg()</span><br><span class="line">    <span class="comment">// 指定根目录URL</span></span><br><span class="line">    lessgo.SetHome(<span class="string">"/home"</span>)</span><br><span class="line">    <span class="comment">// 开启网络服务</span></span><br><span class="line">    lessgo.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>neo<br>  极其简单，快速，微内核的 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/ivpusic/neo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app := neo.App()</span><br><span class="line"></span><br><span class="line">    app.Get(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *neo.Ctx)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>, ctx.Res.Text(<span class="string">"I am Neo Programmer"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    app.Start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>gondola<br>  快速开发 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">"gnd.la/app"</span></span><br><span class="line">        <span class="string">"gnd.la/config"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">        App *app.App</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">        config.MustParse()</span><br><span class="line">        App = app.New()</span><br><span class="line">        App.HandleNamed(<span class="string">"^/$"</span>, MainHandler, <span class="string">"main"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>golf<br>  快速简单高性能轻量的 go Web 开发框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/dinever/golf"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mainHandler</span><span class="params">(ctx *golf.Context)</span></span> &#123;</span><br><span class="line">  ctx.Send(<span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pageHandler</span><span class="params">(ctx *golf.Context)</span></span> &#123;</span><br><span class="line">  ctx.Send(<span class="string">"Page: "</span> + ctx.Param(<span class="string">"page"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  app := golf.New()</span><br><span class="line">  app.Get(<span class="string">"/"</span>, mainHandler)</span><br><span class="line">  app.Get(<span class="string">"/p/:page/"</span>, pageHandler)</span><br><span class="line">  app.Run(<span class="string">":9000"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>go-relax<br>  专为 RESTful API 开发的 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"github.com/codehack/go-relax"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Hello <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Hello)</span> <span class="title">Index</span><span class="params">(ctx *relax.Context)</span></span> &#123;</span><br><span class="line">   ctx.Respond(h)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   h := Hello(<span class="string">"hello world!"</span>)</span><br><span class="line">   svc := relax.NewService(<span class="string">"http://api.company.com/"</span>)</span><br><span class="line">   svc.Resource(&amp;h)</span><br><span class="line">   svc.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>gem<br>  高性能，易用，REST支持，HTTP/2支持的 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/go-gem/gem"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(ctx *gem.Context)</span></span> &#123;</span><br><span class="line">    ctx.HTML(<span class="number">200</span>, <span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Create server.</span></span><br><span class="line">    srv := gem.New(<span class="string">":8080"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create router.</span></span><br><span class="line">    router := gem.NewRouter()</span><br><span class="line">    <span class="comment">// Register handler</span></span><br><span class="line">    router.GET(<span class="string">"/"</span>, index)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start server.</span></span><br><span class="line">    log.Println(srv.ListenAndServe(router.Handler()))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>goat<br>  极简JSON API go Web 框架，REST支持。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/bahlo/goat"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloHandler</span><span class="params">(w http.ResponseWriter, r *http.Request, p goat.Params)</span></span> &#123;</span><br><span class="line">    goat.WriteJSON(w, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">        <span class="string">"hello"</span>: p[<span class="string">"name"</span>],</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := goat.New()</span><br><span class="line"></span><br><span class="line">    r.Get(<span class="string">"/hello/:name"</span>, <span class="string">"hello_url"</span>, helloHandler)</span><br><span class="line"></span><br><span class="line">    r.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>rex<br>  现在化 go Web 开发框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/goanywhere/rex"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app := rex.New()</span><br><span class="line">    app.Get(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        io.WriteString(w, <span class="string">"Hello World"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    app.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>air<br>  一个理想的 RESTful API go Web 开发框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/sheng/air"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := air.New()</span><br><span class="line">a.GET(<span class="string">"/"</span>, homeHandler)</span><br><span class="line">a.Serve()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">homeHandler</span><span class="params">(c *air.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.String(<span class="string">"Hello, 世界"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>yarf<br>  又一个 高性能 REST 开发框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/yarf-framework/yarf"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define a simple resource</span></span><br><span class="line"><span class="keyword">type</span> Hello <span class="keyword">struct</span> &#123;</span><br><span class="line">    yarf.Resource</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implement the GET method</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Hello)</span> <span class="title">Get</span><span class="params">(c *yarf.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    c.Render(<span class="string">"Hello world!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run app server on http://localhost:8080</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    y := yarf.New()</span><br><span class="line"></span><br><span class="line">    y.Add(<span class="string">"/"</span>, <span class="built_in">new</span>(Hello))</span><br><span class="line"></span><br><span class="line">    y.Start(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="适合开发-REST-API-的框架"><a href="#适合开发-REST-API-的框架" class="headerlink" title="适合开发 REST API 的框架"></a>适合开发 REST API 的框架</h3><ul><li>github收藏较多的框架<ul><li>echo</li><li>gin</li><li>iris</li><li>go-json-rest</li><li>martini</li><li>macaron</li></ul></li><li>小众但可能好用的框架<ul><li>tango</li><li>neo</li><li>go-relax</li><li>gem</li><li>goat</li><li>air</li><li>yarf</li><li>faygo</li><li>traffic</li><li>rest-layer</li><li>gongular</li><li>lessgo</li><li>go-tigertonic</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> Web开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法总结</title>
      <link href="/posts/4/"/>
      <url>/posts/4/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Markdown 的目标是实现「易读易写」。Markdown 的语法全由一些符号所组成，这些符号经过精挑<br>细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown的列表看起来，<br>就是列表。Markdown 的区块引用看起来就真的像是引用一段文字。并且兼容 HTML 语法标签，可以<br>在markdown文件里直接使用HTML标签如: <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<br><code>&lt;del&gt;</code>。并且现在有很多工具可以把markdown文件转换为pdf、html等格式，非常便于阅读，<br>分享。</p><a id="more"></a><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h4><h5 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a><strong>段落和换行</strong></h5><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定<br>义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会<br>被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>如果你确实想要依赖 Markdown 来插入 <code>&lt;br/&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p><h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h5><p>在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1 #</span><br><span class="line"></span><br><span class="line">## 这是 H2 ##</span><br><span class="line"></span><br><span class="line">### 这是 H3 ######</span><br></pre></td></tr></table></figure></p><h5 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a><strong>区块引用</strong></h5><p>Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一个引用</span><br><span class="line">&gt; 这是上一个引用的接着部分</span><br><span class="line">&gt; 这是这个引用的最后部分</span><br></pre></td></tr></table></figure></p><blockquote><p>这是一个引用<br>这是上一个引用的接着部分<br>这是这个引用的最后部分</p></blockquote><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一个引用</span><br><span class="line">这是上一个引用的接着部分</span><br><span class="line">这是这个引用的最后部分</span><br></pre></td></tr></table></figure></p><blockquote><p>这是一个引用<br>这是上一个引用的接着部分<br>这是这个引用的最后部分</p></blockquote><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一个引用</span><br><span class="line">&gt; &gt; 这是一个引用里的引用</span><br><span class="line">&gt; 这是这个引用的最后部分</span><br></pre></td></tr></table></figure></p><blockquote><p>这是一个引用</p><blockquote><p>这是一个引用里的引用<br>这是这个引用的最后部分</p></blockquote></blockquote><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; #### 这是一个标题</span><br><span class="line">&gt; - 这是一个引用</span><br><span class="line">&gt; - 这是上一个引用的接着部分</span><br><span class="line">&gt; - 这是这个引用的最后部分</span><br></pre></td></tr></table></figure></p><blockquote><h4 id="这是一个标题"><a href="#这是一个标题" class="headerlink" title="这是一个标题"></a>这是一个标题</h4><ul><li>这是一个引用</li><li>这是上一个引用的接着部分</li><li>这是这个引用的最后部分</li></ul></blockquote><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h5><p>Markdown 支持有序列表和无序列表。<br>无序列表使用星号、加号或是减号作为列表标记：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*   Red</span><br><span class="line">*   Green</span><br><span class="line">*   Blue</span><br><span class="line"></span><br><span class="line">+   Red</span><br><span class="line">+   Green</span><br><span class="line">+   Blue</span><br><span class="line"></span><br><span class="line">-   Red</span><br><span class="line">-   Green</span><br><span class="line">-   Blue</span><br><span class="line"></span><br><span class="line">1.  Bird</span><br><span class="line">2.  McHale</span><br><span class="line">3.  Parish</span><br></pre></td></tr></table></figure></p><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ol><li>Bird</li><li>McHale</li><li>Parish</li></ol><p>内容用固定的缩进整理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">    viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">    Suspendisse id sem consectetuer libero luctus adipiscing</span><br></pre></td></tr></table></figure></p><ul><li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</li><li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing</li></ul><p>偷懒的做法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure></p><ul><li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</li><li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing.</li></ul><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.  This is a list item with two paragraphs. Lorem ipsum dolor</span><br><span class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span><br><span class="line">    mi posuere lectus.</span><br><span class="line"></span><br><span class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span><br><span class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span><br><span class="line">    sit amet velit.</span><br><span class="line"></span><br><span class="line">2.  Suspendisse id sem consectetuer libero luctus adipiscing.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*   This is a list item with two paragraphs.</span><br><span class="line"></span><br><span class="line">    This is the second paragraph in the list item. You&apos;re</span><br><span class="line">only required to indent the first line. Lorem ipsum dolor</span><br><span class="line">sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">*   Another item in the same list.</span><br></pre></td></tr></table></figure></p><ol><li><p>This is a list item with two paragraphs. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit. Aliquam hendrerit<br>mi posuere lectus.</p><p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet<br>vitae, risus. Donec sit amet nisl. Aliquam semper ipsum<br>sit amet velit.</p></li><li><p>Suspendisse id sem consectetuer libero luctus adipiscing.</p></li></ol><ul><li><p>This is a list item with two paragraphs.</p><p>This is the second paragraph in the list item. You’re<br>only required to indent the first line. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit.</p></li><li><p>Another item in the same list.</p></li></ul><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*   A list item with a blockquote:</span><br><span class="line"></span><br><span class="line">    &gt; This is a blockquote</span><br><span class="line">    &gt; inside a list item.</span><br></pre></td></tr></table></figure></p><ul><li><p>A list item with a blockquote:</p><blockquote><p>This is a blockquote<br>inside a list item.</p></blockquote></li></ul><p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   一列表项包含一个列表区块：</span><br><span class="line"></span><br><span class="line">        &lt;代码写在这&gt;</span><br></pre></td></tr></table></figure></p><ul><li><p>一列表项包含一个列表区块：</p><pre><code>&lt;代码写在这&gt;</code></pre></li></ul><h5 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a><strong>代码区块</strong></h5><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落：</span><br><span class="line"></span><br><span class="line">    这是一个代码区块。</span><br></pre></td></tr></table></figure></p><p>这是一个普通段落：</p><pre><code>这是一个代码区块。</code></pre><p>代码也可以使用3个连续的反引号，后面还可以指明代码语言（部分编辑器支持，非官方语法）:</p><pre><code><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello</span><br></pre></td></tr></table></figure></code></pre><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello</span><br></pre></td></tr></table></figure><h5 id="表格支持"><a href="#表格支持" class="headerlink" title="表格支持"></a><strong>表格支持</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目        | 价格   |  数量  |</span><br><span class="line">| --------   | -----:  | :----:  |</span><br><span class="line">| 计算机     | \$1600 |   5     |</span><br><span class="line">| 手机        |   \$12   |   12   |</span><br><span class="line">| 管线        |    \$1    |  234  |</span><br></pre></td></tr></table></figure><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">\$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">\$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">\$1</td><td style="text-align:center">234</td></tr></tbody></table><h5 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a><strong>分隔线</strong></h5><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以<br>在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure></p><hr><hr><hr><hr><hr><h4 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h4><h5 id="链接"><a href="#链接" class="headerlink" title="链接"></a><strong>链接</strong></h5><p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加<br>上链接的 title 文字（鼠标放在链接上时显示的文件），只要在网址后面，用双引号把 title<br>文字包起来即可，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br><span class="line"></span><br><span class="line">[This link](http://example.net/) has no title attribute.</span><br></pre></td></tr></table></figure></p><p>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</p><p>一个参考式链接的范例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [Google] [1] than from</span><br><span class="line">[Yahoo] [2] or [MSN] [3].</span><br><span class="line"></span><br><span class="line">  [1]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [3]: http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure></p><p>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a> than from<br><a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><p>改成用链接名称的方式写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [Google][] than from</span><br><span class="line">[Yahoo][] or [MSN][].</span><br><span class="line"></span><br><span class="line">  [google]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure></p><p>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a> than from<br><a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><h5 id="强调"><a href="#强调" class="headerlink" title="强调"></a><strong>强调</strong></h5><p>Markdown 使用星号（<em>）和底线（_）作为标记强调字词的符号，被 </em> 或 _ 包围的字词会被转成<br>用 <code>&lt;em&gt;</code> 斜体标签包围，用两个 * 或 _ 包起来的话，则会被转成 <code>&lt;strong&gt;</code>加粗，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*single asterisks*</span><br><span class="line"></span><br><span class="line">_single underscores_</span><br><span class="line"></span><br><span class="line">**double asterisks**</span><br><span class="line"></span><br><span class="line">__double underscores__</span><br></pre></td></tr></table></figure></p><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><p>如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。</p><p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*this text is surrounded by literal asterisks\*</span><br></pre></td></tr></table></figure></p><p>*this text is surrounded by literal asterisks*</p><p>部分编辑器支持删除线</p><pre><code>~~这是一段错误的文本。~~</code></pre><p><del>这是一段错误的文本。</del></p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h5><p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use the `printf()` function.</span><br></pre></td></tr></table></figure></p><p>Use the <code>printf()</code> function.</p><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``There is a literal backtick (`) here.``</span><br></pre></td></tr></table></figure></p><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在<br>区段的一开始就插入反引号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A single backtick in a code span: `` ` ``</span><br><span class="line"></span><br><span class="line">A backtick-delimited string in a code span: `` `foo` ``</span><br></pre></td></tr></table></figure></p><p>A single backtick in a code span: <code>`</code></p><p>A backtick-delimited string in a code span: <code>`foo`</code></p><h5 id="图片"><a href="#图片" class="headerlink" title="图片"></a><strong>图片</strong></h5><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p><p>行内式的图片语法看起来像是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](http://ojz1mcltu.bkt.clouddn.com/animals-august2015.jpg)</span><br><span class="line"></span><br><span class="line">![Alt text](http://ojz1mcltu.bkt.clouddn.com/animals-august2015.jpg &quot;docker stack&quot;)</span><br></pre></td></tr></table></figure></p><p>参考式的图片语法则长得像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![Alt text][id]</span><br><span class="line">[id]: http://ojz1mcltu.bkt.clouddn.com/animals-august2015.jpg  &quot;docker stack&quot;</span><br></pre></td></tr></table></figure></p><p>![Alt text][id]<br>[id]: <a href="http://ojz1mcltu.bkt.clouddn.com/animals-august2015.jpg" target="_blank" rel="noopener">http://ojz1mcltu.bkt.clouddn.com/animals-august2015.jpg</a>  “docker stack”</p><blockquote><p>Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p></blockquote><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><h5 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a><strong>自动链接</strong></h5><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来，<br>Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://example.com/&gt;</span><br><span class="line">&lt;address@example.com&gt;</span><br></pre></td></tr></table></figure></p><p><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a><br><a href="mailto:&#x61;&#x64;&#100;&#114;&#x65;&#x73;&#115;&#64;&#101;&#120;&#97;&#109;&#x70;&#108;&#x65;&#46;&#99;&#x6f;&#109;" target="_blank" rel="noopener">&#x61;&#x64;&#100;&#114;&#x65;&#x73;&#115;&#64;&#101;&#120;&#97;&#109;&#x70;&#108;&#x65;&#46;&#99;&#x6f;&#109;</a></p><h5 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a><strong>反斜杠</strong></h5><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文<br>字旁边的方式来做出强调效果（但不用 <em> 标签），你可以在星号的前面加上反斜杠：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*literal asterisks\*</span><br></pre></td></tr></table></figure></em></p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code>\   反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre><h5 id="待办事宜-Todo-列表"><a href="#待办事宜-Todo-列表" class="headerlink" title="待办事宜 Todo 列表"></a><strong>待办事宜 Todo 列表</strong></h5><p>使用带有<code>[ ]</code>或<code>[x]</code>（未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表<br>嵌套以及混用Markdown语法，此语法非标准语法，不是所有markdown编辑器都支持。</p><pre><code>- [ ] **Cmd Markdown 开发**    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率    - [ ] 支持以 PDF 格式导出文稿    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)    - [x] 改进 LaTex 功能        - [x] 修复 LaTex 公式渲染问题        - [x] 新增 LaTex 公式编号功能</code></pre><ul><li>[ ] <strong>Cmd Markdown 开发</strong><ul><li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li>[ ] 支持以 PDF 格式导出文稿</li><li>[x] 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="noopener">语法参考</a></li><li>[x] 改进 LaTex 功能<ul><li>[x] 修复 LaTex 公式渲染问题</li><li>[x] 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="noopener">语法参考</a></li></ul></li></ul></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://www.appinn.com/markdown/" target="_blank" rel="noopener">http://www.appinn.com/markdown/</a></li><li><a href="https://www.zybuluo.com/mdeditor?url=https%3A%2F%2Fwww.zybuluo.com%2Fstatic%2Feditor%2Fmd-help.markdown" target="_blank" rel="noopener">https://www.zybuluo.com/mdeditor?url=https%3A%2F%2Fwww.zybuluo.com%2Fstatic%2Feditor%2Fmd-help.markdown</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文档相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> doc </tag>
            
            <tag> markdown </tag>
            
            <tag> pdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REST接口设计规范总结</title>
      <link href="/posts/3/"/>
      <url>/posts/3/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Representational State Transfer 简称 REST 描述了一个架构样式的网络系统。REST 指的是<br>一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。</p><p>概念:</p><ul><li><p>资源（Resources） REST是”表现层状态转化”，其实它省略了主语。”表现层”其实指的是”资源”的”表现层”。<br>那么什么是资源呢？就是我们平常上网访问的一张图片、一个文档、一个视频等。这些资源我们通过URI来定位，也就是一个URI表示一个资源。</p></li><li><p>表现层（Representation）<br>资源是做一个具体的实体信息，他可以有多种的展现方式。而把实体展现出来就是表现层，例如一个txt文本信息，他可以输出成html、json、xml等格式，一个图片他可以jpg、png等方式展现，这个就是表现层的意思。<br>URI确定一个资源，但是如何确定它的具体表现形式呢？应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p></li><li><p>状态转化（State Transfer）<br>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，肯定涉及到数据和状态的变化。而HTTP协议是无状态的，那么这些状态肯定保存在服务器端，所以如果客户端想要通知服务器端改变数据和状态的变化，肯定要通过某种方式来通知它。</p></li></ul><h3 id="URI格式规范"><a href="#URI格式规范" class="headerlink" title="URI格式规范"></a>URI格式规范</h3><ul><li>URI中尽量使用连字符”-“代替下划线”_”的使用</li><li>URI中统一使用小写字母</li><li>URI中不要包含文件(脚本)的扩展名<a id="more"></a><h3 id="资源的原型"><a href="#资源的原型" class="headerlink" title="资源的原型"></a>资源的原型</h3></li><li>文档(Document)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文档是资源的单一表现形式，可以理解为一个对象，或者数据库中的一条记录。在请求文档时，</span><br><span class="line">要么返回文档对应的数据，要么会返回一个指向另外一个资源(文档)的链接。</span><br><span class="line">以下是几个基于文档定义的URI例子：</span><br><span class="line">https://api.example.com/users/will</span><br><span class="line">https://api.example.com/posts/1</span><br><span class="line">https://api.example.com/posts/1/comments/1</span><br></pre></td></tr></table></figure><ul><li>集合(Collection)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">集合可以理解为是资源的一个容器(目录)，我们可以向里面添加资源(文档)。例如：</span><br><span class="line">https://api.example.com/users</span><br><span class="line">https://api.example.com/posts</span><br><span class="line">https://api.example.com/posts/1/comments</span><br></pre></td></tr></table></figure><ul><li>仓库(Store)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">仓库是客户端来管理的一个资源库，客户端可以向仓库中新增资源或者删除资源。</span><br><span class="line">客户端也可以批量获取到某个仓库下的所有资源。仓库中的资源对外的访问不会提供单独URI的，</span><br><span class="line">客户端在创建资源时候的URI除外。例如：</span><br><span class="line">PUT /users/1234/favorites/posts/1  </span><br><span class="line">上面的例子我们可以理解为，我们向一个id是1234的用户的仓库(收藏夹)中，</span><br><span class="line">添加了一个id为1的post资源。通俗点儿说：就是用户收藏了一个自己喜爱的id为1的文章。</span><br></pre></td></tr></table></figure><ul><li>控制器(Controller)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">控制器资源模型，可以执行一个方法，支持参数输入，结果返回。 是为了除了标准操作:</span><br><span class="line">增删改查(CRUD)以外的一些逻辑操作。控制器(方法)一般定义子URI中末尾，</span><br><span class="line">并且不会有子资源(控制器)。例如：</span><br><span class="line">向用户重发ID为245743的消息</span><br><span class="line">POST /alerts/245743/resend  </span><br><span class="line"></span><br><span class="line">发布ID为1的文章</span><br><span class="line">POST /posts/1/publish</span><br></pre></td></tr></table></figure><blockquote><p>把动作转换成资源</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">把动作转换成可以执行 CRUD 操作的资源， github 就是用了这种方法。</span><br><span class="line"></span><br><span class="line">比如“喜欢”一个 gist，就增加一个 /gists/:id/star 子资源，</span><br><span class="line">然后对其进行操作：“喜欢”使用 PUT /gists/:id/star，</span><br><span class="line">“取消喜欢”使用 DELETE /gists/:id/star</span><br><span class="line">或者使用 POST /gists/:id/unstar</span><br><span class="line"></span><br><span class="line">另外一个例子是 Fork，这也是一个动作，但是在 gist 下面增加 forks资源，</span><br><span class="line">就能把动作变成 CRUD 兼容的：POST /gists/:id/forks 可以执行用户 fork 的动作。</span><br></pre></td></tr></table></figure><h3 id="URI命名规范"><a href="#URI命名规范" class="headerlink" title="URI命名规范"></a>URI命名规范</h3><ul><li>文档(Document)类型的资源用名词(短语)单数命名</li><li>集合(Collection)类型的资源用名词(短语)复数命名</li><li>仓库(Store)类型的资源用名词(短语)复数命名</li><li>控制器(Controller)类型的资源用动词(短语)命名</li><li>URI中有些字段可以是变量，在实际使用中可以按需替换</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如一个资源URI可以这样定义：</span><br><span class="line">https://api.example.com/posts/&#123;postId&#125;/comments/&#123;commentId&#125;</span><br><span class="line">postId,commentId 是变量(数字，字符串都类型都可以)。</span><br></pre></td></tr></table></figure><ul><li>CRUD的操作不要体现在URI中，HTTP协议中的操作符已经对CRUD做了映射。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CRUD是创建，读取，更新，删除这四个经典操作的简称  </span><br><span class="line">例如删除的操作用REST规范执行的话，应该是这个样子：</span><br><span class="line">DELETE /users/1234</span><br><span class="line"></span><br><span class="line">以下是几个错误的示例：</span><br><span class="line">GET /deleteUser?id=1234  </span><br><span class="line">GET /deleteUser/1234  </span><br><span class="line">DELETE /deleteUser/1234  </span><br><span class="line">POST /users/1234/delete</span><br></pre></td></tr></table></figure><h3 id="URI的query字段"><a href="#URI的query字段" class="headerlink" title="URI的query字段"></a>URI的query字段</h3><p>在REST中,query字段一般作为查询的参数补充，也可以帮助标示一个唯一的资源。但需要注意的是，<br>作为一个提供查询功能的URI，无论是否有query条件，我们都应该保证结果的唯一性，<br>一个URI对应的返回数据是不应该被改变的(在资源没有修改的情况下)。<br>HTTP中的缓存也可能缓存查询结果。</p><ul><li>Query参数可以作为Collection或Store类型资源的过滤条件来使用 例如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /users //返回所有用户列表  </span><br><span class="line">GET /users?role=admin //返回权限为admin的用户列表</span><br><span class="line">GET /search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125; //根据多条件查询用户</span><br></pre></td></tr></table></figure><ul><li>Query参数可以作为Collection或Store资源列表分页标示使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">如果是一个简单的列表操作，可以这样设计：</span><br><span class="line">GET /users?pageSize=25&amp;pageStartIndex=50  </span><br><span class="line">如果是一个复杂的列表或查询操作的话，我们可以为资源设计一个Collection，</span><br><span class="line">因为复杂查询可能会涉及比较多的参数，建议使用Post的方式传入，例如这样：</span><br><span class="line">POST /users/search</span><br><span class="line"></span><br><span class="line">相关的分页信息还可以存放到 Link 头部，这样客户端可以直接得到诸如下一页、最后一页、上一页</span><br><span class="line">等内容的 url 地址</span><br><span class="line">Status: 200 OK</span><br><span class="line">Link: &lt;https://api.github.com/resource?page=2&gt;; rel=&quot;previous&quot;,</span><br><span class="line">      &lt;https://api.github.com/resource?page=2&gt;; rel=&quot;next&quot;,</span><br><span class="line">      &lt;https://api.github.com/resource?page=5&gt;; rel=&quot;last&quot;</span><br><span class="line">X-RateLimit-Limit: 20</span><br><span class="line">X-RateLimit-Remaining: 19</span><br></pre></td></tr></table></figure><h3 id="HTTP请求方法的使用"><a href="#HTTP请求方法的使用" class="headerlink" title="HTTP请求方法的使用"></a>HTTP请求方法的使用</h3><ul><li>GET方法用来获取资源</li><li>PUT方法可用来新增/更新Store类型的资源</li><li>PUT方法可用来更新一个资源的全部属性，使用时传递所有属性的值，即使有的值没有改变</li><li>PATCH方法更新资源的部分属性。因为 PATCH 比较新，而且规范比较复杂，所以真正实现的比较少，<br>一般都是用 POST 替代</li><li>POST方法可用来创建一个资源</li><li>POST方法可用来触发执行一个Controller类型资源</li><li>DELETE方法用于删除资源</li></ul><h3 id="HTTP响应状态码的使用"><a href="#HTTP响应状态码的使用" class="headerlink" title="HTTP响应状态码的使用"></a>HTTP响应状态码的使用</h3><ul><li>200 (“OK”) 用于一般性的成功返回</li><li>200 (“OK”) 不可用于请求错误返回</li><li>201 (“Created”) 资源被创建</li><li>202 (“Accepted”) 用于Controller控制类资源异步处理的返回，仅表示请求已经收到。<br>对于耗时比较久的处理，一般用异步处理来完成</li><li>204 (“No Content”) 此状态可能会出现在PUT、POST、DELETE的请求中，一般表示资源存在，<br>但消息体中不会返回任何资源相关的状态或信息。</li><li>301 (“Moved Permanently”) 资源的URI被转移，需要使用新的URI访问</li><li>302 (“Found”) 不推荐使用，此代码在HTTP1.1协议中被303/307替代。<br>我们目前对302的使用和最初HTTP1.0定义的语意是有出入的，应该只有在GET/HEAD方法下，<br>客户端才能根据Location执行自动跳转，而我们目前的客户端基本上是不会判断原请求方法的，<br>无条件的执行临时重定向</li><li>303 (“See Other”) 返回一个资源地址URI的引用，但不强制要求客户端获取该地址的状态(访问该地址)</li><li>304 (“Not Modified”) 有一些类似于204状态，服务器端的资源与客户端最近访问的资源版本一致，<br>并无修改，不返回资源消息体。可以用来降低服务端的压力</li><li>307 (“Temporary Redirect”) 目前URI不能提供当前请求的服务，临时性重定向到另外一个URI。<br>在HTTP1.1中307是用来替代早期HTTP1.0中使用不当的302</li><li>400 (“Bad Request”) 用于客户端一般性错误返回, 在其它4xx错误以外的错误，也可以使用400，<br>具体错误信息可以放在body中</li><li>401 (“Unauthorized”) 在访问一个需要验证的资源时，验证错误</li><li>403 (“Forbidden”) 一般用于非验证性资源访问被禁止，例如对于某些客户端只开放部分API的访问权限，<br>而另外一些API可能无法访问时，可以给予403状态</li><li>404 (“Not Found”) 找不到URI对应的资源</li><li>405 (“Method Not Allowed”) HTTP的方法不支持，例如某些只读资源，可能不支持POST/DELETE。<br>但405的响应header中必须声明该URI所支持的方法</li><li>406 (“Not Acceptable”) 客户端所请求的资源数据格式类型不被支持，<br>例如客户端请求数据格式为application/xml，但服务器端只支持application/json</li><li>409 (“Conflict”) 资源状态冲突，例如客户端尝试删除一个非空的Store资源</li><li>412 (“Precondition Failed”) 用于有条件的操作不被满足时</li><li>415 (“Unsupported Media Type”) 客户所支持的数据类型，服务端无法满足</li><li>429    (“Too Many Requests”)    客户端在规定的时间里发送了太多请求，在进行限流的时候会用到</li><li>500 (“Internal Server Error”) 服务器端的接口错误，此错误于客户端无关</li></ul><h3 id="HTTP-Headers"><a href="#HTTP-Headers" class="headerlink" title="HTTP Headers"></a>HTTP Headers</h3><ul><li>Content-Type 标示body的数据格式</li><li>Content-Length body 数据体的大小，客户端可以根据此标示检验读取到的数据是否完整，<br>也可以通过Header判断是否需要下载可能较大的数据体</li><li>Last-Modified 用于服务器端的响应，是一个资源最后被修改的时间戳，客户端(缓存)可以根据<br>此信息判断是否需要重新获取该资源</li><li>ETag 服务器端资源版本的标示，客户端(缓存)可以根据此信息判断是否需要重新获取该资源，<br>需要注意的是，ETag如果通过服务器随机生成，可能会存在多个主机对同一个资源产生不同ETag的问题</li><li>Store类型的资源要支持有条件的PUT请求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">假设有两个客户端client#1/#2都向一个Store资源提交PUT请求，服务端是无法清楚的判断是要</span><br><span class="line">insert还是要update的，所以我们要在header中加入条件标示if-Match，If-Unmodified-Since</span><br><span class="line">来明确是本次调用API的意图。例如：</span><br><span class="line"></span><br><span class="line">client#1第一次向服务端发起一个请求 PUT /objects/2113 此时2113资源还不存在，那服务端会</span><br><span class="line">认为本次请求是一个insert操作，完成后，会返回 201 (“Created”)</span><br><span class="line"></span><br><span class="line">client#2再一次向服务端发起同一个请求 PUT /objects/2113 时，因2113资源已存在，服务端会</span><br><span class="line">返回 409 (“Conflict”)</span><br><span class="line"></span><br><span class="line">为了能让client#2的请求成功，或者说我们要清楚的表明本次操作是一次update操作，我们必须在</span><br><span class="line">header中加入一些条件标示，例如 if-Match。我们需要给出资源的ETag(if-Match:Etag)，来表</span><br><span class="line">明我们希望更新资源的版本，如果服务端版本一致，会返回200 (“OK”) 或者 204 (“No Content”)。</span><br><span class="line">如果服务端发现指定的版本与当前资源版本不一致，会返回 412 (“Precondition Failed”)</span><br></pre></td></tr></table></figure><ul><li>Location 在响应header中使用，一般为客户端感兴趣的资源URI,例如在成功创建一个资源后，我们<br>可以把新的资源URI放在Location中，如果是一个异步创建资源的请求，接口在响应202 (“Accepted”)<br>的同时可以给予客户端一个异步状态查询的地址</li><li>Cache-Control, Expires, Date 通过缓存机制提升接口响应性能,同时根据实际需要也可以禁止<br>客户端对接口请求做缓存。对于REST接口来说，如果某些接口实时性要求不高的情况下，我们可以使<br>用max-age来指定一个小的缓存时间，这样对客户端和服务器端双方都是有利的。一般来说只对GET<br>方法且返回200的情况下使用缓存，在某些情况下我们也可以对返回3xx或者4xx的情况下做缓存，可<br>以防范错误访问带来的负载。</li><li>我们可以自定义一些头信息，作为客户端和服务器间的通信使用，但不能改变HTTP方法的性质。自<br>定义头尽量简单明了，不要用body中的信息对其作补充说明。</li></ul><h3 id="API-地址和版本"><a href="#API-地址和版本" class="headerlink" title="API 地址和版本"></a>API 地址和版本</h3><p>在 url 中指定 API 的版本是个很好地做法。如果 API 变化比较大，可以把 API 设计为子域名，<br>比如 <a href="https://api.github.com/v3；也可以简单地把版本放在路径中，比如" target="_blank" rel="noopener">https://api.github.com/v3；也可以简单地把版本放在路径中，比如</a> <a href="https://example.com/api/v1。" target="_blank" rel="noopener">https://example.com/api/v1。</a><br>另一种做法是，将版本号放在HTTP头信息中。</p><h3 id="限流-rate-limit"><a href="#限流-rate-limit" class="headerlink" title="限流 rate limit"></a>限流 rate limit</h3><p>如果对访问的次数不加控制，很可能会造成 API 被滥用，甚至被 DDos 攻击。根据使用者不同的身<br>份对其进行限流，可以防止这些情况，减少服务器的压力。</p><p>对用户的请求限流之后，要有方法告诉用户它的请求使用情况，Github API 使用的三个相关的头部：</p><ul><li>X-RateLimit-Limit: 用户每个小时允许发送请求的最大值</li><li>X-RateLimit-Remaining：当前时间窗口剩下的可用请求数目</li><li>X-RateLimit-Rest: 时间窗口重置的时候，到这个时间点可用的请求数量就会变成 X-RateLimit-Limit 的值</li></ul><p>对于超过流量的请求，可以返回 429 Too many requests 状态码，并附带错误信息。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://cizixs.com/2016/12/12/restful-api-design-guide" target="_blank" rel="noopener">http://cizixs.com/2016/12/12/restful-api-design-guide</a></li><li><a href="http://wangwei.info/about-rest-api/" target="_blank" rel="noopener">http://wangwei.info/about-rest-api/</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></li><li><a href="https://zh.wikipedia.org/wiki/REST" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/REST</a></li><li><a href="https://developer.github.com/v3" target="_blank" rel="noopener">https://developer.github.com/v3</a></li><li><a href="http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/08/17/Restful%20API%20%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html" target="_blank" rel="noopener">http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/08/17/Restful%20API%20%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REST </tag>
            
            <tag> API </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codis3系列版本安装</title>
      <link href="/posts/2/"/>
      <url>/posts/2/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Codis 是 Wandoujia Infrastructure Team 开发的一个分布式 Redis 服务,<br>用户可以看成是一个无限内存的 Redis 服务, 有动态扩/缩容的能力. 对偏存储型的业务更实用,<br>如果你需要 SUBPUB 之类的指令, Codis 是不支持的. 时刻记住 Codis 是一个分布式存储的项目.<br>对于海量的 key, value不太大( &lt;= 1M ), 随着业务扩展缓存也要随之扩展的业务场景有特效.</p><p>Codis 3.x 由以下组件组成：</p><p>Codis Server：基于 redis-3.2.8  分支开发。增加了额外的数据结构，<br>以支持 slot 有关的操作以及数据迁移指令。具体的修改可以参考文档 redis 的修改。</p><p>Codis Proxy：客户端连接的 Redis 代理服务, 实现了 Redis 协议。 除部分命令不支持<br>以外(不支持的命令列表)，表现的和原生的 Redis 没有区别（就像 Twemproxy）。</p><ul><li>对于同一个业务集群而言，可以同时部署多个 codis-proxy 实例；</li><li>不同 codis-proxy 之间由 codis-dashboard 保证状态同步。</li></ul><p>Codis Dashboard：集群管理工具，支持 codis-proxy、codis-server 的添加、删除，<br>以及据迁移等操作。在集群状态发生改变时，codis-dashboard 维护集群下所有<br>codis-proxy 的状态的一致性。</p><ul><li>对于同一个业务集群而言，同一个时刻 codis-dashboard 只能有 0个或者1个；</li><li>所有对集群的修改都必须通过 codis-dashboard 完成。</li></ul><p>Codis Admin：集群管理的命令行工具。</p><ul><li>可用于控制 codis-proxy、codis-dashboard 状态以及访问外部存储。</li></ul><p>Codis FE：集群管理界面。</p><ul><li>多个集群实例共享可以共享同一个前端展示页面；</li><li>通过配置文件管理后端 codis-dashboard 列表，配置文件可自动更新。</li></ul><p>Codis HA：为集群提供高可用。</p><ul><li>依赖 codis-dashboard 实例，自动抓取集群各个组件的状态；</li><li>会根据当前集群状态自动生成主从切换策略，并在需要时通过 codis-dashboard 完成主从切换。</li></ul><p>Storage：为集群状态提供外部存储。</p><ul><li>提供 Namespace 概念，不同集群的会按照不同 product name 进行组织；</li><li>目前仅提供了 Zookeeper、Etcd、Fs 三种实现，但是提供了抽象的 interface 可自行扩展。</li></ul><a id="more"></a><h3 id="安装配置-zookeeper-单机启动，生产环境需要集群"><a href="#安装配置-zookeeper-单机启动，生产环境需要集群" class="headerlink" title="安装配置 zookeeper(单机启动，生产环境需要集群)"></a>安装配置 zookeeper(单机启动，生产环境需要集群)</h3><p>1.安装zookeeper<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk</span><br><span class="line"><span class="built_in">cd</span> /server/software</span><br><span class="line">wget http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.5.1-alpha/zookeeper-3.5.1-alpha.tar.gz</span><br><span class="line">tar xf zookeeper-3.5.1-alpha.tar.gz</span><br><span class="line">mv zookeeper-3.5.1-alpha zookeeper</span><br><span class="line">mv zookeeper /usr/<span class="built_in">local</span>/</span><br><span class="line">chown root.root /usr/<span class="built_in">local</span>/zookeeper -R</span><br></pre></td></tr></table></figure></p><p>2.配置zookeeper<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /data/zookeeper/&#123;data,<span class="built_in">log</span>&#125;</span><br><span class="line">cat &gt;/usr/<span class="built_in">local</span>/zookeeper/conf/zoo.cfg&lt;&lt;EOF</span><br><span class="line">clientPort=2181</span><br><span class="line">maxClientCnxns=1024</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=20</span><br><span class="line">syncLimit=10</span><br><span class="line"></span><br><span class="line">dataDir=/data/zookeeper/data</span><br><span class="line">dataLogDir=/data/zookeeper/<span class="built_in">log</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>3.启动zookeeper<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/zookeeper/bin/zkServer.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看节点的状态</span></span><br><span class="line">/usr/<span class="built_in">local</span>/zookeeper/bin/zkServer.sh status</span><br></pre></td></tr></table></figure></p><h3 id="安装-codis"><a href="#安装-codis" class="headerlink" title="安装 codis"></a>安装 codis</h3><h4 id="下载二进制包"><a href="#下载二进制包" class="headerlink" title="下载二进制包"></a>下载二进制包</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /server/software</span><br><span class="line">wget https://github.com/CodisLabs/codis/releases/download/3.1.3/codis3.1.3-go1.7.4-linux.tar.gz</span><br><span class="line">tar xf codis3.1.3-go1.7.4-linux.tar.gz</span><br><span class="line"><span class="built_in">cd</span> codis3.1.3-go1.7.4-linux</span><br><span class="line">mkdir bin etc</span><br><span class="line">mv codis-* redis-* bin/</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">mv codis3.1.3-go1.7.4-linux /usr/<span class="built_in">local</span>/codis</span><br><span class="line">chown root.root /usr/<span class="built_in">local</span>/codis -R</span><br></pre></td></tr></table></figure><h4 id="启动-Codis-Dashboard"><a href="#启动-Codis-Dashboard" class="headerlink" title="启动 Codis Dashboard"></a>启动 Codis Dashboard</h4><ol><li>配置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/codis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成默认的配置文件</span></span><br><span class="line">./bin/codis-dashboard --default-config &gt; etc/dashboard.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置参数</span></span><br></pre></td></tr></table></figure><ol start="2"><li>启动</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup ./bin/codis-dashboard --ncpu=4 --config=etc/dashboard.toml \</span><br><span class="line">    --<span class="built_in">log</span>=dashboard.log --<span class="built_in">log</span>-level=WARN &amp;</span><br></pre></td></tr></table></figure><h4 id="启动-Codis-Proxy"><a href="#启动-Codis-Proxy" class="headerlink" title="启动 Codis Proxy"></a>启动 Codis Proxy</h4><ol><li>配置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/codis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成默认的配置文件</span></span><br><span class="line">./bin/codis-proxy --default-config &gt; etc/proxy.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置参数</span></span><br></pre></td></tr></table></figure><ol start="2"><li>启动</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup ./bin/codis-proxy --ncpu=4 --config=etc/proxy.toml \</span><br><span class="line">    --<span class="built_in">log</span>=proxy.log --<span class="built_in">log</span>-level=WARN &amp;</span><br></pre></td></tr></table></figure><h4 id="启动-Codis-Server"><a href="#启动-Codis-Server" class="headerlink" title="启动 Codis Server"></a>启动 Codis Server</h4><ol><li>配置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /data/redis/6379</span><br><span class="line">cat &gt;/usr/<span class="built_in">local</span>/codis/etc/redis_6379.conf&lt;&lt;EOF</span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">bind</span> `ifconfig eth1 | grep <span class="string">"inet "</span>| head -n 1 | awk -F<span class="string">'[: ]+'</span> <span class="string">'&#123;print $3&#125;'</span>`</span><br><span class="line">port 6379</span><br><span class="line">timeout 300</span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">"/data/redis/6379/redis.log"</span></span><br><span class="line">databases 16</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="comment">#save 900 1</span></span><br><span class="line"><span class="comment">#save 300 10</span></span><br><span class="line"><span class="comment">#save 60 10000</span></span><br><span class="line">dir <span class="string">"/data/redis/6379"</span></span><br><span class="line">maxclients 10000</span><br><span class="line"><span class="comment">#下面两项一般配置使用</span></span><br><span class="line">maxmemory 1024MB</span><br><span class="line"><span class="comment">#内存不足时的清楚策略</span></span><br><span class="line">maxmemory-policy allkeys-lru</span><br><span class="line"><span class="comment">#开启日志记录，相当于MySQL的binlog</span></span><br><span class="line"><span class="comment">#appendonly yes  </span></span><br><span class="line"><span class="comment">#appendfilename "appendonly.aof"</span></span><br><span class="line"><span class="comment">#appendfsync everysec</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mkdir -pv /data/redis/6380</span><br><span class="line">cat &gt;/usr/<span class="built_in">local</span>/codis/etc/redis_6380.conf&lt;&lt;EOF</span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">bind</span> `ifconfig eth1 | grep <span class="string">"inet "</span>| head -n 1 | awk -F<span class="string">'[: ]+'</span> <span class="string">'&#123;print $3&#125;'</span>`</span><br><span class="line">port 6380</span><br><span class="line">timeout 300</span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">"/data/redis/6380/redis.log"</span></span><br><span class="line">databases 16</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="comment">#save 900 1</span></span><br><span class="line"><span class="comment">#save 300 10</span></span><br><span class="line"><span class="comment">#save 60 10000</span></span><br><span class="line">dir <span class="string">"/data/redis/6380"</span></span><br><span class="line">maxclients 10000</span><br><span class="line"><span class="comment">#下面两项一般配置使用</span></span><br><span class="line">maxmemory 1024MB</span><br><span class="line"><span class="comment">#内存不足时的清楚策略</span></span><br><span class="line">maxmemory-policy allkeys-lru</span><br><span class="line"><span class="comment">#开启日志记录，相当于MySQL的binlog</span></span><br><span class="line"><span class="comment">#appendonly yes  </span></span><br><span class="line"><span class="comment">#appendfilename "appendonly.aof"</span></span><br><span class="line"><span class="comment">#appendfsync everysec</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ol start="2"><li>启动</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/codis/bin/codis-server /usr/<span class="built_in">local</span>/codis/etc/redis_6379.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/codis/bin/codis-server /usr/<span class="built_in">local</span>/codis/etc/redis_6380.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">ps -ef | grep codis-server</span><br><span class="line">netstat -tunlp | grep 63</span><br></pre></td></tr></table></figure><h4 id="启动-Codis-FE（可选组件）"><a href="#启动-Codis-FE（可选组件）" class="headerlink" title="启动 Codis FE（可选组件）"></a>启动 Codis FE（可选组件）</h4><ol><li>配置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/codis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">./bin/codis-admin --dashboard-list --zookeeper=lab1:2181 &gt; etc/codis.json</span><br></pre></td></tr></table></figure><ol start="2"><li>启动</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/codis</span><br><span class="line">nohup ./bin/codis-fe --ncpu=4 --<span class="built_in">log</span>=fe.log --<span class="built_in">log</span>-level=WARN \</span><br><span class="line">    --dashboard-list=etc/codis.json --assets-dir=/usr/<span class="built_in">local</span>/codis/assets \</span><br><span class="line">    --listen=192.168.12.211:8090 &amp;</span><br></pre></td></tr></table></figure><h4 id="启动-Codis-HA（可选组件）"><a href="#启动-Codis-HA（可选组件）" class="headerlink" title="启动 Codis HA（可选组件）"></a>启动 Codis HA（可选组件）</h4><ol><li>启动</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./bin/codis-ha --<span class="built_in">log</span>=ha.log --<span class="built_in">log</span>-level=WARN --dashboard=192.168.12.211:18080 &amp;</span><br></pre></td></tr></table></figure><h4 id="Codis-Admin（命令行工具）"><a href="#Codis-Admin（命令行工具）" class="headerlink" title="Codis Admin（命令行工具）"></a>Codis Admin（命令行工具）</h4><ol><li>codis-dashboard 异常退出的修复</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/codis-admin --remove-lock --product=codis-famulei --zookeeper=lab1:2181</span><br></pre></td></tr></table></figure><ol start="2"><li>codis-proxy 异常退出的修复</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确认 codis-proxy 进程已经退出（很重要）</span></span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --remove-proxy --addr=127.0.0.1:11080 --force</span><br></pre></td></tr></table></figure><h4 id="添加启动配置的-codis-server"><a href="#添加启动配置的-codis-server" class="headerlink" title="添加启动配置的 codis-server"></a>添加启动配置的 codis-server</h4><ol><li>web页面方式添加</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问如下页面</span></span><br><span class="line">http://192.168.12.211:8090/</span><br></pre></td></tr></table></figure><p><img src="/posts/2/codis-add.jpg" alt=""></p><p>添加完成后还需要点击如下图标生成主从关系</p><p><img src="/posts/2/codis-ms.jpg" alt=""></p><ol start="2"><li>命令行添加</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加组</span></span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --create-group --gid=2</span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --create-group --gid=3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 codis-server 添加到指定组</span></span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --group-add --gid=2 --addr=192.168.12.212:6379</span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --group-add --gid=2 --addr=192.168.12.212:6380</span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --group-add --gid=3 --addr=192.168.12.213:6379</span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --group-add --gid=3 --addr=192.168.12.213:6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置同步状态</span></span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --sync-action  --create \</span><br><span class="line">--addr=192.168.12.212:6379</span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --sync-action  --create \</span><br><span class="line">--addr=192.168.12.212:6380</span><br></pre></td></tr></table></figure><h4 id="分配-slots-到-group"><a href="#分配-slots-到-group" class="headerlink" title="分配 slots 到 group"></a>分配 slots 到 group</h4><ol><li>web页面方式添加</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问如下页面</span></span><br><span class="line">http://192.168.12.211:8090/</span><br></pre></td></tr></table></figure><p><img src="/posts/2/codis-slot.jpg" alt=""></p><p>也可以直接使用如下按键快速分配<br><img src="/posts/2/slot.png" alt=""></p><ol start="2"><li>命令行添加</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --slot-action --create-range --beg=600 --end=1023 --gid=3</span><br></pre></td></tr></table></figure><h4 id="上线-proxy"><a href="#上线-proxy" class="headerlink" title="上线 proxy"></a>上线 proxy</h4><p>proxy启动之后需要上线才能使用</p><ol><li>web页面方式添加</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问如下页面</span></span><br><span class="line">http://192.168.12.211:8090/</span><br></pre></td></tr></table></figure><p><img src="/posts/2/codis-proxy.jpg" alt=""></p><ol start="2"><li>命令行添加</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --online-proxy --addr=192.168.88.211:11080</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>基本测试</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/redis-cli -h 192.168.12.211 -p 19000</span><br></pre></td></tr></table></figure><ol start="2"><li>性能测试</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/redis-benchmark -h 192.168.12.211 -p 19000</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/CodisLabs/codis/blob/release3.1/doc/tutorial_zh.md" target="_blank" rel="noopener">https://github.com/CodisLabs/codis/blob/release3.1/doc/tutorial_zh.md</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> codis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pika安装配置</title>
      <link href="/posts/1/"/>
      <url>/posts/1/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Pika是一个可持久化的大容量redis存储服务，兼容string、hash、list、zset、<br>set的绝大接口(<a href="https://github.com/Qihoo360/pika/wiki/pika-%E6%94%AF%E6%8C%81%E7%9A%84redis%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%85%BC%E5%AE%B9%E6%83%85%E5%86%B5" target="_blank" rel="noopener">兼容详情</a>)，<br>解决redis由于存储数据量巨大而导致内存不够用的容量瓶颈，<br>并且可以像redis一样，通过slaveof命令进行主从备份，支持全同步和部分同步，<br>pika还可以用在twemproxy或者codis中来实现静态数据分片（pika已经可以支持codis的<br>动态迁移slot功能）<br><a id="more"></a></p><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum install -y snappy-devel bz2 libzip-dev libsnappy-dev libprotobuf-dev \</span><br><span class="line">libevent-dev protobuf-compiler libgoogle-glog-dev protobuf-devel \</span><br><span class="line">libevent-devel bzip2-devel libbz2-dev zlib-devel gcc-c++</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看gcc版本</span></span><br><span class="line">gcc -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不4.8需要先安装切换到4.8</span></span><br><span class="line">sudo rpm --import http://ftp.scientificlinux.org/linux/scientific/5x/x86_64/RPM-GPG-KEYs/RPM-GPG-KEY-cern</span><br><span class="line">sudo wget http://people.centos.org/tru/devtools-2/devtools-2.repo -O /etc/yum.repos.d/devtools-2.repo</span><br><span class="line">sudo yum install -y devtoolset-2-gcc devtoolset-2-binutils devtoolset-2-gcc-c++</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-2 bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/Qihoo360/pika.git &amp;&amp; <span class="built_in">cd</span> pika</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make __REL=1 -j4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若编译过程中，提示有依赖的库没有安装，则有提示安装后再重新编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">cp -r output /usr/<span class="built_in">local</span>/pika</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置库</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'/usr/local/pika/lib'</span> &gt; /etc/ld.so.conf.d/pika.conf</span><br><span class="line">ldconfig -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">/usr/<span class="built_in">local</span>/pika/bin/pika -v</span><br></pre></td></tr></table></figure><h3 id="配置运行"><a href="#配置运行" class="headerlink" title="配置运行"></a>配置运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置</span></span><br><span class="line">mkdir -pv /data/pika</span><br><span class="line">mv /usr/<span class="built_in">local</span>/pika/conf/pika.conf /usr/<span class="built_in">local</span>/pika/conf/pika.conf.ori</span><br><span class="line">cat &gt;/usr/<span class="built_in">local</span>/pika/conf/pika.conf&lt;&lt;EOF</span><br><span class="line">port : 9221</span><br><span class="line">thread-num : 1</span><br><span class="line">sync-thread-num : 6</span><br><span class="line">sync-buffer-size : 10</span><br><span class="line"><span class="built_in">log</span>-path : /data/pika/<span class="built_in">log</span>/</span><br><span class="line">loglevel : info</span><br><span class="line">db-path : /data/pika/db/</span><br><span class="line">write-buffer-size : 268435456</span><br><span class="line">timeout : 60</span><br><span class="line">requirepass :</span><br><span class="line">masterauth :</span><br><span class="line">userpass :</span><br><span class="line">userblacklist :</span><br><span class="line">dump-prefix :</span><br><span class="line">daemonize : yes</span><br><span class="line">dump-path : /data/pika/dump/</span><br><span class="line">pidfile : /data/pika/pika.pid</span><br><span class="line">maxclients : 20000</span><br><span class="line">target-file-size-base : 20971520</span><br><span class="line">expire-logs-days : 7</span><br><span class="line">expire-logs-nums : 10</span><br><span class="line">root-connection-num : 2</span><br><span class="line">slowlog-log-slower-than : 10000</span><br><span class="line">slave-read-only : 0</span><br><span class="line">db-sync-path : /data/pika/dbsync/</span><br><span class="line">db-sync-speed : -1</span><br><span class="line">binlog-file-size : 104857600</span><br><span class="line">compression : snappy</span><br><span class="line">max-background-flushes : 1</span><br><span class="line">max-background-compactions : 2</span><br><span class="line">max-cache-files : 5000</span><br><span class="line">max-bytes-for-level-multiplier : 10</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/pika/bin/pika -c /usr/<span class="built_in">local</span>/pika/conf/pika.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测端口</span></span><br><span class="line">netstat -tunlp | grep 9221</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本测试</span></span><br><span class="line">yum install -y redis</span><br><span class="line">redis-cli -h 127.0.0.1 -p 9221</span><br><span class="line"><span class="built_in">set</span> will mgx</span><br><span class="line">get will</span><br><span class="line"></span><br><span class="line"><span class="comment"># 性能测试</span></span><br><span class="line">redis-benchmark -h 127.0.0.1 -p 9221 -n 1000000 -t <span class="built_in">set</span>,get \</span><br><span class="line">-r 10000000000 -c 120 -d 200</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/Qihoo360/pika/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/Qihoo360/pika/blob/master/README_CN.md</a></li><li><a href="https://github.com/Qihoo360/pika/wiki/pika-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">https://github.com/Qihoo360/pika/wiki/pika-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NoSQL </tag>
            
            <tag> pika </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
